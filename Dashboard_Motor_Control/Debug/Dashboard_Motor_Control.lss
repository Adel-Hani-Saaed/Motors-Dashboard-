
Dashboard_Motor_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000098e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001dc  00800060  000098e4  00009978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080023c  0080023c  00009b54  2**0
                  ALLOC
  3 .stab         00006fa8  00000000  00000000  00009b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002365  00000000  00000000  00010afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00012e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000254  00000000  00000000  00013061  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003487  00000000  00000000  000132b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000017df  00000000  00000000  0001673c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001713  00000000  00000000  00017f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  00019630  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000387  00000000  00000000  00019850  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002340  00000000  00000000  00019bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  0001bf17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 01 29 	jmp	0x5202	; 0x5202 <__vector_1>
       8:	0c 94 34 29 	jmp	0x5268	; 0x5268 <__vector_2>
       c:	0c 94 67 29 	jmp	0x52ce	; 0x52ce <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 be 43 	jmp	0x877c	; 0x877c <__vector_10>
      2c:	0c 94 0e 44 	jmp	0x881c	; 0x881c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f8 e9       	ldi	r31, 0x98	; 152
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 35       	cpi	r26, 0x56	; 86
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 00 45 	call	0x8a00	; 0x8a00 <main>
      8a:	0c 94 70 4c 	jmp	0x98e0	; 0x98e0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__subsf3>
      be:	0e 94 98 11 	call	0x2330	; 0x2330 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 98 11 	call	0x2330	; 0x2330 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__udivdi3>:
      ea:	ae e5       	ldi	r26, 0x5E	; 94
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 39 4c 	jmp	0x9872	; 0x9872 <__prologue_saves__>
      f6:	a8 e0       	ldi	r26, 0x08	; 8
      f8:	4e 01       	movw	r8, r28
      fa:	08 94       	sec
      fc:	81 1c       	adc	r8, r1
      fe:	91 1c       	adc	r9, r1
     100:	f4 01       	movw	r30, r8
     102:	6a 2e       	mov	r6, r26
     104:	11 92       	st	Z+, r1
     106:	6a 94       	dec	r6
     108:	e9 f7       	brne	.-6      	; 0x104 <__udivdi3+0x1a>
     10a:	29 83       	std	Y+1, r18	; 0x01
     10c:	3a 83       	std	Y+2, r19	; 0x02
     10e:	4b 83       	std	Y+3, r20	; 0x03
     110:	5c 83       	std	Y+4, r21	; 0x04
     112:	6d 83       	std	Y+5, r22	; 0x05
     114:	7e 83       	std	Y+6, r23	; 0x06
     116:	8f 83       	std	Y+7, r24	; 0x07
     118:	98 87       	std	Y+8, r25	; 0x08
     11a:	ce 01       	movw	r24, r28
     11c:	09 96       	adiw	r24, 0x09	; 9
     11e:	fc 01       	movw	r30, r24
     120:	11 92       	st	Z+, r1
     122:	aa 95       	dec	r26
     124:	e9 f7       	brne	.-6      	; 0x120 <__udivdi3+0x36>
     126:	a9 86       	std	Y+9, r10	; 0x09
     128:	ba 86       	std	Y+10, r11	; 0x0a
     12a:	cb 86       	std	Y+11, r12	; 0x0b
     12c:	dc 86       	std	Y+12, r13	; 0x0c
     12e:	ed 86       	std	Y+13, r14	; 0x0d
     130:	fe 86       	std	Y+14, r15	; 0x0e
     132:	0f 87       	std	Y+15, r16	; 0x0f
     134:	18 8b       	std	Y+16, r17	; 0x10
     136:	29 84       	ldd	r2, Y+9	; 0x09
     138:	3a 84       	ldd	r3, Y+10	; 0x0a
     13a:	4b 84       	ldd	r4, Y+11	; 0x0b
     13c:	5c 84       	ldd	r5, Y+12	; 0x0c
     13e:	ed 84       	ldd	r14, Y+13	; 0x0d
     140:	fe 84       	ldd	r15, Y+14	; 0x0e
     142:	0f 85       	ldd	r16, Y+15	; 0x0f
     144:	18 89       	ldd	r17, Y+16	; 0x10
     146:	69 80       	ldd	r6, Y+1	; 0x01
     148:	7a 80       	ldd	r7, Y+2	; 0x02
     14a:	8b 80       	ldd	r8, Y+3	; 0x03
     14c:	9c 80       	ldd	r9, Y+4	; 0x04
     14e:	6d a6       	std	Y+45, r6	; 0x2d
     150:	7e a6       	std	Y+46, r7	; 0x2e
     152:	8f a6       	std	Y+47, r8	; 0x2f
     154:	98 aa       	std	Y+48, r9	; 0x30
     156:	6d 80       	ldd	r6, Y+5	; 0x05
     158:	7e 80       	ldd	r7, Y+6	; 0x06
     15a:	8f 80       	ldd	r8, Y+7	; 0x07
     15c:	98 84       	ldd	r9, Y+8	; 0x08
     15e:	e1 14       	cp	r14, r1
     160:	f1 04       	cpc	r15, r1
     162:	01 05       	cpc	r16, r1
     164:	11 05       	cpc	r17, r1
     166:	09 f0       	breq	.+2      	; 0x16a <__udivdi3+0x80>
     168:	b3 c3       	rjmp	.+1894   	; 0x8d0 <__stack+0x71>
     16a:	62 14       	cp	r6, r2
     16c:	73 04       	cpc	r7, r3
     16e:	84 04       	cpc	r8, r4
     170:	95 04       	cpc	r9, r5
     172:	08 f0       	brcs	.+2      	; 0x176 <__udivdi3+0x8c>
     174:	3d c1       	rjmp	.+634    	; 0x3f0 <__udivdi3+0x306>
     176:	00 e0       	ldi	r16, 0x00	; 0
     178:	20 16       	cp	r2, r16
     17a:	00 e0       	ldi	r16, 0x00	; 0
     17c:	30 06       	cpc	r3, r16
     17e:	01 e0       	ldi	r16, 0x01	; 1
     180:	40 06       	cpc	r4, r16
     182:	00 e0       	ldi	r16, 0x00	; 0
     184:	50 06       	cpc	r5, r16
     186:	88 f4       	brcc	.+34     	; 0x1aa <__udivdi3+0xc0>
     188:	1f ef       	ldi	r17, 0xFF	; 255
     18a:	21 16       	cp	r2, r17
     18c:	31 04       	cpc	r3, r1
     18e:	41 04       	cpc	r4, r1
     190:	51 04       	cpc	r5, r1
     192:	39 f0       	breq	.+14     	; 0x1a2 <__udivdi3+0xb8>
     194:	30 f0       	brcs	.+12     	; 0x1a2 <__udivdi3+0xb8>
     196:	48 e0       	ldi	r20, 0x08	; 8
     198:	e4 2e       	mov	r14, r20
     19a:	f1 2c       	mov	r15, r1
     19c:	01 2d       	mov	r16, r1
     19e:	11 2d       	mov	r17, r1
     1a0:	18 c0       	rjmp	.+48     	; 0x1d2 <__udivdi3+0xe8>
     1a2:	ee 24       	eor	r14, r14
     1a4:	ff 24       	eor	r15, r15
     1a6:	87 01       	movw	r16, r14
     1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <__udivdi3+0xe8>
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	22 16       	cp	r2, r18
     1ae:	20 e0       	ldi	r18, 0x00	; 0
     1b0:	32 06       	cpc	r3, r18
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	42 06       	cpc	r4, r18
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	52 06       	cpc	r5, r18
     1ba:	30 f0       	brcs	.+12     	; 0x1c8 <__udivdi3+0xde>
     1bc:	38 e1       	ldi	r19, 0x18	; 24
     1be:	e3 2e       	mov	r14, r19
     1c0:	f1 2c       	mov	r15, r1
     1c2:	01 2d       	mov	r16, r1
     1c4:	11 2d       	mov	r17, r1
     1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <__udivdi3+0xe8>
     1c8:	20 e1       	ldi	r18, 0x10	; 16
     1ca:	e2 2e       	mov	r14, r18
     1cc:	f1 2c       	mov	r15, r1
     1ce:	01 2d       	mov	r16, r1
     1d0:	11 2d       	mov	r17, r1
     1d2:	d2 01       	movw	r26, r4
     1d4:	c1 01       	movw	r24, r2
     1d6:	0e 2c       	mov	r0, r14
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__udivdi3+0xf8>
     1da:	b6 95       	lsr	r27
     1dc:	a7 95       	ror	r26
     1de:	97 95       	ror	r25
     1e0:	87 95       	ror	r24
     1e2:	0a 94       	dec	r0
     1e4:	d2 f7       	brpl	.-12     	; 0x1da <__udivdi3+0xf0>
     1e6:	86 5e       	subi	r24, 0xE6	; 230
     1e8:	9e 4f       	sbci	r25, 0xFE	; 254
     1ea:	dc 01       	movw	r26, r24
     1ec:	2c 91       	ld	r18, X
     1ee:	80 e2       	ldi	r24, 0x20	; 32
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	a0 e0       	ldi	r26, 0x00	; 0
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	8e 19       	sub	r24, r14
     1f8:	9f 09       	sbc	r25, r15
     1fa:	a0 0b       	sbc	r26, r16
     1fc:	b1 0b       	sbc	r27, r17
     1fe:	7c 01       	movw	r14, r24
     200:	8d 01       	movw	r16, r26
     202:	e2 1a       	sub	r14, r18
     204:	f1 08       	sbc	r15, r1
     206:	01 09       	sbc	r16, r1
     208:	11 09       	sbc	r17, r1
     20a:	e1 14       	cp	r14, r1
     20c:	f1 04       	cpc	r15, r1
     20e:	01 05       	cpc	r16, r1
     210:	11 05       	cpc	r17, r1
     212:	a1 f1       	breq	.+104    	; 0x27c <__udivdi3+0x192>
     214:	0e 2c       	mov	r0, r14
     216:	04 c0       	rjmp	.+8      	; 0x220 <__udivdi3+0x136>
     218:	22 0c       	add	r2, r2
     21a:	33 1c       	adc	r3, r3
     21c:	44 1c       	adc	r4, r4
     21e:	55 1c       	adc	r5, r5
     220:	0a 94       	dec	r0
     222:	d2 f7       	brpl	.-12     	; 0x218 <__udivdi3+0x12e>
     224:	a4 01       	movw	r20, r8
     226:	93 01       	movw	r18, r6
     228:	0e 2c       	mov	r0, r14
     22a:	04 c0       	rjmp	.+8      	; 0x234 <__udivdi3+0x14a>
     22c:	22 0f       	add	r18, r18
     22e:	33 1f       	adc	r19, r19
     230:	44 1f       	adc	r20, r20
     232:	55 1f       	adc	r21, r21
     234:	0a 94       	dec	r0
     236:	d2 f7       	brpl	.-12     	; 0x22c <__udivdi3+0x142>
     238:	80 e2       	ldi	r24, 0x20	; 32
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	8e 19       	sub	r24, r14
     23e:	9f 09       	sbc	r25, r15
     240:	6d a4       	ldd	r6, Y+45	; 0x2d
     242:	7e a4       	ldd	r7, Y+46	; 0x2e
     244:	8f a4       	ldd	r8, Y+47	; 0x2f
     246:	98 a8       	ldd	r9, Y+48	; 0x30
     248:	04 c0       	rjmp	.+8      	; 0x252 <__udivdi3+0x168>
     24a:	96 94       	lsr	r9
     24c:	87 94       	ror	r8
     24e:	77 94       	ror	r7
     250:	67 94       	ror	r6
     252:	8a 95       	dec	r24
     254:	d2 f7       	brpl	.-12     	; 0x24a <__udivdi3+0x160>
     256:	62 2a       	or	r6, r18
     258:	73 2a       	or	r7, r19
     25a:	84 2a       	or	r8, r20
     25c:	95 2a       	or	r9, r21
     25e:	ad a4       	ldd	r10, Y+45	; 0x2d
     260:	be a4       	ldd	r11, Y+46	; 0x2e
     262:	cf a4       	ldd	r12, Y+47	; 0x2f
     264:	d8 a8       	ldd	r13, Y+48	; 0x30
     266:	04 c0       	rjmp	.+8      	; 0x270 <__udivdi3+0x186>
     268:	aa 0c       	add	r10, r10
     26a:	bb 1c       	adc	r11, r11
     26c:	cc 1c       	adc	r12, r12
     26e:	dd 1c       	adc	r13, r13
     270:	ea 94       	dec	r14
     272:	d2 f7       	brpl	.-12     	; 0x268 <__udivdi3+0x17e>
     274:	ad a6       	std	Y+45, r10	; 0x2d
     276:	be a6       	std	Y+46, r11	; 0x2e
     278:	cf a6       	std	Y+47, r12	; 0x2f
     27a:	d8 aa       	std	Y+48, r13	; 0x30
     27c:	62 01       	movw	r12, r4
     27e:	ee 24       	eor	r14, r14
     280:	ff 24       	eor	r15, r15
     282:	cd aa       	std	Y+53, r12	; 0x35
     284:	de aa       	std	Y+54, r13	; 0x36
     286:	ef aa       	std	Y+55, r14	; 0x37
     288:	f8 ae       	std	Y+56, r15	; 0x38
     28a:	92 01       	movw	r18, r4
     28c:	81 01       	movw	r16, r2
     28e:	20 70       	andi	r18, 0x00	; 0
     290:	30 70       	andi	r19, 0x00	; 0
     292:	09 af       	std	Y+57, r16	; 0x39
     294:	1a af       	std	Y+58, r17	; 0x3a
     296:	2b af       	std	Y+59, r18	; 0x3b
     298:	3c af       	std	Y+60, r19	; 0x3c
     29a:	c4 01       	movw	r24, r8
     29c:	b3 01       	movw	r22, r6
     29e:	a7 01       	movw	r20, r14
     2a0:	96 01       	movw	r18, r12
     2a2:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     2a6:	7b 01       	movw	r14, r22
     2a8:	8c 01       	movw	r16, r24
     2aa:	c4 01       	movw	r24, r8
     2ac:	b3 01       	movw	r22, r6
     2ae:	2d a9       	ldd	r18, Y+53	; 0x35
     2b0:	3e a9       	ldd	r19, Y+54	; 0x36
     2b2:	4f a9       	ldd	r20, Y+55	; 0x37
     2b4:	58 ad       	ldd	r21, Y+56	; 0x38
     2b6:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     2ba:	c9 01       	movw	r24, r18
     2bc:	da 01       	movw	r26, r20
     2be:	3c 01       	movw	r6, r24
     2c0:	4d 01       	movw	r8, r26
     2c2:	c4 01       	movw	r24, r8
     2c4:	b3 01       	movw	r22, r6
     2c6:	29 ad       	ldd	r18, Y+57	; 0x39
     2c8:	3a ad       	ldd	r19, Y+58	; 0x3a
     2ca:	4b ad       	ldd	r20, Y+59	; 0x3b
     2cc:	5c ad       	ldd	r21, Y+60	; 0x3c
     2ce:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
     2d2:	9b 01       	movw	r18, r22
     2d4:	ac 01       	movw	r20, r24
     2d6:	87 01       	movw	r16, r14
     2d8:	ff 24       	eor	r15, r15
     2da:	ee 24       	eor	r14, r14
     2dc:	ad a4       	ldd	r10, Y+45	; 0x2d
     2de:	be a4       	ldd	r11, Y+46	; 0x2e
     2e0:	cf a4       	ldd	r12, Y+47	; 0x2f
     2e2:	d8 a8       	ldd	r13, Y+48	; 0x30
     2e4:	c6 01       	movw	r24, r12
     2e6:	aa 27       	eor	r26, r26
     2e8:	bb 27       	eor	r27, r27
     2ea:	57 01       	movw	r10, r14
     2ec:	68 01       	movw	r12, r16
     2ee:	a8 2a       	or	r10, r24
     2f0:	b9 2a       	or	r11, r25
     2f2:	ca 2a       	or	r12, r26
     2f4:	db 2a       	or	r13, r27
     2f6:	a2 16       	cp	r10, r18
     2f8:	b3 06       	cpc	r11, r19
     2fa:	c4 06       	cpc	r12, r20
     2fc:	d5 06       	cpc	r13, r21
     2fe:	e0 f4       	brcc	.+56     	; 0x338 <__udivdi3+0x24e>
     300:	08 94       	sec
     302:	61 08       	sbc	r6, r1
     304:	71 08       	sbc	r7, r1
     306:	81 08       	sbc	r8, r1
     308:	91 08       	sbc	r9, r1
     30a:	a2 0c       	add	r10, r2
     30c:	b3 1c       	adc	r11, r3
     30e:	c4 1c       	adc	r12, r4
     310:	d5 1c       	adc	r13, r5
     312:	a2 14       	cp	r10, r2
     314:	b3 04       	cpc	r11, r3
     316:	c4 04       	cpc	r12, r4
     318:	d5 04       	cpc	r13, r5
     31a:	70 f0       	brcs	.+28     	; 0x338 <__udivdi3+0x24e>
     31c:	a2 16       	cp	r10, r18
     31e:	b3 06       	cpc	r11, r19
     320:	c4 06       	cpc	r12, r20
     322:	d5 06       	cpc	r13, r21
     324:	48 f4       	brcc	.+18     	; 0x338 <__udivdi3+0x24e>
     326:	08 94       	sec
     328:	61 08       	sbc	r6, r1
     32a:	71 08       	sbc	r7, r1
     32c:	81 08       	sbc	r8, r1
     32e:	91 08       	sbc	r9, r1
     330:	a2 0c       	add	r10, r2
     332:	b3 1c       	adc	r11, r3
     334:	c4 1c       	adc	r12, r4
     336:	d5 1c       	adc	r13, r5
     338:	a2 1a       	sub	r10, r18
     33a:	b3 0a       	sbc	r11, r19
     33c:	c4 0a       	sbc	r12, r20
     33e:	d5 0a       	sbc	r13, r21
     340:	c6 01       	movw	r24, r12
     342:	b5 01       	movw	r22, r10
     344:	2d a9       	ldd	r18, Y+53	; 0x35
     346:	3e a9       	ldd	r19, Y+54	; 0x36
     348:	4f a9       	ldd	r20, Y+55	; 0x37
     34a:	58 ad       	ldd	r21, Y+56	; 0x38
     34c:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     350:	7b 01       	movw	r14, r22
     352:	8c 01       	movw	r16, r24
     354:	c6 01       	movw	r24, r12
     356:	b5 01       	movw	r22, r10
     358:	2d a9       	ldd	r18, Y+53	; 0x35
     35a:	3e a9       	ldd	r19, Y+54	; 0x36
     35c:	4f a9       	ldd	r20, Y+55	; 0x37
     35e:	58 ad       	ldd	r21, Y+56	; 0x38
     360:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     364:	c9 01       	movw	r24, r18
     366:	da 01       	movw	r26, r20
     368:	5c 01       	movw	r10, r24
     36a:	6d 01       	movw	r12, r26
     36c:	c6 01       	movw	r24, r12
     36e:	b5 01       	movw	r22, r10
     370:	29 ad       	ldd	r18, Y+57	; 0x39
     372:	3a ad       	ldd	r19, Y+58	; 0x3a
     374:	4b ad       	ldd	r20, Y+59	; 0x3b
     376:	5c ad       	ldd	r21, Y+60	; 0x3c
     378:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
     37c:	9b 01       	movw	r18, r22
     37e:	ac 01       	movw	r20, r24
     380:	87 01       	movw	r16, r14
     382:	ff 24       	eor	r15, r15
     384:	ee 24       	eor	r14, r14
     386:	8d a5       	ldd	r24, Y+45	; 0x2d
     388:	9e a5       	ldd	r25, Y+46	; 0x2e
     38a:	af a5       	ldd	r26, Y+47	; 0x2f
     38c:	b8 a9       	ldd	r27, Y+48	; 0x30
     38e:	a0 70       	andi	r26, 0x00	; 0
     390:	b0 70       	andi	r27, 0x00	; 0
     392:	e8 2a       	or	r14, r24
     394:	f9 2a       	or	r15, r25
     396:	0a 2b       	or	r16, r26
     398:	1b 2b       	or	r17, r27
     39a:	e2 16       	cp	r14, r18
     39c:	f3 06       	cpc	r15, r19
     39e:	04 07       	cpc	r16, r20
     3a0:	15 07       	cpc	r17, r21
     3a2:	c0 f4       	brcc	.+48     	; 0x3d4 <__udivdi3+0x2ea>
     3a4:	08 94       	sec
     3a6:	a1 08       	sbc	r10, r1
     3a8:	b1 08       	sbc	r11, r1
     3aa:	c1 08       	sbc	r12, r1
     3ac:	d1 08       	sbc	r13, r1
     3ae:	e2 0c       	add	r14, r2
     3b0:	f3 1c       	adc	r15, r3
     3b2:	04 1d       	adc	r16, r4
     3b4:	15 1d       	adc	r17, r5
     3b6:	e2 14       	cp	r14, r2
     3b8:	f3 04       	cpc	r15, r3
     3ba:	04 05       	cpc	r16, r4
     3bc:	15 05       	cpc	r17, r5
     3be:	50 f0       	brcs	.+20     	; 0x3d4 <__udivdi3+0x2ea>
     3c0:	e2 16       	cp	r14, r18
     3c2:	f3 06       	cpc	r15, r19
     3c4:	04 07       	cpc	r16, r20
     3c6:	15 07       	cpc	r17, r21
     3c8:	28 f4       	brcc	.+10     	; 0x3d4 <__udivdi3+0x2ea>
     3ca:	08 94       	sec
     3cc:	a1 08       	sbc	r10, r1
     3ce:	b1 08       	sbc	r11, r1
     3d0:	c1 08       	sbc	r12, r1
     3d2:	d1 08       	sbc	r13, r1
     3d4:	d3 01       	movw	r26, r6
     3d6:	99 27       	eor	r25, r25
     3d8:	88 27       	eor	r24, r24
     3da:	86 01       	movw	r16, r12
     3dc:	75 01       	movw	r14, r10
     3de:	e8 2a       	or	r14, r24
     3e0:	f9 2a       	or	r15, r25
     3e2:	0a 2b       	or	r16, r26
     3e4:	1b 2b       	or	r17, r27
     3e6:	e9 aa       	std	Y+49, r14	; 0x31
     3e8:	fa aa       	std	Y+50, r15	; 0x32
     3ea:	0b ab       	std	Y+51, r16	; 0x33
     3ec:	1c ab       	std	Y+52, r17	; 0x34
     3ee:	cf c4       	rjmp	.+2462   	; 0xd8e <__stack+0x52f>
     3f0:	21 14       	cp	r2, r1
     3f2:	31 04       	cpc	r3, r1
     3f4:	41 04       	cpc	r4, r1
     3f6:	51 04       	cpc	r5, r1
     3f8:	71 f4       	brne	.+28     	; 0x416 <__udivdi3+0x32c>
     3fa:	61 e0       	ldi	r22, 0x01	; 1
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     40e:	c9 01       	movw	r24, r18
     410:	da 01       	movw	r26, r20
     412:	1c 01       	movw	r2, r24
     414:	2d 01       	movw	r4, r26
     416:	00 e0       	ldi	r16, 0x00	; 0
     418:	20 16       	cp	r2, r16
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	30 06       	cpc	r3, r16
     41e:	01 e0       	ldi	r16, 0x01	; 1
     420:	40 06       	cpc	r4, r16
     422:	00 e0       	ldi	r16, 0x00	; 0
     424:	50 06       	cpc	r5, r16
     426:	88 f4       	brcc	.+34     	; 0x44a <__udivdi3+0x360>
     428:	1f ef       	ldi	r17, 0xFF	; 255
     42a:	21 16       	cp	r2, r17
     42c:	31 04       	cpc	r3, r1
     42e:	41 04       	cpc	r4, r1
     430:	51 04       	cpc	r5, r1
     432:	31 f0       	breq	.+12     	; 0x440 <__udivdi3+0x356>
     434:	28 f0       	brcs	.+10     	; 0x440 <__udivdi3+0x356>
     436:	48 e0       	ldi	r20, 0x08	; 8
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	17 c0       	rjmp	.+46     	; 0x46e <__udivdi3+0x384>
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	12 c0       	rjmp	.+36     	; 0x46e <__udivdi3+0x384>
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	22 16       	cp	r2, r18
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	32 06       	cpc	r3, r18
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	42 06       	cpc	r4, r18
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	52 06       	cpc	r5, r18
     45a:	28 f0       	brcs	.+10     	; 0x466 <__udivdi3+0x37c>
     45c:	48 e1       	ldi	r20, 0x18	; 24
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	04 c0       	rjmp	.+8      	; 0x46e <__udivdi3+0x384>
     466:	40 e1       	ldi	r20, 0x10	; 16
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	d2 01       	movw	r26, r4
     470:	c1 01       	movw	r24, r2
     472:	04 2e       	mov	r0, r20
     474:	04 c0       	rjmp	.+8      	; 0x47e <__udivdi3+0x394>
     476:	b6 95       	lsr	r27
     478:	a7 95       	ror	r26
     47a:	97 95       	ror	r25
     47c:	87 95       	ror	r24
     47e:	0a 94       	dec	r0
     480:	d2 f7       	brpl	.-12     	; 0x476 <__udivdi3+0x38c>
     482:	86 5e       	subi	r24, 0xE6	; 230
     484:	9e 4f       	sbci	r25, 0xFE	; 254
     486:	dc 01       	movw	r26, r24
     488:	2c 91       	ld	r18, X
     48a:	e0 e2       	ldi	r30, 0x20	; 32
     48c:	ee 2e       	mov	r14, r30
     48e:	f1 2c       	mov	r15, r1
     490:	01 2d       	mov	r16, r1
     492:	11 2d       	mov	r17, r1
     494:	d8 01       	movw	r26, r16
     496:	c7 01       	movw	r24, r14
     498:	84 1b       	sub	r24, r20
     49a:	95 0b       	sbc	r25, r21
     49c:	a6 0b       	sbc	r26, r22
     49e:	b7 0b       	sbc	r27, r23
     4a0:	82 1b       	sub	r24, r18
     4a2:	91 09       	sbc	r25, r1
     4a4:	a1 09       	sbc	r26, r1
     4a6:	b1 09       	sbc	r27, r1
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	a1 05       	cpc	r26, r1
     4ac:	b1 05       	cpc	r27, r1
     4ae:	61 f4       	brne	.+24     	; 0x4c8 <__udivdi3+0x3de>
     4b0:	64 01       	movw	r12, r8
     4b2:	53 01       	movw	r10, r6
     4b4:	a2 18       	sub	r10, r2
     4b6:	b3 08       	sbc	r11, r3
     4b8:	c4 08       	sbc	r12, r4
     4ba:	d5 08       	sbc	r13, r5
     4bc:	31 e0       	ldi	r19, 0x01	; 1
     4be:	63 2e       	mov	r6, r19
     4c0:	71 2c       	mov	r7, r1
     4c2:	81 2c       	mov	r8, r1
     4c4:	91 2c       	mov	r9, r1
     4c6:	1e c1       	rjmp	.+572    	; 0x704 <__udivdi3+0x61a>
     4c8:	6f 96       	adiw	r28, 0x1f	; 31
     4ca:	8f af       	std	Y+63, r24	; 0x3f
     4cc:	6f 97       	sbiw	r28, 0x1f	; 31
     4ce:	08 2e       	mov	r0, r24
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <__udivdi3+0x3f0>
     4d2:	22 0c       	add	r2, r2
     4d4:	33 1c       	adc	r3, r3
     4d6:	44 1c       	adc	r4, r4
     4d8:	55 1c       	adc	r5, r5
     4da:	0a 94       	dec	r0
     4dc:	d2 f7       	brpl	.-12     	; 0x4d2 <__udivdi3+0x3e8>
     4de:	ee 2d       	mov	r30, r14
     4e0:	e8 1b       	sub	r30, r24
     4e2:	64 01       	movw	r12, r8
     4e4:	53 01       	movw	r10, r6
     4e6:	0e 2e       	mov	r0, r30
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__udivdi3+0x408>
     4ea:	d6 94       	lsr	r13
     4ec:	c7 94       	ror	r12
     4ee:	b7 94       	ror	r11
     4f0:	a7 94       	ror	r10
     4f2:	0a 94       	dec	r0
     4f4:	d2 f7       	brpl	.-12     	; 0x4ea <__udivdi3+0x400>
     4f6:	a4 01       	movw	r20, r8
     4f8:	93 01       	movw	r18, r6
     4fa:	6f 96       	adiw	r28, 0x1f	; 31
     4fc:	0f ac       	ldd	r0, Y+63	; 0x3f
     4fe:	6f 97       	sbiw	r28, 0x1f	; 31
     500:	04 c0       	rjmp	.+8      	; 0x50a <__udivdi3+0x420>
     502:	22 0f       	add	r18, r18
     504:	33 1f       	adc	r19, r19
     506:	44 1f       	adc	r20, r20
     508:	55 1f       	adc	r21, r21
     50a:	0a 94       	dec	r0
     50c:	d2 f7       	brpl	.-12     	; 0x502 <__udivdi3+0x418>
     50e:	6d a4       	ldd	r6, Y+45	; 0x2d
     510:	7e a4       	ldd	r7, Y+46	; 0x2e
     512:	8f a4       	ldd	r8, Y+47	; 0x2f
     514:	98 a8       	ldd	r9, Y+48	; 0x30
     516:	0e 2e       	mov	r0, r30
     518:	04 c0       	rjmp	.+8      	; 0x522 <__udivdi3+0x438>
     51a:	96 94       	lsr	r9
     51c:	87 94       	ror	r8
     51e:	77 94       	ror	r7
     520:	67 94       	ror	r6
     522:	0a 94       	dec	r0
     524:	d2 f7       	brpl	.-12     	; 0x51a <__udivdi3+0x430>
     526:	84 01       	movw	r16, r8
     528:	73 01       	movw	r14, r6
     52a:	e2 2a       	or	r14, r18
     52c:	f3 2a       	or	r15, r19
     52e:	04 2b       	or	r16, r20
     530:	15 2b       	or	r17, r21
     532:	e9 a6       	std	Y+41, r14	; 0x29
     534:	fa a6       	std	Y+42, r15	; 0x2a
     536:	0b a7       	std	Y+43, r16	; 0x2b
     538:	1c a7       	std	Y+44, r17	; 0x2c
     53a:	32 01       	movw	r6, r4
     53c:	88 24       	eor	r8, r8
     53e:	99 24       	eor	r9, r9
     540:	92 01       	movw	r18, r4
     542:	81 01       	movw	r16, r2
     544:	20 70       	andi	r18, 0x00	; 0
     546:	30 70       	andi	r19, 0x00	; 0
     548:	21 96       	adiw	r28, 0x01	; 1
     54a:	0c af       	std	Y+60, r16	; 0x3c
     54c:	1d af       	std	Y+61, r17	; 0x3d
     54e:	2e af       	std	Y+62, r18	; 0x3e
     550:	3f af       	std	Y+63, r19	; 0x3f
     552:	21 97       	sbiw	r28, 0x01	; 1
     554:	c6 01       	movw	r24, r12
     556:	b5 01       	movw	r22, r10
     558:	a4 01       	movw	r20, r8
     55a:	93 01       	movw	r18, r6
     55c:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     560:	7b 01       	movw	r14, r22
     562:	8c 01       	movw	r16, r24
     564:	c6 01       	movw	r24, r12
     566:	b5 01       	movw	r22, r10
     568:	a4 01       	movw	r20, r8
     56a:	93 01       	movw	r18, r6
     56c:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     570:	c9 01       	movw	r24, r18
     572:	da 01       	movw	r26, r20
     574:	25 96       	adiw	r28, 0x05	; 5
     576:	8c af       	std	Y+60, r24	; 0x3c
     578:	9d af       	std	Y+61, r25	; 0x3d
     57a:	ae af       	std	Y+62, r26	; 0x3e
     57c:	bf af       	std	Y+63, r27	; 0x3f
     57e:	25 97       	sbiw	r28, 0x05	; 5
     580:	bc 01       	movw	r22, r24
     582:	cd 01       	movw	r24, r26
     584:	21 96       	adiw	r28, 0x01	; 1
     586:	2c ad       	ldd	r18, Y+60	; 0x3c
     588:	3d ad       	ldd	r19, Y+61	; 0x3d
     58a:	4e ad       	ldd	r20, Y+62	; 0x3e
     58c:	5f ad       	ldd	r21, Y+63	; 0x3f
     58e:	21 97       	sbiw	r28, 0x01	; 1
     590:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
     594:	9b 01       	movw	r18, r22
     596:	ac 01       	movw	r20, r24
     598:	87 01       	movw	r16, r14
     59a:	ff 24       	eor	r15, r15
     59c:	ee 24       	eor	r14, r14
     59e:	a9 a4       	ldd	r10, Y+41	; 0x29
     5a0:	ba a4       	ldd	r11, Y+42	; 0x2a
     5a2:	cb a4       	ldd	r12, Y+43	; 0x2b
     5a4:	dc a4       	ldd	r13, Y+44	; 0x2c
     5a6:	c6 01       	movw	r24, r12
     5a8:	aa 27       	eor	r26, r26
     5aa:	bb 27       	eor	r27, r27
     5ac:	5c 01       	movw	r10, r24
     5ae:	6d 01       	movw	r12, r26
     5b0:	ae 28       	or	r10, r14
     5b2:	bf 28       	or	r11, r15
     5b4:	c0 2a       	or	r12, r16
     5b6:	d1 2a       	or	r13, r17
     5b8:	a2 16       	cp	r10, r18
     5ba:	b3 06       	cpc	r11, r19
     5bc:	c4 06       	cpc	r12, r20
     5be:	d5 06       	cpc	r13, r21
     5c0:	60 f5       	brcc	.+88     	; 0x61a <__udivdi3+0x530>
     5c2:	25 96       	adiw	r28, 0x05	; 5
     5c4:	6c ad       	ldd	r22, Y+60	; 0x3c
     5c6:	7d ad       	ldd	r23, Y+61	; 0x3d
     5c8:	8e ad       	ldd	r24, Y+62	; 0x3e
     5ca:	9f ad       	ldd	r25, Y+63	; 0x3f
     5cc:	25 97       	sbiw	r28, 0x05	; 5
     5ce:	61 50       	subi	r22, 0x01	; 1
     5d0:	70 40       	sbci	r23, 0x00	; 0
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	90 40       	sbci	r25, 0x00	; 0
     5d6:	25 96       	adiw	r28, 0x05	; 5
     5d8:	6c af       	std	Y+60, r22	; 0x3c
     5da:	7d af       	std	Y+61, r23	; 0x3d
     5dc:	8e af       	std	Y+62, r24	; 0x3e
     5de:	9f af       	std	Y+63, r25	; 0x3f
     5e0:	25 97       	sbiw	r28, 0x05	; 5
     5e2:	a2 0c       	add	r10, r2
     5e4:	b3 1c       	adc	r11, r3
     5e6:	c4 1c       	adc	r12, r4
     5e8:	d5 1c       	adc	r13, r5
     5ea:	a2 14       	cp	r10, r2
     5ec:	b3 04       	cpc	r11, r3
     5ee:	c4 04       	cpc	r12, r4
     5f0:	d5 04       	cpc	r13, r5
     5f2:	98 f0       	brcs	.+38     	; 0x61a <__udivdi3+0x530>
     5f4:	a2 16       	cp	r10, r18
     5f6:	b3 06       	cpc	r11, r19
     5f8:	c4 06       	cpc	r12, r20
     5fa:	d5 06       	cpc	r13, r21
     5fc:	70 f4       	brcc	.+28     	; 0x61a <__udivdi3+0x530>
     5fe:	61 50       	subi	r22, 0x01	; 1
     600:	70 40       	sbci	r23, 0x00	; 0
     602:	80 40       	sbci	r24, 0x00	; 0
     604:	90 40       	sbci	r25, 0x00	; 0
     606:	25 96       	adiw	r28, 0x05	; 5
     608:	6c af       	std	Y+60, r22	; 0x3c
     60a:	7d af       	std	Y+61, r23	; 0x3d
     60c:	8e af       	std	Y+62, r24	; 0x3e
     60e:	9f af       	std	Y+63, r25	; 0x3f
     610:	25 97       	sbiw	r28, 0x05	; 5
     612:	a2 0c       	add	r10, r2
     614:	b3 1c       	adc	r11, r3
     616:	c4 1c       	adc	r12, r4
     618:	d5 1c       	adc	r13, r5
     61a:	a2 1a       	sub	r10, r18
     61c:	b3 0a       	sbc	r11, r19
     61e:	c4 0a       	sbc	r12, r20
     620:	d5 0a       	sbc	r13, r21
     622:	c6 01       	movw	r24, r12
     624:	b5 01       	movw	r22, r10
     626:	a4 01       	movw	r20, r8
     628:	93 01       	movw	r18, r6
     62a:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     62e:	7b 01       	movw	r14, r22
     630:	8c 01       	movw	r16, r24
     632:	c6 01       	movw	r24, r12
     634:	b5 01       	movw	r22, r10
     636:	a4 01       	movw	r20, r8
     638:	93 01       	movw	r18, r6
     63a:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     63e:	c9 01       	movw	r24, r18
     640:	da 01       	movw	r26, r20
     642:	3c 01       	movw	r6, r24
     644:	4d 01       	movw	r8, r26
     646:	c4 01       	movw	r24, r8
     648:	b3 01       	movw	r22, r6
     64a:	21 96       	adiw	r28, 0x01	; 1
     64c:	2c ad       	ldd	r18, Y+60	; 0x3c
     64e:	3d ad       	ldd	r19, Y+61	; 0x3d
     650:	4e ad       	ldd	r20, Y+62	; 0x3e
     652:	5f ad       	ldd	r21, Y+63	; 0x3f
     654:	21 97       	sbiw	r28, 0x01	; 1
     656:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
     65a:	9b 01       	movw	r18, r22
     65c:	ac 01       	movw	r20, r24
     65e:	87 01       	movw	r16, r14
     660:	ff 24       	eor	r15, r15
     662:	ee 24       	eor	r14, r14
     664:	89 a5       	ldd	r24, Y+41	; 0x29
     666:	9a a5       	ldd	r25, Y+42	; 0x2a
     668:	ab a5       	ldd	r26, Y+43	; 0x2b
     66a:	bc a5       	ldd	r27, Y+44	; 0x2c
     66c:	a0 70       	andi	r26, 0x00	; 0
     66e:	b0 70       	andi	r27, 0x00	; 0
     670:	57 01       	movw	r10, r14
     672:	68 01       	movw	r12, r16
     674:	a8 2a       	or	r10, r24
     676:	b9 2a       	or	r11, r25
     678:	ca 2a       	or	r12, r26
     67a:	db 2a       	or	r13, r27
     67c:	a2 16       	cp	r10, r18
     67e:	b3 06       	cpc	r11, r19
     680:	c4 06       	cpc	r12, r20
     682:	d5 06       	cpc	r13, r21
     684:	e0 f4       	brcc	.+56     	; 0x6be <__udivdi3+0x5d4>
     686:	08 94       	sec
     688:	61 08       	sbc	r6, r1
     68a:	71 08       	sbc	r7, r1
     68c:	81 08       	sbc	r8, r1
     68e:	91 08       	sbc	r9, r1
     690:	a2 0c       	add	r10, r2
     692:	b3 1c       	adc	r11, r3
     694:	c4 1c       	adc	r12, r4
     696:	d5 1c       	adc	r13, r5
     698:	a2 14       	cp	r10, r2
     69a:	b3 04       	cpc	r11, r3
     69c:	c4 04       	cpc	r12, r4
     69e:	d5 04       	cpc	r13, r5
     6a0:	70 f0       	brcs	.+28     	; 0x6be <__udivdi3+0x5d4>
     6a2:	a2 16       	cp	r10, r18
     6a4:	b3 06       	cpc	r11, r19
     6a6:	c4 06       	cpc	r12, r20
     6a8:	d5 06       	cpc	r13, r21
     6aa:	48 f4       	brcc	.+18     	; 0x6be <__udivdi3+0x5d4>
     6ac:	08 94       	sec
     6ae:	61 08       	sbc	r6, r1
     6b0:	71 08       	sbc	r7, r1
     6b2:	81 08       	sbc	r8, r1
     6b4:	91 08       	sbc	r9, r1
     6b6:	a2 0c       	add	r10, r2
     6b8:	b3 1c       	adc	r11, r3
     6ba:	c4 1c       	adc	r12, r4
     6bc:	d5 1c       	adc	r13, r5
     6be:	8d a5       	ldd	r24, Y+45	; 0x2d
     6c0:	9e a5       	ldd	r25, Y+46	; 0x2e
     6c2:	af a5       	ldd	r26, Y+47	; 0x2f
     6c4:	b8 a9       	ldd	r27, Y+48	; 0x30
     6c6:	6f 96       	adiw	r28, 0x1f	; 31
     6c8:	0f ac       	ldd	r0, Y+63	; 0x3f
     6ca:	6f 97       	sbiw	r28, 0x1f	; 31
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <__udivdi3+0x5ec>
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	aa 1f       	adc	r26, r26
     6d4:	bb 1f       	adc	r27, r27
     6d6:	0a 94       	dec	r0
     6d8:	d2 f7       	brpl	.-12     	; 0x6ce <__udivdi3+0x5e4>
     6da:	8d a7       	std	Y+45, r24	; 0x2d
     6dc:	9e a7       	std	Y+46, r25	; 0x2e
     6de:	af a7       	std	Y+47, r26	; 0x2f
     6e0:	b8 ab       	std	Y+48, r27	; 0x30
     6e2:	a2 1a       	sub	r10, r18
     6e4:	b3 0a       	sbc	r11, r19
     6e6:	c4 0a       	sbc	r12, r20
     6e8:	d5 0a       	sbc	r13, r21
     6ea:	25 96       	adiw	r28, 0x05	; 5
     6ec:	ec ac       	ldd	r14, Y+60	; 0x3c
     6ee:	fd ac       	ldd	r15, Y+61	; 0x3d
     6f0:	0e ad       	ldd	r16, Y+62	; 0x3e
     6f2:	1f ad       	ldd	r17, Y+63	; 0x3f
     6f4:	25 97       	sbiw	r28, 0x05	; 5
     6f6:	d7 01       	movw	r26, r14
     6f8:	99 27       	eor	r25, r25
     6fa:	88 27       	eor	r24, r24
     6fc:	68 2a       	or	r6, r24
     6fe:	79 2a       	or	r7, r25
     700:	8a 2a       	or	r8, r26
     702:	9b 2a       	or	r9, r27
     704:	82 01       	movw	r16, r4
     706:	22 27       	eor	r18, r18
     708:	33 27       	eor	r19, r19
     70a:	29 96       	adiw	r28, 0x09	; 9
     70c:	0c af       	std	Y+60, r16	; 0x3c
     70e:	1d af       	std	Y+61, r17	; 0x3d
     710:	2e af       	std	Y+62, r18	; 0x3e
     712:	3f af       	std	Y+63, r19	; 0x3f
     714:	29 97       	sbiw	r28, 0x09	; 9
     716:	a2 01       	movw	r20, r4
     718:	91 01       	movw	r18, r2
     71a:	40 70       	andi	r20, 0x00	; 0
     71c:	50 70       	andi	r21, 0x00	; 0
     71e:	2d 96       	adiw	r28, 0x0d	; 13
     720:	2c af       	std	Y+60, r18	; 0x3c
     722:	3d af       	std	Y+61, r19	; 0x3d
     724:	4e af       	std	Y+62, r20	; 0x3e
     726:	5f af       	std	Y+63, r21	; 0x3f
     728:	2d 97       	sbiw	r28, 0x0d	; 13
     72a:	c6 01       	movw	r24, r12
     72c:	b5 01       	movw	r22, r10
     72e:	29 96       	adiw	r28, 0x09	; 9
     730:	2c ad       	ldd	r18, Y+60	; 0x3c
     732:	3d ad       	ldd	r19, Y+61	; 0x3d
     734:	4e ad       	ldd	r20, Y+62	; 0x3e
     736:	5f ad       	ldd	r21, Y+63	; 0x3f
     738:	29 97       	sbiw	r28, 0x09	; 9
     73a:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     73e:	7b 01       	movw	r14, r22
     740:	8c 01       	movw	r16, r24
     742:	c6 01       	movw	r24, r12
     744:	b5 01       	movw	r22, r10
     746:	29 96       	adiw	r28, 0x09	; 9
     748:	2c ad       	ldd	r18, Y+60	; 0x3c
     74a:	3d ad       	ldd	r19, Y+61	; 0x3d
     74c:	4e ad       	ldd	r20, Y+62	; 0x3e
     74e:	5f ad       	ldd	r21, Y+63	; 0x3f
     750:	29 97       	sbiw	r28, 0x09	; 9
     752:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     756:	c9 01       	movw	r24, r18
     758:	da 01       	movw	r26, r20
     75a:	61 96       	adiw	r28, 0x11	; 17
     75c:	8c af       	std	Y+60, r24	; 0x3c
     75e:	9d af       	std	Y+61, r25	; 0x3d
     760:	ae af       	std	Y+62, r26	; 0x3e
     762:	bf af       	std	Y+63, r27	; 0x3f
     764:	61 97       	sbiw	r28, 0x11	; 17
     766:	bc 01       	movw	r22, r24
     768:	cd 01       	movw	r24, r26
     76a:	2d 96       	adiw	r28, 0x0d	; 13
     76c:	2c ad       	ldd	r18, Y+60	; 0x3c
     76e:	3d ad       	ldd	r19, Y+61	; 0x3d
     770:	4e ad       	ldd	r20, Y+62	; 0x3e
     772:	5f ad       	ldd	r21, Y+63	; 0x3f
     774:	2d 97       	sbiw	r28, 0x0d	; 13
     776:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
     77a:	9b 01       	movw	r18, r22
     77c:	ac 01       	movw	r20, r24
     77e:	87 01       	movw	r16, r14
     780:	ff 24       	eor	r15, r15
     782:	ee 24       	eor	r14, r14
     784:	ad a4       	ldd	r10, Y+45	; 0x2d
     786:	be a4       	ldd	r11, Y+46	; 0x2e
     788:	cf a4       	ldd	r12, Y+47	; 0x2f
     78a:	d8 a8       	ldd	r13, Y+48	; 0x30
     78c:	c6 01       	movw	r24, r12
     78e:	aa 27       	eor	r26, r26
     790:	bb 27       	eor	r27, r27
     792:	57 01       	movw	r10, r14
     794:	68 01       	movw	r12, r16
     796:	a8 2a       	or	r10, r24
     798:	b9 2a       	or	r11, r25
     79a:	ca 2a       	or	r12, r26
     79c:	db 2a       	or	r13, r27
     79e:	a2 16       	cp	r10, r18
     7a0:	b3 06       	cpc	r11, r19
     7a2:	c4 06       	cpc	r12, r20
     7a4:	d5 06       	cpc	r13, r21
     7a6:	60 f5       	brcc	.+88     	; 0x800 <__udivdi3+0x716>
     7a8:	61 96       	adiw	r28, 0x11	; 17
     7aa:	6c ad       	ldd	r22, Y+60	; 0x3c
     7ac:	7d ad       	ldd	r23, Y+61	; 0x3d
     7ae:	8e ad       	ldd	r24, Y+62	; 0x3e
     7b0:	9f ad       	ldd	r25, Y+63	; 0x3f
     7b2:	61 97       	sbiw	r28, 0x11	; 17
     7b4:	61 50       	subi	r22, 0x01	; 1
     7b6:	70 40       	sbci	r23, 0x00	; 0
     7b8:	80 40       	sbci	r24, 0x00	; 0
     7ba:	90 40       	sbci	r25, 0x00	; 0
     7bc:	61 96       	adiw	r28, 0x11	; 17
     7be:	6c af       	std	Y+60, r22	; 0x3c
     7c0:	7d af       	std	Y+61, r23	; 0x3d
     7c2:	8e af       	std	Y+62, r24	; 0x3e
     7c4:	9f af       	std	Y+63, r25	; 0x3f
     7c6:	61 97       	sbiw	r28, 0x11	; 17
     7c8:	a2 0c       	add	r10, r2
     7ca:	b3 1c       	adc	r11, r3
     7cc:	c4 1c       	adc	r12, r4
     7ce:	d5 1c       	adc	r13, r5
     7d0:	a2 14       	cp	r10, r2
     7d2:	b3 04       	cpc	r11, r3
     7d4:	c4 04       	cpc	r12, r4
     7d6:	d5 04       	cpc	r13, r5
     7d8:	98 f0       	brcs	.+38     	; 0x800 <__udivdi3+0x716>
     7da:	a2 16       	cp	r10, r18
     7dc:	b3 06       	cpc	r11, r19
     7de:	c4 06       	cpc	r12, r20
     7e0:	d5 06       	cpc	r13, r21
     7e2:	70 f4       	brcc	.+28     	; 0x800 <__udivdi3+0x716>
     7e4:	61 50       	subi	r22, 0x01	; 1
     7e6:	70 40       	sbci	r23, 0x00	; 0
     7e8:	80 40       	sbci	r24, 0x00	; 0
     7ea:	90 40       	sbci	r25, 0x00	; 0
     7ec:	61 96       	adiw	r28, 0x11	; 17
     7ee:	6c af       	std	Y+60, r22	; 0x3c
     7f0:	7d af       	std	Y+61, r23	; 0x3d
     7f2:	8e af       	std	Y+62, r24	; 0x3e
     7f4:	9f af       	std	Y+63, r25	; 0x3f
     7f6:	61 97       	sbiw	r28, 0x11	; 17
     7f8:	a2 0c       	add	r10, r2
     7fa:	b3 1c       	adc	r11, r3
     7fc:	c4 1c       	adc	r12, r4
     7fe:	d5 1c       	adc	r13, r5
     800:	a2 1a       	sub	r10, r18
     802:	b3 0a       	sbc	r11, r19
     804:	c4 0a       	sbc	r12, r20
     806:	d5 0a       	sbc	r13, r21
     808:	c6 01       	movw	r24, r12
     80a:	b5 01       	movw	r22, r10
     80c:	29 96       	adiw	r28, 0x09	; 9
     80e:	2c ad       	ldd	r18, Y+60	; 0x3c
     810:	3d ad       	ldd	r19, Y+61	; 0x3d
     812:	4e ad       	ldd	r20, Y+62	; 0x3e
     814:	5f ad       	ldd	r21, Y+63	; 0x3f
     816:	29 97       	sbiw	r28, 0x09	; 9
     818:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     81c:	7b 01       	movw	r14, r22
     81e:	8c 01       	movw	r16, r24
     820:	c6 01       	movw	r24, r12
     822:	b5 01       	movw	r22, r10
     824:	29 96       	adiw	r28, 0x09	; 9
     826:	2c ad       	ldd	r18, Y+60	; 0x3c
     828:	3d ad       	ldd	r19, Y+61	; 0x3d
     82a:	4e ad       	ldd	r20, Y+62	; 0x3e
     82c:	5f ad       	ldd	r21, Y+63	; 0x3f
     82e:	29 97       	sbiw	r28, 0x09	; 9
     830:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     834:	c9 01       	movw	r24, r18
     836:	da 01       	movw	r26, r20
     838:	5c 01       	movw	r10, r24
     83a:	6d 01       	movw	r12, r26
     83c:	c6 01       	movw	r24, r12
     83e:	b5 01       	movw	r22, r10
     840:	2d 96       	adiw	r28, 0x0d	; 13
     842:	2c ad       	ldd	r18, Y+60	; 0x3c
     844:	3d ad       	ldd	r19, Y+61	; 0x3d
     846:	4e ad       	ldd	r20, Y+62	; 0x3e
     848:	5f ad       	ldd	r21, Y+63	; 0x3f
     84a:	2d 97       	sbiw	r28, 0x0d	; 13
     84c:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
     850:	9b 01       	movw	r18, r22
     852:	ac 01       	movw	r20, r24
     854:	87 01       	movw	r16, r14
     856:	ff 24       	eor	r15, r15
     858:	ee 24       	eor	r14, r14
     85a:	8d a5       	ldd	r24, Y+45	; 0x2d
     85c:	9e a5       	ldd	r25, Y+46	; 0x2e
     85e:	af a5       	ldd	r26, Y+47	; 0x2f
     860:	b8 a9       	ldd	r27, Y+48	; 0x30
     862:	a0 70       	andi	r26, 0x00	; 0
     864:	b0 70       	andi	r27, 0x00	; 0
     866:	e8 2a       	or	r14, r24
     868:	f9 2a       	or	r15, r25
     86a:	0a 2b       	or	r16, r26
     86c:	1b 2b       	or	r17, r27
     86e:	e2 16       	cp	r14, r18
     870:	f3 06       	cpc	r15, r19
     872:	04 07       	cpc	r16, r20
     874:	15 07       	cpc	r17, r21
     876:	c0 f4       	brcc	.+48     	; 0x8a8 <__stack+0x49>
     878:	08 94       	sec
     87a:	a1 08       	sbc	r10, r1
     87c:	b1 08       	sbc	r11, r1
     87e:	c1 08       	sbc	r12, r1
     880:	d1 08       	sbc	r13, r1
     882:	e2 0c       	add	r14, r2
     884:	f3 1c       	adc	r15, r3
     886:	04 1d       	adc	r16, r4
     888:	15 1d       	adc	r17, r5
     88a:	e2 14       	cp	r14, r2
     88c:	f3 04       	cpc	r15, r3
     88e:	04 05       	cpc	r16, r4
     890:	15 05       	cpc	r17, r5
     892:	50 f0       	brcs	.+20     	; 0x8a8 <__stack+0x49>
     894:	e2 16       	cp	r14, r18
     896:	f3 06       	cpc	r15, r19
     898:	04 07       	cpc	r16, r20
     89a:	15 07       	cpc	r17, r21
     89c:	28 f4       	brcc	.+10     	; 0x8a8 <__stack+0x49>
     89e:	08 94       	sec
     8a0:	a1 08       	sbc	r10, r1
     8a2:	b1 08       	sbc	r11, r1
     8a4:	c1 08       	sbc	r12, r1
     8a6:	d1 08       	sbc	r13, r1
     8a8:	61 96       	adiw	r28, 0x11	; 17
     8aa:	ec ac       	ldd	r14, Y+60	; 0x3c
     8ac:	fd ac       	ldd	r15, Y+61	; 0x3d
     8ae:	0e ad       	ldd	r16, Y+62	; 0x3e
     8b0:	1f ad       	ldd	r17, Y+63	; 0x3f
     8b2:	61 97       	sbiw	r28, 0x11	; 17
     8b4:	d7 01       	movw	r26, r14
     8b6:	99 27       	eor	r25, r25
     8b8:	88 27       	eor	r24, r24
     8ba:	96 01       	movw	r18, r12
     8bc:	85 01       	movw	r16, r10
     8be:	08 2b       	or	r16, r24
     8c0:	19 2b       	or	r17, r25
     8c2:	2a 2b       	or	r18, r26
     8c4:	3b 2b       	or	r19, r27
     8c6:	09 ab       	std	Y+49, r16	; 0x31
     8c8:	1a ab       	std	Y+50, r17	; 0x32
     8ca:	2b ab       	std	Y+51, r18	; 0x33
     8cc:	3c ab       	std	Y+52, r19	; 0x34
     8ce:	62 c2       	rjmp	.+1220   	; 0xd94 <__stack+0x535>
     8d0:	6e 14       	cp	r6, r14
     8d2:	7f 04       	cpc	r7, r15
     8d4:	80 06       	cpc	r8, r16
     8d6:	91 06       	cpc	r9, r17
     8d8:	08 f4       	brcc	.+2      	; 0x8dc <__stack+0x7d>
     8da:	51 c2       	rjmp	.+1186   	; 0xd7e <__stack+0x51f>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	e2 16       	cp	r14, r18
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	f2 06       	cpc	r15, r18
     8e4:	21 e0       	ldi	r18, 0x01	; 1
     8e6:	02 07       	cpc	r16, r18
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	12 07       	cpc	r17, r18
     8ec:	88 f4       	brcc	.+34     	; 0x910 <__stack+0xb1>
     8ee:	3f ef       	ldi	r19, 0xFF	; 255
     8f0:	e3 16       	cp	r14, r19
     8f2:	f1 04       	cpc	r15, r1
     8f4:	01 05       	cpc	r16, r1
     8f6:	11 05       	cpc	r17, r1
     8f8:	31 f0       	breq	.+12     	; 0x906 <__stack+0xa7>
     8fa:	28 f0       	brcs	.+10     	; 0x906 <__stack+0xa7>
     8fc:	48 e0       	ldi	r20, 0x08	; 8
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	17 c0       	rjmp	.+46     	; 0x934 <__stack+0xd5>
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	12 c0       	rjmp	.+36     	; 0x934 <__stack+0xd5>
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	e4 16       	cp	r14, r20
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	f4 06       	cpc	r15, r20
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	04 07       	cpc	r16, r20
     91c:	41 e0       	ldi	r20, 0x01	; 1
     91e:	14 07       	cpc	r17, r20
     920:	28 f0       	brcs	.+10     	; 0x92c <__stack+0xcd>
     922:	48 e1       	ldi	r20, 0x18	; 24
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__stack+0xd5>
     92c:	40 e1       	ldi	r20, 0x10	; 16
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	d8 01       	movw	r26, r16
     936:	c7 01       	movw	r24, r14
     938:	04 2e       	mov	r0, r20
     93a:	04 c0       	rjmp	.+8      	; 0x944 <__stack+0xe5>
     93c:	b6 95       	lsr	r27
     93e:	a7 95       	ror	r26
     940:	97 95       	ror	r25
     942:	87 95       	ror	r24
     944:	0a 94       	dec	r0
     946:	d2 f7       	brpl	.-12     	; 0x93c <__stack+0xdd>
     948:	86 5e       	subi	r24, 0xE6	; 230
     94a:	9e 4f       	sbci	r25, 0xFE	; 254
     94c:	dc 01       	movw	r26, r24
     94e:	2c 91       	ld	r18, X
     950:	30 e2       	ldi	r19, 0x20	; 32
     952:	a3 2e       	mov	r10, r19
     954:	b1 2c       	mov	r11, r1
     956:	c1 2c       	mov	r12, r1
     958:	d1 2c       	mov	r13, r1
     95a:	d6 01       	movw	r26, r12
     95c:	c5 01       	movw	r24, r10
     95e:	84 1b       	sub	r24, r20
     960:	95 0b       	sbc	r25, r21
     962:	a6 0b       	sbc	r26, r22
     964:	b7 0b       	sbc	r27, r23
     966:	82 1b       	sub	r24, r18
     968:	91 09       	sbc	r25, r1
     96a:	a1 09       	sbc	r26, r1
     96c:	b1 09       	sbc	r27, r1
     96e:	00 97       	sbiw	r24, 0x00	; 0
     970:	a1 05       	cpc	r26, r1
     972:	b1 05       	cpc	r27, r1
     974:	89 f4       	brne	.+34     	; 0x998 <__stack+0x139>
     976:	e6 14       	cp	r14, r6
     978:	f7 04       	cpc	r15, r7
     97a:	08 05       	cpc	r16, r8
     97c:	19 05       	cpc	r17, r9
     97e:	08 f4       	brcc	.+2      	; 0x982 <__stack+0x123>
     980:	f2 c1       	rjmp	.+996    	; 0xd66 <__stack+0x507>
     982:	6d a4       	ldd	r6, Y+45	; 0x2d
     984:	7e a4       	ldd	r7, Y+46	; 0x2e
     986:	8f a4       	ldd	r8, Y+47	; 0x2f
     988:	98 a8       	ldd	r9, Y+48	; 0x30
     98a:	62 14       	cp	r6, r2
     98c:	73 04       	cpc	r7, r3
     98e:	84 04       	cpc	r8, r4
     990:	95 04       	cpc	r9, r5
     992:	08 f0       	brcs	.+2      	; 0x996 <__stack+0x137>
     994:	e8 c1       	rjmp	.+976    	; 0xd66 <__stack+0x507>
     996:	f3 c1       	rjmp	.+998    	; 0xd7e <__stack+0x51f>
     998:	6e 96       	adiw	r28, 0x1e	; 30
     99a:	8f af       	std	Y+63, r24	; 0x3f
     99c:	6e 97       	sbiw	r28, 0x1e	; 30
     99e:	08 2e       	mov	r0, r24
     9a0:	04 c0       	rjmp	.+8      	; 0x9aa <__stack+0x14b>
     9a2:	ee 0c       	add	r14, r14
     9a4:	ff 1c       	adc	r15, r15
     9a6:	00 1f       	adc	r16, r16
     9a8:	11 1f       	adc	r17, r17
     9aa:	0a 94       	dec	r0
     9ac:	d2 f7       	brpl	.-12     	; 0x9a2 <__stack+0x143>
     9ae:	6a 2d       	mov	r22, r10
     9b0:	68 1b       	sub	r22, r24
     9b2:	d2 01       	movw	r26, r4
     9b4:	c1 01       	movw	r24, r2
     9b6:	06 2e       	mov	r0, r22
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <__stack+0x163>
     9ba:	b6 95       	lsr	r27
     9bc:	a7 95       	ror	r26
     9be:	97 95       	ror	r25
     9c0:	87 95       	ror	r24
     9c2:	0a 94       	dec	r0
     9c4:	d2 f7       	brpl	.-12     	; 0x9ba <__stack+0x15b>
     9c6:	5c 01       	movw	r10, r24
     9c8:	6d 01       	movw	r12, r26
     9ca:	ae 28       	or	r10, r14
     9cc:	bf 28       	or	r11, r15
     9ce:	c0 2a       	or	r12, r16
     9d0:	d1 2a       	or	r13, r17
     9d2:	ad a2       	std	Y+37, r10	; 0x25
     9d4:	be a2       	std	Y+38, r11	; 0x26
     9d6:	cf a2       	std	Y+39, r12	; 0x27
     9d8:	d8 a6       	std	Y+40, r13	; 0x28
     9da:	72 01       	movw	r14, r4
     9dc:	61 01       	movw	r12, r2
     9de:	6e 96       	adiw	r28, 0x1e	; 30
     9e0:	0f ac       	ldd	r0, Y+63	; 0x3f
     9e2:	6e 97       	sbiw	r28, 0x1e	; 30
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__stack+0x18f>
     9e6:	cc 0c       	add	r12, r12
     9e8:	dd 1c       	adc	r13, r13
     9ea:	ee 1c       	adc	r14, r14
     9ec:	ff 1c       	adc	r15, r15
     9ee:	0a 94       	dec	r0
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__stack+0x187>
     9f2:	c9 a2       	std	Y+33, r12	; 0x21
     9f4:	da a2       	std	Y+34, r13	; 0x22
     9f6:	eb a2       	std	Y+35, r14	; 0x23
     9f8:	fc a2       	std	Y+36, r15	; 0x24
     9fa:	64 01       	movw	r12, r8
     9fc:	53 01       	movw	r10, r6
     9fe:	06 2e       	mov	r0, r22
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <__stack+0x1ab>
     a02:	d6 94       	lsr	r13
     a04:	c7 94       	ror	r12
     a06:	b7 94       	ror	r11
     a08:	a7 94       	ror	r10
     a0a:	0a 94       	dec	r0
     a0c:	d2 f7       	brpl	.-12     	; 0xa02 <__stack+0x1a3>
     a0e:	d4 01       	movw	r26, r8
     a10:	c3 01       	movw	r24, r6
     a12:	6e 96       	adiw	r28, 0x1e	; 30
     a14:	0f ac       	ldd	r0, Y+63	; 0x3f
     a16:	6e 97       	sbiw	r28, 0x1e	; 30
     a18:	04 c0       	rjmp	.+8      	; 0xa22 <__stack+0x1c3>
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	aa 1f       	adc	r26, r26
     a20:	bb 1f       	adc	r27, r27
     a22:	0a 94       	dec	r0
     a24:	d2 f7       	brpl	.-12     	; 0xa1a <__stack+0x1bb>
     a26:	ed a4       	ldd	r14, Y+45	; 0x2d
     a28:	fe a4       	ldd	r15, Y+46	; 0x2e
     a2a:	0f a5       	ldd	r16, Y+47	; 0x2f
     a2c:	18 a9       	ldd	r17, Y+48	; 0x30
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__stack+0x1d9>
     a30:	16 95       	lsr	r17
     a32:	07 95       	ror	r16
     a34:	f7 94       	ror	r15
     a36:	e7 94       	ror	r14
     a38:	6a 95       	dec	r22
     a3a:	d2 f7       	brpl	.-12     	; 0xa30 <__stack+0x1d1>
     a3c:	37 01       	movw	r6, r14
     a3e:	48 01       	movw	r8, r16
     a40:	68 2a       	or	r6, r24
     a42:	79 2a       	or	r7, r25
     a44:	8a 2a       	or	r8, r26
     a46:	9b 2a       	or	r9, r27
     a48:	6d 8e       	std	Y+29, r6	; 0x1d
     a4a:	7e 8e       	std	Y+30, r7	; 0x1e
     a4c:	8f 8e       	std	Y+31, r8	; 0x1f
     a4e:	98 a2       	std	Y+32, r9	; 0x20
     a50:	ed a0       	ldd	r14, Y+37	; 0x25
     a52:	fe a0       	ldd	r15, Y+38	; 0x26
     a54:	0f a1       	ldd	r16, Y+39	; 0x27
     a56:	18 a5       	ldd	r17, Y+40	; 0x28
     a58:	38 01       	movw	r6, r16
     a5a:	88 24       	eor	r8, r8
     a5c:	99 24       	eor	r9, r9
     a5e:	98 01       	movw	r18, r16
     a60:	87 01       	movw	r16, r14
     a62:	20 70       	andi	r18, 0x00	; 0
     a64:	30 70       	andi	r19, 0x00	; 0
     a66:	65 96       	adiw	r28, 0x15	; 21
     a68:	0c af       	std	Y+60, r16	; 0x3c
     a6a:	1d af       	std	Y+61, r17	; 0x3d
     a6c:	2e af       	std	Y+62, r18	; 0x3e
     a6e:	3f af       	std	Y+63, r19	; 0x3f
     a70:	65 97       	sbiw	r28, 0x15	; 21
     a72:	c6 01       	movw	r24, r12
     a74:	b5 01       	movw	r22, r10
     a76:	a4 01       	movw	r20, r8
     a78:	93 01       	movw	r18, r6
     a7a:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     a7e:	7b 01       	movw	r14, r22
     a80:	8c 01       	movw	r16, r24
     a82:	c6 01       	movw	r24, r12
     a84:	b5 01       	movw	r22, r10
     a86:	a4 01       	movw	r20, r8
     a88:	93 01       	movw	r18, r6
     a8a:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     a8e:	c9 01       	movw	r24, r18
     a90:	da 01       	movw	r26, r20
     a92:	1c 01       	movw	r2, r24
     a94:	2d 01       	movw	r4, r26
     a96:	c2 01       	movw	r24, r4
     a98:	b1 01       	movw	r22, r2
     a9a:	65 96       	adiw	r28, 0x15	; 21
     a9c:	2c ad       	ldd	r18, Y+60	; 0x3c
     a9e:	3d ad       	ldd	r19, Y+61	; 0x3d
     aa0:	4e ad       	ldd	r20, Y+62	; 0x3e
     aa2:	5f ad       	ldd	r21, Y+63	; 0x3f
     aa4:	65 97       	sbiw	r28, 0x15	; 21
     aa6:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	87 01       	movw	r16, r14
     ab0:	ff 24       	eor	r15, r15
     ab2:	ee 24       	eor	r14, r14
     ab4:	ad 8c       	ldd	r10, Y+29	; 0x1d
     ab6:	be 8c       	ldd	r11, Y+30	; 0x1e
     ab8:	cf 8c       	ldd	r12, Y+31	; 0x1f
     aba:	d8 a0       	ldd	r13, Y+32	; 0x20
     abc:	c6 01       	movw	r24, r12
     abe:	aa 27       	eor	r26, r26
     ac0:	bb 27       	eor	r27, r27
     ac2:	57 01       	movw	r10, r14
     ac4:	68 01       	movw	r12, r16
     ac6:	a8 2a       	or	r10, r24
     ac8:	b9 2a       	or	r11, r25
     aca:	ca 2a       	or	r12, r26
     acc:	db 2a       	or	r13, r27
     ace:	a2 16       	cp	r10, r18
     ad0:	b3 06       	cpc	r11, r19
     ad2:	c4 06       	cpc	r12, r20
     ad4:	d5 06       	cpc	r13, r21
     ad6:	00 f5       	brcc	.+64     	; 0xb18 <__stack+0x2b9>
     ad8:	08 94       	sec
     ada:	21 08       	sbc	r2, r1
     adc:	31 08       	sbc	r3, r1
     ade:	41 08       	sbc	r4, r1
     ae0:	51 08       	sbc	r5, r1
     ae2:	ed a0       	ldd	r14, Y+37	; 0x25
     ae4:	fe a0       	ldd	r15, Y+38	; 0x26
     ae6:	0f a1       	ldd	r16, Y+39	; 0x27
     ae8:	18 a5       	ldd	r17, Y+40	; 0x28
     aea:	ae 0c       	add	r10, r14
     aec:	bf 1c       	adc	r11, r15
     aee:	c0 1e       	adc	r12, r16
     af0:	d1 1e       	adc	r13, r17
     af2:	ae 14       	cp	r10, r14
     af4:	bf 04       	cpc	r11, r15
     af6:	c0 06       	cpc	r12, r16
     af8:	d1 06       	cpc	r13, r17
     afa:	70 f0       	brcs	.+28     	; 0xb18 <__stack+0x2b9>
     afc:	a2 16       	cp	r10, r18
     afe:	b3 06       	cpc	r11, r19
     b00:	c4 06       	cpc	r12, r20
     b02:	d5 06       	cpc	r13, r21
     b04:	48 f4       	brcc	.+18     	; 0xb18 <__stack+0x2b9>
     b06:	08 94       	sec
     b08:	21 08       	sbc	r2, r1
     b0a:	31 08       	sbc	r3, r1
     b0c:	41 08       	sbc	r4, r1
     b0e:	51 08       	sbc	r5, r1
     b10:	ae 0c       	add	r10, r14
     b12:	bf 1c       	adc	r11, r15
     b14:	c0 1e       	adc	r12, r16
     b16:	d1 1e       	adc	r13, r17
     b18:	a2 1a       	sub	r10, r18
     b1a:	b3 0a       	sbc	r11, r19
     b1c:	c4 0a       	sbc	r12, r20
     b1e:	d5 0a       	sbc	r13, r21
     b20:	c6 01       	movw	r24, r12
     b22:	b5 01       	movw	r22, r10
     b24:	a4 01       	movw	r20, r8
     b26:	93 01       	movw	r18, r6
     b28:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     b2c:	7b 01       	movw	r14, r22
     b2e:	8c 01       	movw	r16, r24
     b30:	c6 01       	movw	r24, r12
     b32:	b5 01       	movw	r22, r10
     b34:	a4 01       	movw	r20, r8
     b36:	93 01       	movw	r18, r6
     b38:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     b3c:	c9 01       	movw	r24, r18
     b3e:	da 01       	movw	r26, r20
     b40:	3c 01       	movw	r6, r24
     b42:	4d 01       	movw	r8, r26
     b44:	c4 01       	movw	r24, r8
     b46:	b3 01       	movw	r22, r6
     b48:	65 96       	adiw	r28, 0x15	; 21
     b4a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b4c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b4e:	4e ad       	ldd	r20, Y+62	; 0x3e
     b50:	5f ad       	ldd	r21, Y+63	; 0x3f
     b52:	65 97       	sbiw	r28, 0x15	; 21
     b54:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
     b58:	9b 01       	movw	r18, r22
     b5a:	ac 01       	movw	r20, r24
     b5c:	87 01       	movw	r16, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	ee 24       	eor	r14, r14
     b62:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b64:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b66:	af 8d       	ldd	r26, Y+31	; 0x1f
     b68:	b8 a1       	ldd	r27, Y+32	; 0x20
     b6a:	a0 70       	andi	r26, 0x00	; 0
     b6c:	b0 70       	andi	r27, 0x00	; 0
     b6e:	57 01       	movw	r10, r14
     b70:	68 01       	movw	r12, r16
     b72:	a8 2a       	or	r10, r24
     b74:	b9 2a       	or	r11, r25
     b76:	ca 2a       	or	r12, r26
     b78:	db 2a       	or	r13, r27
     b7a:	a2 16       	cp	r10, r18
     b7c:	b3 06       	cpc	r11, r19
     b7e:	c4 06       	cpc	r12, r20
     b80:	d5 06       	cpc	r13, r21
     b82:	00 f5       	brcc	.+64     	; 0xbc4 <__stack+0x365>
     b84:	08 94       	sec
     b86:	61 08       	sbc	r6, r1
     b88:	71 08       	sbc	r7, r1
     b8a:	81 08       	sbc	r8, r1
     b8c:	91 08       	sbc	r9, r1
     b8e:	6d a1       	ldd	r22, Y+37	; 0x25
     b90:	7e a1       	ldd	r23, Y+38	; 0x26
     b92:	8f a1       	ldd	r24, Y+39	; 0x27
     b94:	98 a5       	ldd	r25, Y+40	; 0x28
     b96:	a6 0e       	add	r10, r22
     b98:	b7 1e       	adc	r11, r23
     b9a:	c8 1e       	adc	r12, r24
     b9c:	d9 1e       	adc	r13, r25
     b9e:	a6 16       	cp	r10, r22
     ba0:	b7 06       	cpc	r11, r23
     ba2:	c8 06       	cpc	r12, r24
     ba4:	d9 06       	cpc	r13, r25
     ba6:	70 f0       	brcs	.+28     	; 0xbc4 <__stack+0x365>
     ba8:	a2 16       	cp	r10, r18
     baa:	b3 06       	cpc	r11, r19
     bac:	c4 06       	cpc	r12, r20
     bae:	d5 06       	cpc	r13, r21
     bb0:	48 f4       	brcc	.+18     	; 0xbc4 <__stack+0x365>
     bb2:	08 94       	sec
     bb4:	61 08       	sbc	r6, r1
     bb6:	71 08       	sbc	r7, r1
     bb8:	81 08       	sbc	r8, r1
     bba:	91 08       	sbc	r9, r1
     bbc:	a6 0e       	add	r10, r22
     bbe:	b7 1e       	adc	r11, r23
     bc0:	c8 1e       	adc	r12, r24
     bc2:	d9 1e       	adc	r13, r25
     bc4:	d6 01       	movw	r26, r12
     bc6:	c5 01       	movw	r24, r10
     bc8:	82 1b       	sub	r24, r18
     bca:	93 0b       	sbc	r25, r19
     bcc:	a4 0b       	sbc	r26, r20
     bce:	b5 0b       	sbc	r27, r21
     bd0:	89 8f       	std	Y+25, r24	; 0x19
     bd2:	9a 8f       	std	Y+26, r25	; 0x1a
     bd4:	ab 8f       	std	Y+27, r26	; 0x1b
     bd6:	bc 8f       	std	Y+28, r27	; 0x1c
     bd8:	d1 01       	movw	r26, r2
     bda:	99 27       	eor	r25, r25
     bdc:	88 27       	eor	r24, r24
     bde:	64 01       	movw	r12, r8
     be0:	53 01       	movw	r10, r6
     be2:	a8 2a       	or	r10, r24
     be4:	b9 2a       	or	r11, r25
     be6:	ca 2a       	or	r12, r26
     be8:	db 2a       	or	r13, r27
     bea:	a9 aa       	std	Y+49, r10	; 0x31
     bec:	ba aa       	std	Y+50, r11	; 0x32
     bee:	cb aa       	std	Y+51, r12	; 0x33
     bf0:	dc aa       	std	Y+52, r13	; 0x34
     bf2:	86 01       	movw	r16, r12
     bf4:	75 01       	movw	r14, r10
     bf6:	2f ef       	ldi	r18, 0xFF	; 255
     bf8:	3f ef       	ldi	r19, 0xFF	; 255
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	e2 22       	and	r14, r18
     c00:	f3 22       	and	r15, r19
     c02:	04 23       	and	r16, r20
     c04:	15 23       	and	r17, r21
     c06:	a6 01       	movw	r20, r12
     c08:	66 27       	eor	r22, r22
     c0a:	77 27       	eor	r23, r23
     c0c:	6d 96       	adiw	r28, 0x1d	; 29
     c0e:	4c af       	std	Y+60, r20	; 0x3c
     c10:	5d af       	std	Y+61, r21	; 0x3d
     c12:	6e af       	std	Y+62, r22	; 0x3e
     c14:	7f af       	std	Y+63, r23	; 0x3f
     c16:	6d 97       	sbiw	r28, 0x1d	; 29
     c18:	a9 a0       	ldd	r10, Y+33	; 0x21
     c1a:	ba a0       	ldd	r11, Y+34	; 0x22
     c1c:	cb a0       	ldd	r12, Y+35	; 0x23
     c1e:	dc a0       	ldd	r13, Y+36	; 0x24
     c20:	6f ef       	ldi	r22, 0xFF	; 255
     c22:	7f ef       	ldi	r23, 0xFF	; 255
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	a6 22       	and	r10, r22
     c2a:	b7 22       	and	r11, r23
     c2c:	c8 22       	and	r12, r24
     c2e:	d9 22       	and	r13, r25
     c30:	89 a1       	ldd	r24, Y+33	; 0x21
     c32:	9a a1       	ldd	r25, Y+34	; 0x22
     c34:	ab a1       	ldd	r26, Y+35	; 0x23
     c36:	bc a1       	ldd	r27, Y+36	; 0x24
     c38:	1d 01       	movw	r2, r26
     c3a:	44 24       	eor	r4, r4
     c3c:	55 24       	eor	r5, r5
     c3e:	c8 01       	movw	r24, r16
     c40:	b7 01       	movw	r22, r14
     c42:	a6 01       	movw	r20, r12
     c44:	95 01       	movw	r18, r10
     c46:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
     c4a:	69 96       	adiw	r28, 0x19	; 25
     c4c:	6c af       	std	Y+60, r22	; 0x3c
     c4e:	7d af       	std	Y+61, r23	; 0x3d
     c50:	8e af       	std	Y+62, r24	; 0x3e
     c52:	9f af       	std	Y+63, r25	; 0x3f
     c54:	69 97       	sbiw	r28, 0x19	; 25
     c56:	c8 01       	movw	r24, r16
     c58:	b7 01       	movw	r22, r14
     c5a:	a2 01       	movw	r20, r4
     c5c:	91 01       	movw	r18, r2
     c5e:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
     c62:	3b 01       	movw	r6, r22
     c64:	4c 01       	movw	r8, r24
     c66:	6d 96       	adiw	r28, 0x1d	; 29
     c68:	6c ad       	ldd	r22, Y+60	; 0x3c
     c6a:	7d ad       	ldd	r23, Y+61	; 0x3d
     c6c:	8e ad       	ldd	r24, Y+62	; 0x3e
     c6e:	9f ad       	ldd	r25, Y+63	; 0x3f
     c70:	6d 97       	sbiw	r28, 0x1d	; 29
     c72:	a6 01       	movw	r20, r12
     c74:	95 01       	movw	r18, r10
     c76:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
     c7a:	7b 01       	movw	r14, r22
     c7c:	8c 01       	movw	r16, r24
     c7e:	6d 96       	adiw	r28, 0x1d	; 29
     c80:	6c ad       	ldd	r22, Y+60	; 0x3c
     c82:	7d ad       	ldd	r23, Y+61	; 0x3d
     c84:	8e ad       	ldd	r24, Y+62	; 0x3e
     c86:	9f ad       	ldd	r25, Y+63	; 0x3f
     c88:	6d 97       	sbiw	r28, 0x1d	; 29
     c8a:	a2 01       	movw	r20, r4
     c8c:	91 01       	movw	r18, r2
     c8e:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
     c92:	5b 01       	movw	r10, r22
     c94:	6c 01       	movw	r12, r24
     c96:	a8 01       	movw	r20, r16
     c98:	97 01       	movw	r18, r14
     c9a:	26 0d       	add	r18, r6
     c9c:	37 1d       	adc	r19, r7
     c9e:	48 1d       	adc	r20, r8
     ca0:	59 1d       	adc	r21, r9
     ca2:	69 96       	adiw	r28, 0x19	; 25
     ca4:	6c ac       	ldd	r6, Y+60	; 0x3c
     ca6:	7d ac       	ldd	r7, Y+61	; 0x3d
     ca8:	8e ac       	ldd	r8, Y+62	; 0x3e
     caa:	9f ac       	ldd	r9, Y+63	; 0x3f
     cac:	69 97       	sbiw	r28, 0x19	; 25
     cae:	c4 01       	movw	r24, r8
     cb0:	aa 27       	eor	r26, r26
     cb2:	bb 27       	eor	r27, r27
     cb4:	28 0f       	add	r18, r24
     cb6:	39 1f       	adc	r19, r25
     cb8:	4a 1f       	adc	r20, r26
     cba:	5b 1f       	adc	r21, r27
     cbc:	2e 15       	cp	r18, r14
     cbe:	3f 05       	cpc	r19, r15
     cc0:	40 07       	cpc	r20, r16
     cc2:	51 07       	cpc	r21, r17
     cc4:	48 f4       	brcc	.+18     	; 0xcd8 <__stack+0x479>
     cc6:	e1 2c       	mov	r14, r1
     cc8:	f1 2c       	mov	r15, r1
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	06 2f       	mov	r16, r22
     cce:	11 2d       	mov	r17, r1
     cd0:	ae 0c       	add	r10, r14
     cd2:	bf 1c       	adc	r11, r15
     cd4:	c0 1e       	adc	r12, r16
     cd6:	d1 1e       	adc	r13, r17
     cd8:	ca 01       	movw	r24, r20
     cda:	aa 27       	eor	r26, r26
     cdc:	bb 27       	eor	r27, r27
     cde:	bc 01       	movw	r22, r24
     ce0:	cd 01       	movw	r24, r26
     ce2:	6a 0d       	add	r22, r10
     ce4:	7b 1d       	adc	r23, r11
     ce6:	8c 1d       	adc	r24, r12
     ce8:	9d 1d       	adc	r25, r13
     cea:	69 8c       	ldd	r6, Y+25	; 0x19
     cec:	7a 8c       	ldd	r7, Y+26	; 0x1a
     cee:	8b 8c       	ldd	r8, Y+27	; 0x1b
     cf0:	9c 8c       	ldd	r9, Y+28	; 0x1c
     cf2:	66 16       	cp	r6, r22
     cf4:	77 06       	cpc	r7, r23
     cf6:	88 06       	cpc	r8, r24
     cf8:	99 06       	cpc	r9, r25
     cfa:	40 f1       	brcs	.+80     	; 0xd4c <__stack+0x4ed>
     cfc:	66 15       	cp	r22, r6
     cfe:	77 05       	cpc	r23, r7
     d00:	88 05       	cpc	r24, r8
     d02:	99 05       	cpc	r25, r9
     d04:	09 f0       	breq	.+2      	; 0xd08 <__stack+0x4a9>
     d06:	43 c0       	rjmp	.+134    	; 0xd8e <__stack+0x52f>
     d08:	d9 01       	movw	r26, r18
     d0a:	99 27       	eor	r25, r25
     d0c:	88 27       	eor	r24, r24
     d0e:	69 96       	adiw	r28, 0x19	; 25
     d10:	2c ad       	ldd	r18, Y+60	; 0x3c
     d12:	3d ad       	ldd	r19, Y+61	; 0x3d
     d14:	4e ad       	ldd	r20, Y+62	; 0x3e
     d16:	5f ad       	ldd	r21, Y+63	; 0x3f
     d18:	69 97       	sbiw	r28, 0x19	; 25
     d1a:	40 70       	andi	r20, 0x00	; 0
     d1c:	50 70       	andi	r21, 0x00	; 0
     d1e:	82 0f       	add	r24, r18
     d20:	93 1f       	adc	r25, r19
     d22:	a4 1f       	adc	r26, r20
     d24:	b5 1f       	adc	r27, r21
     d26:	2d a5       	ldd	r18, Y+45	; 0x2d
     d28:	3e a5       	ldd	r19, Y+46	; 0x2e
     d2a:	4f a5       	ldd	r20, Y+47	; 0x2f
     d2c:	58 a9       	ldd	r21, Y+48	; 0x30
     d2e:	6e 96       	adiw	r28, 0x1e	; 30
     d30:	0f ac       	ldd	r0, Y+63	; 0x3f
     d32:	6e 97       	sbiw	r28, 0x1e	; 30
     d34:	04 c0       	rjmp	.+8      	; 0xd3e <__stack+0x4df>
     d36:	22 0f       	add	r18, r18
     d38:	33 1f       	adc	r19, r19
     d3a:	44 1f       	adc	r20, r20
     d3c:	55 1f       	adc	r21, r21
     d3e:	0a 94       	dec	r0
     d40:	d2 f7       	brpl	.-12     	; 0xd36 <__stack+0x4d7>
     d42:	28 17       	cp	r18, r24
     d44:	39 07       	cpc	r19, r25
     d46:	4a 07       	cpc	r20, r26
     d48:	5b 07       	cpc	r21, r27
     d4a:	08 f5       	brcc	.+66     	; 0xd8e <__stack+0x52f>
     d4c:	09 a9       	ldd	r16, Y+49	; 0x31
     d4e:	1a a9       	ldd	r17, Y+50	; 0x32
     d50:	2b a9       	ldd	r18, Y+51	; 0x33
     d52:	3c a9       	ldd	r19, Y+52	; 0x34
     d54:	01 50       	subi	r16, 0x01	; 1
     d56:	10 40       	sbci	r17, 0x00	; 0
     d58:	20 40       	sbci	r18, 0x00	; 0
     d5a:	30 40       	sbci	r19, 0x00	; 0
     d5c:	09 ab       	std	Y+49, r16	; 0x31
     d5e:	1a ab       	std	Y+50, r17	; 0x32
     d60:	2b ab       	std	Y+51, r18	; 0x33
     d62:	3c ab       	std	Y+52, r19	; 0x34
     d64:	14 c0       	rjmp	.+40     	; 0xd8e <__stack+0x52f>
     d66:	66 24       	eor	r6, r6
     d68:	77 24       	eor	r7, r7
     d6a:	43 01       	movw	r8, r6
     d6c:	21 e0       	ldi	r18, 0x01	; 1
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	29 ab       	std	Y+49, r18	; 0x31
     d76:	3a ab       	std	Y+50, r19	; 0x32
     d78:	4b ab       	std	Y+51, r20	; 0x33
     d7a:	5c ab       	std	Y+52, r21	; 0x34
     d7c:	0b c0       	rjmp	.+22     	; 0xd94 <__stack+0x535>
     d7e:	66 24       	eor	r6, r6
     d80:	77 24       	eor	r7, r7
     d82:	43 01       	movw	r8, r6
     d84:	19 aa       	std	Y+49, r1	; 0x31
     d86:	1a aa       	std	Y+50, r1	; 0x32
     d88:	1b aa       	std	Y+51, r1	; 0x33
     d8a:	1c aa       	std	Y+52, r1	; 0x34
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <__stack+0x535>
     d8e:	66 24       	eor	r6, r6
     d90:	77 24       	eor	r7, r7
     d92:	43 01       	movw	r8, r6
     d94:	fe 01       	movw	r30, r28
     d96:	71 96       	adiw	r30, 0x11	; 17
     d98:	88 e0       	ldi	r24, 0x08	; 8
     d9a:	df 01       	movw	r26, r30
     d9c:	1d 92       	st	X+, r1
     d9e:	8a 95       	dec	r24
     da0:	e9 f7       	brne	.-6      	; 0xd9c <__stack+0x53d>
     da2:	a9 a8       	ldd	r10, Y+49	; 0x31
     da4:	ba a8       	ldd	r11, Y+50	; 0x32
     da6:	cb a8       	ldd	r12, Y+51	; 0x33
     da8:	dc a8       	ldd	r13, Y+52	; 0x34
     daa:	a9 8a       	std	Y+17, r10	; 0x11
     dac:	ba 8a       	std	Y+18, r11	; 0x12
     dae:	cb 8a       	std	Y+19, r12	; 0x13
     db0:	dc 8a       	std	Y+20, r13	; 0x14
     db2:	6d 8a       	std	Y+21, r6	; 0x15
     db4:	7e 8a       	std	Y+22, r7	; 0x16
     db6:	8f 8a       	std	Y+23, r8	; 0x17
     db8:	98 8e       	std	Y+24, r9	; 0x18
     dba:	29 a9       	ldd	r18, Y+49	; 0x31
     dbc:	3a 89       	ldd	r19, Y+18	; 0x12
     dbe:	4b 89       	ldd	r20, Y+19	; 0x13
     dc0:	5c 89       	ldd	r21, Y+20	; 0x14
     dc2:	66 2d       	mov	r22, r6
     dc4:	7e 89       	ldd	r23, Y+22	; 0x16
     dc6:	8f 89       	ldd	r24, Y+23	; 0x17
     dc8:	98 8d       	ldd	r25, Y+24	; 0x18
     dca:	c2 5a       	subi	r28, 0xA2	; 162
     dcc:	df 4f       	sbci	r29, 0xFF	; 255
     dce:	e2 e1       	ldi	r30, 0x12	; 18
     dd0:	0c 94 55 4c 	jmp	0x98aa	; 0x98aa <__epilogue_restores__>

00000dd4 <__umoddi3>:
     dd4:	ab e5       	ldi	r26, 0x5B	; 91
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e0 ef       	ldi	r30, 0xF0	; 240
     dda:	f6 e0       	ldi	r31, 0x06	; 6
     ddc:	0c 94 39 4c 	jmp	0x9872	; 0x9872 <__prologue_saves__>
     de0:	a8 e0       	ldi	r26, 0x08	; 8
     de2:	4e 01       	movw	r8, r28
     de4:	08 94       	sec
     de6:	81 1c       	adc	r8, r1
     de8:	91 1c       	adc	r9, r1
     dea:	f4 01       	movw	r30, r8
     dec:	6a 2e       	mov	r6, r26
     dee:	11 92       	st	Z+, r1
     df0:	6a 94       	dec	r6
     df2:	e9 f7       	brne	.-6      	; 0xdee <__umoddi3+0x1a>
     df4:	29 83       	std	Y+1, r18	; 0x01
     df6:	3a 83       	std	Y+2, r19	; 0x02
     df8:	4b 83       	std	Y+3, r20	; 0x03
     dfa:	5c 83       	std	Y+4, r21	; 0x04
     dfc:	6d 83       	std	Y+5, r22	; 0x05
     dfe:	7e 83       	std	Y+6, r23	; 0x06
     e00:	8f 83       	std	Y+7, r24	; 0x07
     e02:	98 87       	std	Y+8, r25	; 0x08
     e04:	ce 01       	movw	r24, r28
     e06:	09 96       	adiw	r24, 0x09	; 9
     e08:	fc 01       	movw	r30, r24
     e0a:	11 92       	st	Z+, r1
     e0c:	aa 95       	dec	r26
     e0e:	e9 f7       	brne	.-6      	; 0xe0a <__umoddi3+0x36>
     e10:	a9 86       	std	Y+9, r10	; 0x09
     e12:	ba 86       	std	Y+10, r11	; 0x0a
     e14:	cb 86       	std	Y+11, r12	; 0x0b
     e16:	dc 86       	std	Y+12, r13	; 0x0c
     e18:	ed 86       	std	Y+13, r14	; 0x0d
     e1a:	fe 86       	std	Y+14, r15	; 0x0e
     e1c:	0f 87       	std	Y+15, r16	; 0x0f
     e1e:	18 8b       	std	Y+16, r17	; 0x10
     e20:	29 84       	ldd	r2, Y+9	; 0x09
     e22:	3a 84       	ldd	r3, Y+10	; 0x0a
     e24:	4b 84       	ldd	r4, Y+11	; 0x0b
     e26:	5c 84       	ldd	r5, Y+12	; 0x0c
     e28:	ad 84       	ldd	r10, Y+13	; 0x0d
     e2a:	be 84       	ldd	r11, Y+14	; 0x0e
     e2c:	cf 84       	ldd	r12, Y+15	; 0x0f
     e2e:	d8 88       	ldd	r13, Y+16	; 0x10
     e30:	29 81       	ldd	r18, Y+1	; 0x01
     e32:	3a 81       	ldd	r19, Y+2	; 0x02
     e34:	4b 81       	ldd	r20, Y+3	; 0x03
     e36:	5c 81       	ldd	r21, Y+4	; 0x04
     e38:	69 96       	adiw	r28, 0x19	; 25
     e3a:	2f af       	std	Y+63, r18	; 0x3f
     e3c:	69 97       	sbiw	r28, 0x19	; 25
     e3e:	6a 96       	adiw	r28, 0x1a	; 26
     e40:	3f af       	std	Y+63, r19	; 0x3f
     e42:	6a 97       	sbiw	r28, 0x1a	; 26
     e44:	6b 96       	adiw	r28, 0x1b	; 27
     e46:	4f af       	std	Y+63, r20	; 0x3f
     e48:	6b 97       	sbiw	r28, 0x1b	; 27
     e4a:	6c 96       	adiw	r28, 0x1c	; 28
     e4c:	5f af       	std	Y+63, r21	; 0x3f
     e4e:	6c 97       	sbiw	r28, 0x1c	; 28
     e50:	6c 96       	adiw	r28, 0x1c	; 28
     e52:	6c ac       	ldd	r6, Y+60	; 0x3c
     e54:	7d ac       	ldd	r7, Y+61	; 0x3d
     e56:	8e ac       	ldd	r8, Y+62	; 0x3e
     e58:	9f ac       	ldd	r9, Y+63	; 0x3f
     e5a:	6c 97       	sbiw	r28, 0x1c	; 28
     e5c:	69 aa       	std	Y+49, r6	; 0x31
     e5e:	7a aa       	std	Y+50, r7	; 0x32
     e60:	8b aa       	std	Y+51, r8	; 0x33
     e62:	9c aa       	std	Y+52, r9	; 0x34
     e64:	6d 81       	ldd	r22, Y+5	; 0x05
     e66:	7e 81       	ldd	r23, Y+6	; 0x06
     e68:	8f 81       	ldd	r24, Y+7	; 0x07
     e6a:	98 85       	ldd	r25, Y+8	; 0x08
     e6c:	3b 01       	movw	r6, r22
     e6e:	4c 01       	movw	r8, r24
     e70:	6d aa       	std	Y+53, r6	; 0x35
     e72:	7e aa       	std	Y+54, r7	; 0x36
     e74:	8f aa       	std	Y+55, r8	; 0x37
     e76:	98 ae       	std	Y+56, r9	; 0x38
     e78:	a1 14       	cp	r10, r1
     e7a:	b1 04       	cpc	r11, r1
     e7c:	c1 04       	cpc	r12, r1
     e7e:	d1 04       	cpc	r13, r1
     e80:	09 f0       	breq	.+2      	; 0xe84 <__umoddi3+0xb0>
     e82:	04 c3       	rjmp	.+1544   	; 0x148c <__umoddi3+0x6b8>
     e84:	62 14       	cp	r6, r2
     e86:	73 04       	cpc	r7, r3
     e88:	84 04       	cpc	r8, r4
     e8a:	95 04       	cpc	r9, r5
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <__umoddi3+0xbc>
     e8e:	00 c1       	rjmp	.+512    	; 0x1090 <__umoddi3+0x2bc>
     e90:	00 e0       	ldi	r16, 0x00	; 0
     e92:	20 16       	cp	r2, r16
     e94:	00 e0       	ldi	r16, 0x00	; 0
     e96:	30 06       	cpc	r3, r16
     e98:	01 e0       	ldi	r16, 0x01	; 1
     e9a:	40 06       	cpc	r4, r16
     e9c:	00 e0       	ldi	r16, 0x00	; 0
     e9e:	50 06       	cpc	r5, r16
     ea0:	88 f4       	brcc	.+34     	; 0xec4 <__umoddi3+0xf0>
     ea2:	1f ef       	ldi	r17, 0xFF	; 255
     ea4:	21 16       	cp	r2, r17
     ea6:	31 04       	cpc	r3, r1
     ea8:	41 04       	cpc	r4, r1
     eaa:	51 04       	cpc	r5, r1
     eac:	39 f0       	breq	.+14     	; 0xebc <__umoddi3+0xe8>
     eae:	30 f0       	brcs	.+12     	; 0xebc <__umoddi3+0xe8>
     eb0:	88 e0       	ldi	r24, 0x08	; 8
     eb2:	e8 2e       	mov	r14, r24
     eb4:	f1 2c       	mov	r15, r1
     eb6:	01 2d       	mov	r16, r1
     eb8:	11 2d       	mov	r17, r1
     eba:	18 c0       	rjmp	.+48     	; 0xeec <__umoddi3+0x118>
     ebc:	ee 24       	eor	r14, r14
     ebe:	ff 24       	eor	r15, r15
     ec0:	87 01       	movw	r16, r14
     ec2:	14 c0       	rjmp	.+40     	; 0xeec <__umoddi3+0x118>
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	24 16       	cp	r2, r20
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	34 06       	cpc	r3, r20
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	44 06       	cpc	r4, r20
     ed0:	41 e0       	ldi	r20, 0x01	; 1
     ed2:	54 06       	cpc	r5, r20
     ed4:	30 f0       	brcs	.+12     	; 0xee2 <__umoddi3+0x10e>
     ed6:	b8 e1       	ldi	r27, 0x18	; 24
     ed8:	eb 2e       	mov	r14, r27
     eda:	f1 2c       	mov	r15, r1
     edc:	01 2d       	mov	r16, r1
     ede:	11 2d       	mov	r17, r1
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <__umoddi3+0x118>
     ee2:	a0 e1       	ldi	r26, 0x10	; 16
     ee4:	ea 2e       	mov	r14, r26
     ee6:	f1 2c       	mov	r15, r1
     ee8:	01 2d       	mov	r16, r1
     eea:	11 2d       	mov	r17, r1
     eec:	d2 01       	movw	r26, r4
     eee:	c1 01       	movw	r24, r2
     ef0:	0e 2c       	mov	r0, r14
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <__umoddi3+0x128>
     ef4:	b6 95       	lsr	r27
     ef6:	a7 95       	ror	r26
     ef8:	97 95       	ror	r25
     efa:	87 95       	ror	r24
     efc:	0a 94       	dec	r0
     efe:	d2 f7       	brpl	.-12     	; 0xef4 <__umoddi3+0x120>
     f00:	86 5e       	subi	r24, 0xE6	; 230
     f02:	9e 4f       	sbci	r25, 0xFE	; 254
     f04:	dc 01       	movw	r26, r24
     f06:	2c 91       	ld	r18, X
     f08:	80 e2       	ldi	r24, 0x20	; 32
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	8e 19       	sub	r24, r14
     f12:	9f 09       	sbc	r25, r15
     f14:	a0 0b       	sbc	r26, r16
     f16:	b1 0b       	sbc	r27, r17
     f18:	5c 01       	movw	r10, r24
     f1a:	6d 01       	movw	r12, r26
     f1c:	a2 1a       	sub	r10, r18
     f1e:	b1 08       	sbc	r11, r1
     f20:	c1 08       	sbc	r12, r1
     f22:	d1 08       	sbc	r13, r1
     f24:	a9 ae       	std	Y+57, r10	; 0x39
     f26:	ba ae       	std	Y+58, r11	; 0x3a
     f28:	cb ae       	std	Y+59, r12	; 0x3b
     f2a:	dc ae       	std	Y+60, r13	; 0x3c
     f2c:	a1 14       	cp	r10, r1
     f2e:	b1 04       	cpc	r11, r1
     f30:	c1 04       	cpc	r12, r1
     f32:	d1 04       	cpc	r13, r1
     f34:	09 f4       	brne	.+2      	; 0xf38 <__umoddi3+0x164>
     f36:	3f c0       	rjmp	.+126    	; 0xfb6 <__umoddi3+0x1e2>
     f38:	69 ad       	ldd	r22, Y+57	; 0x39
     f3a:	06 2e       	mov	r0, r22
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <__umoddi3+0x172>
     f3e:	22 0c       	add	r2, r2
     f40:	33 1c       	adc	r3, r3
     f42:	44 1c       	adc	r4, r4
     f44:	55 1c       	adc	r5, r5
     f46:	0a 94       	dec	r0
     f48:	d2 f7       	brpl	.-12     	; 0xf3e <__umoddi3+0x16a>
     f4a:	a4 01       	movw	r20, r8
     f4c:	93 01       	movw	r18, r6
     f4e:	06 2e       	mov	r0, r22
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__umoddi3+0x186>
     f52:	22 0f       	add	r18, r18
     f54:	33 1f       	adc	r19, r19
     f56:	44 1f       	adc	r20, r20
     f58:	55 1f       	adc	r21, r21
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__umoddi3+0x17e>
     f5e:	80 e2       	ldi	r24, 0x20	; 32
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	8a 19       	sub	r24, r10
     f64:	9b 09       	sbc	r25, r11
     f66:	6c 96       	adiw	r28, 0x1c	; 28
     f68:	cc ac       	ldd	r12, Y+60	; 0x3c
     f6a:	dd ac       	ldd	r13, Y+61	; 0x3d
     f6c:	ee ac       	ldd	r14, Y+62	; 0x3e
     f6e:	ff ac       	ldd	r15, Y+63	; 0x3f
     f70:	6c 97       	sbiw	r28, 0x1c	; 28
     f72:	04 c0       	rjmp	.+8      	; 0xf7c <__umoddi3+0x1a8>
     f74:	f6 94       	lsr	r15
     f76:	e7 94       	ror	r14
     f78:	d7 94       	ror	r13
     f7a:	c7 94       	ror	r12
     f7c:	8a 95       	dec	r24
     f7e:	d2 f7       	brpl	.-12     	; 0xf74 <__umoddi3+0x1a0>
     f80:	87 01       	movw	r16, r14
     f82:	76 01       	movw	r14, r12
     f84:	e2 2a       	or	r14, r18
     f86:	f3 2a       	or	r15, r19
     f88:	04 2b       	or	r16, r20
     f8a:	15 2b       	or	r17, r21
     f8c:	ed aa       	std	Y+53, r14	; 0x35
     f8e:	fe aa       	std	Y+54, r15	; 0x36
     f90:	0f ab       	std	Y+55, r16	; 0x37
     f92:	18 af       	std	Y+56, r17	; 0x38
     f94:	6c 96       	adiw	r28, 0x1c	; 28
     f96:	8c ad       	ldd	r24, Y+60	; 0x3c
     f98:	9d ad       	ldd	r25, Y+61	; 0x3d
     f9a:	ae ad       	ldd	r26, Y+62	; 0x3e
     f9c:	bf ad       	ldd	r27, Y+63	; 0x3f
     f9e:	6c 97       	sbiw	r28, 0x1c	; 28
     fa0:	04 c0       	rjmp	.+8      	; 0xfaa <__umoddi3+0x1d6>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	aa 1f       	adc	r26, r26
     fa8:	bb 1f       	adc	r27, r27
     faa:	6a 95       	dec	r22
     fac:	d2 f7       	brpl	.-12     	; 0xfa2 <__umoddi3+0x1ce>
     fae:	89 ab       	std	Y+49, r24	; 0x31
     fb0:	9a ab       	std	Y+50, r25	; 0x32
     fb2:	ab ab       	std	Y+51, r26	; 0x33
     fb4:	bc ab       	std	Y+52, r27	; 0x34
     fb6:	32 01       	movw	r6, r4
     fb8:	88 24       	eor	r8, r8
     fba:	99 24       	eor	r9, r9
     fbc:	b2 01       	movw	r22, r4
     fbe:	a1 01       	movw	r20, r2
     fc0:	60 70       	andi	r22, 0x00	; 0
     fc2:	70 70       	andi	r23, 0x00	; 0
     fc4:	21 96       	adiw	r28, 0x01	; 1
     fc6:	4c af       	std	Y+60, r20	; 0x3c
     fc8:	5d af       	std	Y+61, r21	; 0x3d
     fca:	6e af       	std	Y+62, r22	; 0x3e
     fcc:	7f af       	std	Y+63, r23	; 0x3f
     fce:	21 97       	sbiw	r28, 0x01	; 1
     fd0:	6d a9       	ldd	r22, Y+53	; 0x35
     fd2:	7e a9       	ldd	r23, Y+54	; 0x36
     fd4:	8f a9       	ldd	r24, Y+55	; 0x37
     fd6:	98 ad       	ldd	r25, Y+56	; 0x38
     fd8:	a4 01       	movw	r20, r8
     fda:	93 01       	movw	r18, r6
     fdc:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     fe0:	7b 01       	movw	r14, r22
     fe2:	8c 01       	movw	r16, r24
     fe4:	6d a9       	ldd	r22, Y+53	; 0x35
     fe6:	7e a9       	ldd	r23, Y+54	; 0x36
     fe8:	8f a9       	ldd	r24, Y+55	; 0x37
     fea:	98 ad       	ldd	r25, Y+56	; 0x38
     fec:	a4 01       	movw	r20, r8
     fee:	93 01       	movw	r18, r6
     ff0:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
     ff4:	ca 01       	movw	r24, r20
     ff6:	b9 01       	movw	r22, r18
     ff8:	21 96       	adiw	r28, 0x01	; 1
     ffa:	2c ad       	ldd	r18, Y+60	; 0x3c
     ffc:	3d ad       	ldd	r19, Y+61	; 0x3d
     ffe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1000:	5f ad       	ldd	r21, Y+63	; 0x3f
    1002:	21 97       	sbiw	r28, 0x01	; 1
    1004:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
    1008:	9b 01       	movw	r18, r22
    100a:	ac 01       	movw	r20, r24
    100c:	87 01       	movw	r16, r14
    100e:	ff 24       	eor	r15, r15
    1010:	ee 24       	eor	r14, r14
    1012:	a9 a8       	ldd	r10, Y+49	; 0x31
    1014:	ba a8       	ldd	r11, Y+50	; 0x32
    1016:	cb a8       	ldd	r12, Y+51	; 0x33
    1018:	dc a8       	ldd	r13, Y+52	; 0x34
    101a:	c6 01       	movw	r24, r12
    101c:	aa 27       	eor	r26, r26
    101e:	bb 27       	eor	r27, r27
    1020:	57 01       	movw	r10, r14
    1022:	68 01       	movw	r12, r16
    1024:	a8 2a       	or	r10, r24
    1026:	b9 2a       	or	r11, r25
    1028:	ca 2a       	or	r12, r26
    102a:	db 2a       	or	r13, r27
    102c:	a2 16       	cp	r10, r18
    102e:	b3 06       	cpc	r11, r19
    1030:	c4 06       	cpc	r12, r20
    1032:	d5 06       	cpc	r13, r21
    1034:	90 f4       	brcc	.+36     	; 0x105a <__umoddi3+0x286>
    1036:	a2 0c       	add	r10, r2
    1038:	b3 1c       	adc	r11, r3
    103a:	c4 1c       	adc	r12, r4
    103c:	d5 1c       	adc	r13, r5
    103e:	a2 14       	cp	r10, r2
    1040:	b3 04       	cpc	r11, r3
    1042:	c4 04       	cpc	r12, r4
    1044:	d5 04       	cpc	r13, r5
    1046:	48 f0       	brcs	.+18     	; 0x105a <__umoddi3+0x286>
    1048:	a2 16       	cp	r10, r18
    104a:	b3 06       	cpc	r11, r19
    104c:	c4 06       	cpc	r12, r20
    104e:	d5 06       	cpc	r13, r21
    1050:	20 f4       	brcc	.+8      	; 0x105a <__umoddi3+0x286>
    1052:	a2 0c       	add	r10, r2
    1054:	b3 1c       	adc	r11, r3
    1056:	c4 1c       	adc	r12, r4
    1058:	d5 1c       	adc	r13, r5
    105a:	a2 1a       	sub	r10, r18
    105c:	b3 0a       	sbc	r11, r19
    105e:	c4 0a       	sbc	r12, r20
    1060:	d5 0a       	sbc	r13, r21
    1062:	c6 01       	movw	r24, r12
    1064:	b5 01       	movw	r22, r10
    1066:	a4 01       	movw	r20, r8
    1068:	93 01       	movw	r18, r6
    106a:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    106e:	7b 01       	movw	r14, r22
    1070:	8c 01       	movw	r16, r24
    1072:	c6 01       	movw	r24, r12
    1074:	b5 01       	movw	r22, r10
    1076:	a4 01       	movw	r20, r8
    1078:	93 01       	movw	r18, r6
    107a:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    107e:	ca 01       	movw	r24, r20
    1080:	b9 01       	movw	r22, r18
    1082:	21 96       	adiw	r28, 0x01	; 1
    1084:	2c ad       	ldd	r18, Y+60	; 0x3c
    1086:	3d ad       	ldd	r19, Y+61	; 0x3d
    1088:	4e ad       	ldd	r20, Y+62	; 0x3e
    108a:	5f ad       	ldd	r21, Y+63	; 0x3f
    108c:	21 97       	sbiw	r28, 0x01	; 1
    108e:	ba c1       	rjmp	.+884    	; 0x1404 <__umoddi3+0x630>
    1090:	21 14       	cp	r2, r1
    1092:	31 04       	cpc	r3, r1
    1094:	41 04       	cpc	r4, r1
    1096:	51 04       	cpc	r5, r1
    1098:	71 f4       	brne	.+28     	; 0x10b6 <__umoddi3+0x2e2>
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    10ae:	c9 01       	movw	r24, r18
    10b0:	da 01       	movw	r26, r20
    10b2:	1c 01       	movw	r2, r24
    10b4:	2d 01       	movw	r4, r26
    10b6:	00 e0       	ldi	r16, 0x00	; 0
    10b8:	20 16       	cp	r2, r16
    10ba:	00 e0       	ldi	r16, 0x00	; 0
    10bc:	30 06       	cpc	r3, r16
    10be:	01 e0       	ldi	r16, 0x01	; 1
    10c0:	40 06       	cpc	r4, r16
    10c2:	00 e0       	ldi	r16, 0x00	; 0
    10c4:	50 06       	cpc	r5, r16
    10c6:	88 f4       	brcc	.+34     	; 0x10ea <__umoddi3+0x316>
    10c8:	1f ef       	ldi	r17, 0xFF	; 255
    10ca:	21 16       	cp	r2, r17
    10cc:	31 04       	cpc	r3, r1
    10ce:	41 04       	cpc	r4, r1
    10d0:	51 04       	cpc	r5, r1
    10d2:	39 f0       	breq	.+14     	; 0x10e2 <__umoddi3+0x30e>
    10d4:	30 f0       	brcs	.+12     	; 0x10e2 <__umoddi3+0x30e>
    10d6:	68 e0       	ldi	r22, 0x08	; 8
    10d8:	e6 2e       	mov	r14, r22
    10da:	f1 2c       	mov	r15, r1
    10dc:	01 2d       	mov	r16, r1
    10de:	11 2d       	mov	r17, r1
    10e0:	18 c0       	rjmp	.+48     	; 0x1112 <__umoddi3+0x33e>
    10e2:	ee 24       	eor	r14, r14
    10e4:	ff 24       	eor	r15, r15
    10e6:	87 01       	movw	r16, r14
    10e8:	14 c0       	rjmp	.+40     	; 0x1112 <__umoddi3+0x33e>
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	24 16       	cp	r2, r20
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	34 06       	cpc	r3, r20
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	44 06       	cpc	r4, r20
    10f6:	41 e0       	ldi	r20, 0x01	; 1
    10f8:	54 06       	cpc	r5, r20
    10fa:	30 f0       	brcs	.+12     	; 0x1108 <__umoddi3+0x334>
    10fc:	58 e1       	ldi	r21, 0x18	; 24
    10fe:	e5 2e       	mov	r14, r21
    1100:	f1 2c       	mov	r15, r1
    1102:	01 2d       	mov	r16, r1
    1104:	11 2d       	mov	r17, r1
    1106:	05 c0       	rjmp	.+10     	; 0x1112 <__umoddi3+0x33e>
    1108:	40 e1       	ldi	r20, 0x10	; 16
    110a:	e4 2e       	mov	r14, r20
    110c:	f1 2c       	mov	r15, r1
    110e:	01 2d       	mov	r16, r1
    1110:	11 2d       	mov	r17, r1
    1112:	d2 01       	movw	r26, r4
    1114:	c1 01       	movw	r24, r2
    1116:	0e 2c       	mov	r0, r14
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <__umoddi3+0x34e>
    111a:	b6 95       	lsr	r27
    111c:	a7 95       	ror	r26
    111e:	97 95       	ror	r25
    1120:	87 95       	ror	r24
    1122:	0a 94       	dec	r0
    1124:	d2 f7       	brpl	.-12     	; 0x111a <__umoddi3+0x346>
    1126:	86 5e       	subi	r24, 0xE6	; 230
    1128:	9e 4f       	sbci	r25, 0xFE	; 254
    112a:	dc 01       	movw	r26, r24
    112c:	2c 91       	ld	r18, X
    112e:	30 e2       	ldi	r19, 0x20	; 32
    1130:	a3 2e       	mov	r10, r19
    1132:	b1 2c       	mov	r11, r1
    1134:	c1 2c       	mov	r12, r1
    1136:	d1 2c       	mov	r13, r1
    1138:	d6 01       	movw	r26, r12
    113a:	c5 01       	movw	r24, r10
    113c:	8e 19       	sub	r24, r14
    113e:	9f 09       	sbc	r25, r15
    1140:	a0 0b       	sbc	r26, r16
    1142:	b1 0b       	sbc	r27, r17
    1144:	7c 01       	movw	r14, r24
    1146:	8d 01       	movw	r16, r26
    1148:	e2 1a       	sub	r14, r18
    114a:	f1 08       	sbc	r15, r1
    114c:	01 09       	sbc	r16, r1
    114e:	11 09       	sbc	r17, r1
    1150:	e9 ae       	std	Y+57, r14	; 0x39
    1152:	fa ae       	std	Y+58, r15	; 0x3a
    1154:	0b af       	std	Y+59, r16	; 0x3b
    1156:	1c af       	std	Y+60, r17	; 0x3c
    1158:	e1 14       	cp	r14, r1
    115a:	f1 04       	cpc	r15, r1
    115c:	01 05       	cpc	r16, r1
    115e:	11 05       	cpc	r17, r1
    1160:	39 f4       	brne	.+14     	; 0x1170 <__umoddi3+0x39c>
    1162:	64 01       	movw	r12, r8
    1164:	53 01       	movw	r10, r6
    1166:	a2 18       	sub	r10, r2
    1168:	b3 08       	sbc	r11, r3
    116a:	c4 08       	sbc	r12, r4
    116c:	d5 08       	sbc	r13, r5
    116e:	e2 c0       	rjmp	.+452    	; 0x1334 <__umoddi3+0x560>
    1170:	f9 ac       	ldd	r15, Y+57	; 0x39
    1172:	68 96       	adiw	r28, 0x18	; 24
    1174:	ff ae       	std	Y+63, r15	; 0x3f
    1176:	68 97       	sbiw	r28, 0x18	; 24
    1178:	0f 2c       	mov	r0, r15
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <__umoddi3+0x3b0>
    117c:	22 0c       	add	r2, r2
    117e:	33 1c       	adc	r3, r3
    1180:	44 1c       	adc	r4, r4
    1182:	55 1c       	adc	r5, r5
    1184:	0a 94       	dec	r0
    1186:	d2 f7       	brpl	.-12     	; 0x117c <__umoddi3+0x3a8>
    1188:	8a 2d       	mov	r24, r10
    118a:	8f 19       	sub	r24, r15
    118c:	64 01       	movw	r12, r8
    118e:	53 01       	movw	r10, r6
    1190:	08 2e       	mov	r0, r24
    1192:	04 c0       	rjmp	.+8      	; 0x119c <__umoddi3+0x3c8>
    1194:	d6 94       	lsr	r13
    1196:	c7 94       	ror	r12
    1198:	b7 94       	ror	r11
    119a:	a7 94       	ror	r10
    119c:	0a 94       	dec	r0
    119e:	d2 f7       	brpl	.-12     	; 0x1194 <__umoddi3+0x3c0>
    11a0:	a4 01       	movw	r20, r8
    11a2:	93 01       	movw	r18, r6
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <__umoddi3+0x3da>
    11a6:	22 0f       	add	r18, r18
    11a8:	33 1f       	adc	r19, r19
    11aa:	44 1f       	adc	r20, r20
    11ac:	55 1f       	adc	r21, r21
    11ae:	fa 94       	dec	r15
    11b0:	d2 f7       	brpl	.-12     	; 0x11a6 <__umoddi3+0x3d2>
    11b2:	6c 96       	adiw	r28, 0x1c	; 28
    11b4:	6c ac       	ldd	r6, Y+60	; 0x3c
    11b6:	7d ac       	ldd	r7, Y+61	; 0x3d
    11b8:	8e ac       	ldd	r8, Y+62	; 0x3e
    11ba:	9f ac       	ldd	r9, Y+63	; 0x3f
    11bc:	6c 97       	sbiw	r28, 0x1c	; 28
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <__umoddi3+0x3f4>
    11c0:	96 94       	lsr	r9
    11c2:	87 94       	ror	r8
    11c4:	77 94       	ror	r7
    11c6:	67 94       	ror	r6
    11c8:	8a 95       	dec	r24
    11ca:	d2 f7       	brpl	.-12     	; 0x11c0 <__umoddi3+0x3ec>
    11cc:	84 01       	movw	r16, r8
    11ce:	73 01       	movw	r14, r6
    11d0:	e2 2a       	or	r14, r18
    11d2:	f3 2a       	or	r15, r19
    11d4:	04 2b       	or	r16, r20
    11d6:	15 2b       	or	r17, r21
    11d8:	ed a6       	std	Y+45, r14	; 0x2d
    11da:	fe a6       	std	Y+46, r15	; 0x2e
    11dc:	0f a7       	std	Y+47, r16	; 0x2f
    11de:	18 ab       	std	Y+48, r17	; 0x30
    11e0:	32 01       	movw	r6, r4
    11e2:	88 24       	eor	r8, r8
    11e4:	99 24       	eor	r9, r9
    11e6:	b2 01       	movw	r22, r4
    11e8:	a1 01       	movw	r20, r2
    11ea:	60 70       	andi	r22, 0x00	; 0
    11ec:	70 70       	andi	r23, 0x00	; 0
    11ee:	25 96       	adiw	r28, 0x05	; 5
    11f0:	4c af       	std	Y+60, r20	; 0x3c
    11f2:	5d af       	std	Y+61, r21	; 0x3d
    11f4:	6e af       	std	Y+62, r22	; 0x3e
    11f6:	7f af       	std	Y+63, r23	; 0x3f
    11f8:	25 97       	sbiw	r28, 0x05	; 5
    11fa:	c6 01       	movw	r24, r12
    11fc:	b5 01       	movw	r22, r10
    11fe:	a4 01       	movw	r20, r8
    1200:	93 01       	movw	r18, r6
    1202:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    1206:	7b 01       	movw	r14, r22
    1208:	8c 01       	movw	r16, r24
    120a:	c6 01       	movw	r24, r12
    120c:	b5 01       	movw	r22, r10
    120e:	a4 01       	movw	r20, r8
    1210:	93 01       	movw	r18, r6
    1212:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    1216:	ca 01       	movw	r24, r20
    1218:	b9 01       	movw	r22, r18
    121a:	25 96       	adiw	r28, 0x05	; 5
    121c:	2c ad       	ldd	r18, Y+60	; 0x3c
    121e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1220:	4e ad       	ldd	r20, Y+62	; 0x3e
    1222:	5f ad       	ldd	r21, Y+63	; 0x3f
    1224:	25 97       	sbiw	r28, 0x05	; 5
    1226:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
    122a:	9b 01       	movw	r18, r22
    122c:	ac 01       	movw	r20, r24
    122e:	87 01       	movw	r16, r14
    1230:	ff 24       	eor	r15, r15
    1232:	ee 24       	eor	r14, r14
    1234:	ad a4       	ldd	r10, Y+45	; 0x2d
    1236:	be a4       	ldd	r11, Y+46	; 0x2e
    1238:	cf a4       	ldd	r12, Y+47	; 0x2f
    123a:	d8 a8       	ldd	r13, Y+48	; 0x30
    123c:	c6 01       	movw	r24, r12
    123e:	aa 27       	eor	r26, r26
    1240:	bb 27       	eor	r27, r27
    1242:	5c 01       	movw	r10, r24
    1244:	6d 01       	movw	r12, r26
    1246:	ae 28       	or	r10, r14
    1248:	bf 28       	or	r11, r15
    124a:	c0 2a       	or	r12, r16
    124c:	d1 2a       	or	r13, r17
    124e:	a2 16       	cp	r10, r18
    1250:	b3 06       	cpc	r11, r19
    1252:	c4 06       	cpc	r12, r20
    1254:	d5 06       	cpc	r13, r21
    1256:	90 f4       	brcc	.+36     	; 0x127c <__umoddi3+0x4a8>
    1258:	a2 0c       	add	r10, r2
    125a:	b3 1c       	adc	r11, r3
    125c:	c4 1c       	adc	r12, r4
    125e:	d5 1c       	adc	r13, r5
    1260:	a2 14       	cp	r10, r2
    1262:	b3 04       	cpc	r11, r3
    1264:	c4 04       	cpc	r12, r4
    1266:	d5 04       	cpc	r13, r5
    1268:	48 f0       	brcs	.+18     	; 0x127c <__umoddi3+0x4a8>
    126a:	a2 16       	cp	r10, r18
    126c:	b3 06       	cpc	r11, r19
    126e:	c4 06       	cpc	r12, r20
    1270:	d5 06       	cpc	r13, r21
    1272:	20 f4       	brcc	.+8      	; 0x127c <__umoddi3+0x4a8>
    1274:	a2 0c       	add	r10, r2
    1276:	b3 1c       	adc	r11, r3
    1278:	c4 1c       	adc	r12, r4
    127a:	d5 1c       	adc	r13, r5
    127c:	a2 1a       	sub	r10, r18
    127e:	b3 0a       	sbc	r11, r19
    1280:	c4 0a       	sbc	r12, r20
    1282:	d5 0a       	sbc	r13, r21
    1284:	c6 01       	movw	r24, r12
    1286:	b5 01       	movw	r22, r10
    1288:	a4 01       	movw	r20, r8
    128a:	93 01       	movw	r18, r6
    128c:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    1290:	7b 01       	movw	r14, r22
    1292:	8c 01       	movw	r16, r24
    1294:	c6 01       	movw	r24, r12
    1296:	b5 01       	movw	r22, r10
    1298:	a4 01       	movw	r20, r8
    129a:	93 01       	movw	r18, r6
    129c:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    12a0:	ca 01       	movw	r24, r20
    12a2:	b9 01       	movw	r22, r18
    12a4:	25 96       	adiw	r28, 0x05	; 5
    12a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    12a8:	3d ad       	ldd	r19, Y+61	; 0x3d
    12aa:	4e ad       	ldd	r20, Y+62	; 0x3e
    12ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    12ae:	25 97       	sbiw	r28, 0x05	; 5
    12b0:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
    12b4:	9b 01       	movw	r18, r22
    12b6:	ac 01       	movw	r20, r24
    12b8:	87 01       	movw	r16, r14
    12ba:	ff 24       	eor	r15, r15
    12bc:	ee 24       	eor	r14, r14
    12be:	8d a5       	ldd	r24, Y+45	; 0x2d
    12c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    12c2:	af a5       	ldd	r26, Y+47	; 0x2f
    12c4:	b8 a9       	ldd	r27, Y+48	; 0x30
    12c6:	a0 70       	andi	r26, 0x00	; 0
    12c8:	b0 70       	andi	r27, 0x00	; 0
    12ca:	57 01       	movw	r10, r14
    12cc:	68 01       	movw	r12, r16
    12ce:	a8 2a       	or	r10, r24
    12d0:	b9 2a       	or	r11, r25
    12d2:	ca 2a       	or	r12, r26
    12d4:	db 2a       	or	r13, r27
    12d6:	a2 16       	cp	r10, r18
    12d8:	b3 06       	cpc	r11, r19
    12da:	c4 06       	cpc	r12, r20
    12dc:	d5 06       	cpc	r13, r21
    12de:	90 f4       	brcc	.+36     	; 0x1304 <__umoddi3+0x530>
    12e0:	a2 0c       	add	r10, r2
    12e2:	b3 1c       	adc	r11, r3
    12e4:	c4 1c       	adc	r12, r4
    12e6:	d5 1c       	adc	r13, r5
    12e8:	a2 14       	cp	r10, r2
    12ea:	b3 04       	cpc	r11, r3
    12ec:	c4 04       	cpc	r12, r4
    12ee:	d5 04       	cpc	r13, r5
    12f0:	48 f0       	brcs	.+18     	; 0x1304 <__umoddi3+0x530>
    12f2:	a2 16       	cp	r10, r18
    12f4:	b3 06       	cpc	r11, r19
    12f6:	c4 06       	cpc	r12, r20
    12f8:	d5 06       	cpc	r13, r21
    12fa:	20 f4       	brcc	.+8      	; 0x1304 <__umoddi3+0x530>
    12fc:	a2 0c       	add	r10, r2
    12fe:	b3 1c       	adc	r11, r3
    1300:	c4 1c       	adc	r12, r4
    1302:	d5 1c       	adc	r13, r5
    1304:	6c 96       	adiw	r28, 0x1c	; 28
    1306:	ec ac       	ldd	r14, Y+60	; 0x3c
    1308:	fd ac       	ldd	r15, Y+61	; 0x3d
    130a:	0e ad       	ldd	r16, Y+62	; 0x3e
    130c:	1f ad       	ldd	r17, Y+63	; 0x3f
    130e:	6c 97       	sbiw	r28, 0x1c	; 28
    1310:	68 96       	adiw	r28, 0x18	; 24
    1312:	0f ac       	ldd	r0, Y+63	; 0x3f
    1314:	68 97       	sbiw	r28, 0x18	; 24
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <__umoddi3+0x54c>
    1318:	ee 0c       	add	r14, r14
    131a:	ff 1c       	adc	r15, r15
    131c:	00 1f       	adc	r16, r16
    131e:	11 1f       	adc	r17, r17
    1320:	0a 94       	dec	r0
    1322:	d2 f7       	brpl	.-12     	; 0x1318 <__umoddi3+0x544>
    1324:	e9 aa       	std	Y+49, r14	; 0x31
    1326:	fa aa       	std	Y+50, r15	; 0x32
    1328:	0b ab       	std	Y+51, r16	; 0x33
    132a:	1c ab       	std	Y+52, r17	; 0x34
    132c:	a2 1a       	sub	r10, r18
    132e:	b3 0a       	sbc	r11, r19
    1330:	c4 0a       	sbc	r12, r20
    1332:	d5 0a       	sbc	r13, r21
    1334:	32 01       	movw	r6, r4
    1336:	88 24       	eor	r8, r8
    1338:	99 24       	eor	r9, r9
    133a:	b2 01       	movw	r22, r4
    133c:	a1 01       	movw	r20, r2
    133e:	60 70       	andi	r22, 0x00	; 0
    1340:	70 70       	andi	r23, 0x00	; 0
    1342:	29 96       	adiw	r28, 0x09	; 9
    1344:	4c af       	std	Y+60, r20	; 0x3c
    1346:	5d af       	std	Y+61, r21	; 0x3d
    1348:	6e af       	std	Y+62, r22	; 0x3e
    134a:	7f af       	std	Y+63, r23	; 0x3f
    134c:	29 97       	sbiw	r28, 0x09	; 9
    134e:	c6 01       	movw	r24, r12
    1350:	b5 01       	movw	r22, r10
    1352:	a4 01       	movw	r20, r8
    1354:	93 01       	movw	r18, r6
    1356:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    135a:	7b 01       	movw	r14, r22
    135c:	8c 01       	movw	r16, r24
    135e:	c6 01       	movw	r24, r12
    1360:	b5 01       	movw	r22, r10
    1362:	a4 01       	movw	r20, r8
    1364:	93 01       	movw	r18, r6
    1366:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    136a:	ca 01       	movw	r24, r20
    136c:	b9 01       	movw	r22, r18
    136e:	29 96       	adiw	r28, 0x09	; 9
    1370:	2c ad       	ldd	r18, Y+60	; 0x3c
    1372:	3d ad       	ldd	r19, Y+61	; 0x3d
    1374:	4e ad       	ldd	r20, Y+62	; 0x3e
    1376:	5f ad       	ldd	r21, Y+63	; 0x3f
    1378:	29 97       	sbiw	r28, 0x09	; 9
    137a:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
    137e:	9b 01       	movw	r18, r22
    1380:	ac 01       	movw	r20, r24
    1382:	87 01       	movw	r16, r14
    1384:	ff 24       	eor	r15, r15
    1386:	ee 24       	eor	r14, r14
    1388:	a9 a8       	ldd	r10, Y+49	; 0x31
    138a:	ba a8       	ldd	r11, Y+50	; 0x32
    138c:	cb a8       	ldd	r12, Y+51	; 0x33
    138e:	dc a8       	ldd	r13, Y+52	; 0x34
    1390:	c6 01       	movw	r24, r12
    1392:	aa 27       	eor	r26, r26
    1394:	bb 27       	eor	r27, r27
    1396:	57 01       	movw	r10, r14
    1398:	68 01       	movw	r12, r16
    139a:	a8 2a       	or	r10, r24
    139c:	b9 2a       	or	r11, r25
    139e:	ca 2a       	or	r12, r26
    13a0:	db 2a       	or	r13, r27
    13a2:	a2 16       	cp	r10, r18
    13a4:	b3 06       	cpc	r11, r19
    13a6:	c4 06       	cpc	r12, r20
    13a8:	d5 06       	cpc	r13, r21
    13aa:	90 f4       	brcc	.+36     	; 0x13d0 <__umoddi3+0x5fc>
    13ac:	a2 0c       	add	r10, r2
    13ae:	b3 1c       	adc	r11, r3
    13b0:	c4 1c       	adc	r12, r4
    13b2:	d5 1c       	adc	r13, r5
    13b4:	a2 14       	cp	r10, r2
    13b6:	b3 04       	cpc	r11, r3
    13b8:	c4 04       	cpc	r12, r4
    13ba:	d5 04       	cpc	r13, r5
    13bc:	48 f0       	brcs	.+18     	; 0x13d0 <__umoddi3+0x5fc>
    13be:	a2 16       	cp	r10, r18
    13c0:	b3 06       	cpc	r11, r19
    13c2:	c4 06       	cpc	r12, r20
    13c4:	d5 06       	cpc	r13, r21
    13c6:	20 f4       	brcc	.+8      	; 0x13d0 <__umoddi3+0x5fc>
    13c8:	a2 0c       	add	r10, r2
    13ca:	b3 1c       	adc	r11, r3
    13cc:	c4 1c       	adc	r12, r4
    13ce:	d5 1c       	adc	r13, r5
    13d0:	a2 1a       	sub	r10, r18
    13d2:	b3 0a       	sbc	r11, r19
    13d4:	c4 0a       	sbc	r12, r20
    13d6:	d5 0a       	sbc	r13, r21
    13d8:	c6 01       	movw	r24, r12
    13da:	b5 01       	movw	r22, r10
    13dc:	a4 01       	movw	r20, r8
    13de:	93 01       	movw	r18, r6
    13e0:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    13e4:	7b 01       	movw	r14, r22
    13e6:	8c 01       	movw	r16, r24
    13e8:	c6 01       	movw	r24, r12
    13ea:	b5 01       	movw	r22, r10
    13ec:	a4 01       	movw	r20, r8
    13ee:	93 01       	movw	r18, r6
    13f0:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    13f4:	ca 01       	movw	r24, r20
    13f6:	b9 01       	movw	r22, r18
    13f8:	29 96       	adiw	r28, 0x09	; 9
    13fa:	2c ad       	ldd	r18, Y+60	; 0x3c
    13fc:	3d ad       	ldd	r19, Y+61	; 0x3d
    13fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1400:	5f ad       	ldd	r21, Y+63	; 0x3f
    1402:	29 97       	sbiw	r28, 0x09	; 9
    1404:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
    1408:	9b 01       	movw	r18, r22
    140a:	ac 01       	movw	r20, r24
    140c:	87 01       	movw	r16, r14
    140e:	ff 24       	eor	r15, r15
    1410:	ee 24       	eor	r14, r14
    1412:	89 a9       	ldd	r24, Y+49	; 0x31
    1414:	9a a9       	ldd	r25, Y+50	; 0x32
    1416:	ab a9       	ldd	r26, Y+51	; 0x33
    1418:	bc a9       	ldd	r27, Y+52	; 0x34
    141a:	a0 70       	andi	r26, 0x00	; 0
    141c:	b0 70       	andi	r27, 0x00	; 0
    141e:	e8 2a       	or	r14, r24
    1420:	f9 2a       	or	r15, r25
    1422:	0a 2b       	or	r16, r26
    1424:	1b 2b       	or	r17, r27
    1426:	e2 16       	cp	r14, r18
    1428:	f3 06       	cpc	r15, r19
    142a:	04 07       	cpc	r16, r20
    142c:	15 07       	cpc	r17, r21
    142e:	90 f4       	brcc	.+36     	; 0x1454 <__umoddi3+0x680>
    1430:	e2 0c       	add	r14, r2
    1432:	f3 1c       	adc	r15, r3
    1434:	04 1d       	adc	r16, r4
    1436:	15 1d       	adc	r17, r5
    1438:	e2 14       	cp	r14, r2
    143a:	f3 04       	cpc	r15, r3
    143c:	04 05       	cpc	r16, r4
    143e:	15 05       	cpc	r17, r5
    1440:	48 f0       	brcs	.+18     	; 0x1454 <__umoddi3+0x680>
    1442:	e2 16       	cp	r14, r18
    1444:	f3 06       	cpc	r15, r19
    1446:	04 07       	cpc	r16, r20
    1448:	15 07       	cpc	r17, r21
    144a:	20 f4       	brcc	.+8      	; 0x1454 <__umoddi3+0x680>
    144c:	e2 0c       	add	r14, r2
    144e:	f3 1c       	adc	r15, r3
    1450:	04 1d       	adc	r16, r4
    1452:	15 1d       	adc	r17, r5
    1454:	e2 1a       	sub	r14, r18
    1456:	f3 0a       	sbc	r15, r19
    1458:	04 0b       	sbc	r16, r20
    145a:	15 0b       	sbc	r17, r21
    145c:	d8 01       	movw	r26, r16
    145e:	c7 01       	movw	r24, r14
    1460:	09 ac       	ldd	r0, Y+57	; 0x39
    1462:	04 c0       	rjmp	.+8      	; 0x146c <__umoddi3+0x698>
    1464:	b6 95       	lsr	r27
    1466:	a7 95       	ror	r26
    1468:	97 95       	ror	r25
    146a:	87 95       	ror	r24
    146c:	0a 94       	dec	r0
    146e:	d2 f7       	brpl	.-12     	; 0x1464 <__umoddi3+0x690>
    1470:	89 8b       	std	Y+17, r24	; 0x11
    1472:	9a 8b       	std	Y+18, r25	; 0x12
    1474:	ab 8b       	std	Y+19, r26	; 0x13
    1476:	bc 8b       	std	Y+20, r27	; 0x14
    1478:	1d 8a       	std	Y+21, r1	; 0x15
    147a:	1e 8a       	std	Y+22, r1	; 0x16
    147c:	1f 8a       	std	Y+23, r1	; 0x17
    147e:	18 8e       	std	Y+24, r1	; 0x18
    1480:	28 2f       	mov	r18, r24
    1482:	3a 89       	ldd	r19, Y+18	; 0x12
    1484:	4b 89       	ldd	r20, Y+19	; 0x13
    1486:	5c 89       	ldd	r21, Y+20	; 0x14
    1488:	6d 89       	ldd	r22, Y+21	; 0x15
    148a:	0c c3       	rjmp	.+1560   	; 0x1aa4 <__umoddi3+0xcd0>
    148c:	6a 14       	cp	r6, r10
    148e:	7b 04       	cpc	r7, r11
    1490:	8c 04       	cpc	r8, r12
    1492:	9d 04       	cpc	r9, r13
    1494:	08 f4       	brcc	.+2      	; 0x1498 <__umoddi3+0x6c4>
    1496:	09 c3       	rjmp	.+1554   	; 0x1aaa <__umoddi3+0xcd6>
    1498:	00 e0       	ldi	r16, 0x00	; 0
    149a:	a0 16       	cp	r10, r16
    149c:	00 e0       	ldi	r16, 0x00	; 0
    149e:	b0 06       	cpc	r11, r16
    14a0:	01 e0       	ldi	r16, 0x01	; 1
    14a2:	c0 06       	cpc	r12, r16
    14a4:	00 e0       	ldi	r16, 0x00	; 0
    14a6:	d0 06       	cpc	r13, r16
    14a8:	88 f4       	brcc	.+34     	; 0x14cc <__umoddi3+0x6f8>
    14aa:	1f ef       	ldi	r17, 0xFF	; 255
    14ac:	a1 16       	cp	r10, r17
    14ae:	b1 04       	cpc	r11, r1
    14b0:	c1 04       	cpc	r12, r1
    14b2:	d1 04       	cpc	r13, r1
    14b4:	39 f0       	breq	.+14     	; 0x14c4 <__umoddi3+0x6f0>
    14b6:	30 f0       	brcs	.+12     	; 0x14c4 <__umoddi3+0x6f0>
    14b8:	28 e0       	ldi	r18, 0x08	; 8
    14ba:	e2 2e       	mov	r14, r18
    14bc:	f1 2c       	mov	r15, r1
    14be:	01 2d       	mov	r16, r1
    14c0:	11 2d       	mov	r17, r1
    14c2:	18 c0       	rjmp	.+48     	; 0x14f4 <__umoddi3+0x720>
    14c4:	ee 24       	eor	r14, r14
    14c6:	ff 24       	eor	r15, r15
    14c8:	87 01       	movw	r16, r14
    14ca:	14 c0       	rjmp	.+40     	; 0x14f4 <__umoddi3+0x720>
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	a4 16       	cp	r10, r20
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	b4 06       	cpc	r11, r20
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	c4 06       	cpc	r12, r20
    14d8:	41 e0       	ldi	r20, 0x01	; 1
    14da:	d4 06       	cpc	r13, r20
    14dc:	30 f0       	brcs	.+12     	; 0x14ea <__umoddi3+0x716>
    14de:	98 e1       	ldi	r25, 0x18	; 24
    14e0:	e9 2e       	mov	r14, r25
    14e2:	f1 2c       	mov	r15, r1
    14e4:	01 2d       	mov	r16, r1
    14e6:	11 2d       	mov	r17, r1
    14e8:	05 c0       	rjmp	.+10     	; 0x14f4 <__umoddi3+0x720>
    14ea:	80 e1       	ldi	r24, 0x10	; 16
    14ec:	e8 2e       	mov	r14, r24
    14ee:	f1 2c       	mov	r15, r1
    14f0:	01 2d       	mov	r16, r1
    14f2:	11 2d       	mov	r17, r1
    14f4:	d6 01       	movw	r26, r12
    14f6:	c5 01       	movw	r24, r10
    14f8:	0e 2c       	mov	r0, r14
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <__umoddi3+0x730>
    14fc:	b6 95       	lsr	r27
    14fe:	a7 95       	ror	r26
    1500:	97 95       	ror	r25
    1502:	87 95       	ror	r24
    1504:	0a 94       	dec	r0
    1506:	d2 f7       	brpl	.-12     	; 0x14fc <__umoddi3+0x728>
    1508:	86 5e       	subi	r24, 0xE6	; 230
    150a:	9e 4f       	sbci	r25, 0xFE	; 254
    150c:	dc 01       	movw	r26, r24
    150e:	2c 91       	ld	r18, X
    1510:	80 e2       	ldi	r24, 0x20	; 32
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a0 e0       	ldi	r26, 0x00	; 0
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	8e 19       	sub	r24, r14
    151a:	9f 09       	sbc	r25, r15
    151c:	a0 0b       	sbc	r26, r16
    151e:	b1 0b       	sbc	r27, r17
    1520:	82 1b       	sub	r24, r18
    1522:	91 09       	sbc	r25, r1
    1524:	a1 09       	sbc	r26, r1
    1526:	b1 09       	sbc	r27, r1
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	a1 05       	cpc	r26, r1
    152c:	b1 05       	cpc	r27, r1
    152e:	09 f0       	breq	.+2      	; 0x1532 <__umoddi3+0x75e>
    1530:	4f c0       	rjmp	.+158    	; 0x15d0 <__umoddi3+0x7fc>
    1532:	a6 14       	cp	r10, r6
    1534:	b7 04       	cpc	r11, r7
    1536:	c8 04       	cpc	r12, r8
    1538:	d9 04       	cpc	r13, r9
    153a:	58 f0       	brcs	.+22     	; 0x1552 <__umoddi3+0x77e>
    153c:	6c 96       	adiw	r28, 0x1c	; 28
    153e:	ec ac       	ldd	r14, Y+60	; 0x3c
    1540:	fd ac       	ldd	r15, Y+61	; 0x3d
    1542:	0e ad       	ldd	r16, Y+62	; 0x3e
    1544:	1f ad       	ldd	r17, Y+63	; 0x3f
    1546:	6c 97       	sbiw	r28, 0x1c	; 28
    1548:	e2 14       	cp	r14, r2
    154a:	f3 04       	cpc	r15, r3
    154c:	04 05       	cpc	r16, r4
    154e:	15 05       	cpc	r17, r5
    1550:	68 f1       	brcs	.+90     	; 0x15ac <__umoddi3+0x7d8>
    1552:	6c 96       	adiw	r28, 0x1c	; 28
    1554:	ec ac       	ldd	r14, Y+60	; 0x3c
    1556:	fd ac       	ldd	r15, Y+61	; 0x3d
    1558:	0e ad       	ldd	r16, Y+62	; 0x3e
    155a:	1f ad       	ldd	r17, Y+63	; 0x3f
    155c:	6c 97       	sbiw	r28, 0x1c	; 28
    155e:	e2 18       	sub	r14, r2
    1560:	f3 08       	sbc	r15, r3
    1562:	04 09       	sbc	r16, r4
    1564:	15 09       	sbc	r17, r5
    1566:	a4 01       	movw	r20, r8
    1568:	93 01       	movw	r18, r6
    156a:	2a 19       	sub	r18, r10
    156c:	3b 09       	sbc	r19, r11
    156e:	4c 09       	sbc	r20, r12
    1570:	5d 09       	sbc	r21, r13
    1572:	aa 24       	eor	r10, r10
    1574:	bb 24       	eor	r11, r11
    1576:	65 01       	movw	r12, r10
    1578:	6c 96       	adiw	r28, 0x1c	; 28
    157a:	6c ad       	ldd	r22, Y+60	; 0x3c
    157c:	7d ad       	ldd	r23, Y+61	; 0x3d
    157e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1580:	9f ad       	ldd	r25, Y+63	; 0x3f
    1582:	6c 97       	sbiw	r28, 0x1c	; 28
    1584:	6e 15       	cp	r22, r14
    1586:	7f 05       	cpc	r23, r15
    1588:	80 07       	cpc	r24, r16
    158a:	91 07       	cpc	r25, r17
    158c:	28 f4       	brcc	.+10     	; 0x1598 <__umoddi3+0x7c4>
    158e:	b1 e0       	ldi	r27, 0x01	; 1
    1590:	ab 2e       	mov	r10, r27
    1592:	b1 2c       	mov	r11, r1
    1594:	c1 2c       	mov	r12, r1
    1596:	d1 2c       	mov	r13, r1
    1598:	da 01       	movw	r26, r20
    159a:	c9 01       	movw	r24, r18
    159c:	8a 19       	sub	r24, r10
    159e:	9b 09       	sbc	r25, r11
    15a0:	ac 09       	sbc	r26, r12
    15a2:	bd 09       	sbc	r27, r13
    15a4:	8d ab       	std	Y+53, r24	; 0x35
    15a6:	9e ab       	std	Y+54, r25	; 0x36
    15a8:	af ab       	std	Y+55, r26	; 0x37
    15aa:	b8 af       	std	Y+56, r27	; 0x38
    15ac:	e9 8a       	std	Y+17, r14	; 0x11
    15ae:	fa 8a       	std	Y+18, r15	; 0x12
    15b0:	0b 8b       	std	Y+19, r16	; 0x13
    15b2:	1c 8b       	std	Y+20, r17	; 0x14
    15b4:	6d a8       	ldd	r6, Y+53	; 0x35
    15b6:	7e a8       	ldd	r7, Y+54	; 0x36
    15b8:	8f a8       	ldd	r8, Y+55	; 0x37
    15ba:	98 ac       	ldd	r9, Y+56	; 0x38
    15bc:	6d 8a       	std	Y+21, r6	; 0x15
    15be:	7e 8a       	std	Y+22, r7	; 0x16
    15c0:	8f 8a       	std	Y+23, r8	; 0x17
    15c2:	98 8e       	std	Y+24, r9	; 0x18
    15c4:	2e 2d       	mov	r18, r14
    15c6:	3a 89       	ldd	r19, Y+18	; 0x12
    15c8:	4b 89       	ldd	r20, Y+19	; 0x13
    15ca:	5c 89       	ldd	r21, Y+20	; 0x14
    15cc:	6d a9       	ldd	r22, Y+53	; 0x35
    15ce:	6a c2       	rjmp	.+1236   	; 0x1aa4 <__umoddi3+0xcd0>
    15d0:	67 96       	adiw	r28, 0x17	; 23
    15d2:	8f af       	std	Y+63, r24	; 0x3f
    15d4:	67 97       	sbiw	r28, 0x17	; 23
    15d6:	a6 01       	movw	r20, r12
    15d8:	95 01       	movw	r18, r10
    15da:	08 2e       	mov	r0, r24
    15dc:	04 c0       	rjmp	.+8      	; 0x15e6 <__umoddi3+0x812>
    15de:	22 0f       	add	r18, r18
    15e0:	33 1f       	adc	r19, r19
    15e2:	44 1f       	adc	r20, r20
    15e4:	55 1f       	adc	r21, r21
    15e6:	0a 94       	dec	r0
    15e8:	d2 f7       	brpl	.-12     	; 0x15de <__umoddi3+0x80a>
    15ea:	a0 e2       	ldi	r26, 0x20	; 32
    15ec:	aa 2e       	mov	r10, r26
    15ee:	a8 1a       	sub	r10, r24
    15f0:	66 96       	adiw	r28, 0x16	; 22
    15f2:	af ae       	std	Y+63, r10	; 0x3f
    15f4:	66 97       	sbiw	r28, 0x16	; 22
    15f6:	d2 01       	movw	r26, r4
    15f8:	c1 01       	movw	r24, r2
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <__umoddi3+0x830>
    15fc:	b6 95       	lsr	r27
    15fe:	a7 95       	ror	r26
    1600:	97 95       	ror	r25
    1602:	87 95       	ror	r24
    1604:	aa 94       	dec	r10
    1606:	d2 f7       	brpl	.-12     	; 0x15fc <__umoddi3+0x828>
    1608:	6c 01       	movw	r12, r24
    160a:	7d 01       	movw	r14, r26
    160c:	c2 2a       	or	r12, r18
    160e:	d3 2a       	or	r13, r19
    1610:	e4 2a       	or	r14, r20
    1612:	f5 2a       	or	r15, r21
    1614:	c9 a6       	std	Y+41, r12	; 0x29
    1616:	da a6       	std	Y+42, r13	; 0x2a
    1618:	eb a6       	std	Y+43, r14	; 0x2b
    161a:	fc a6       	std	Y+44, r15	; 0x2c
    161c:	82 01       	movw	r16, r4
    161e:	71 01       	movw	r14, r2
    1620:	67 96       	adiw	r28, 0x17	; 23
    1622:	0f ac       	ldd	r0, Y+63	; 0x3f
    1624:	67 97       	sbiw	r28, 0x17	; 23
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <__umoddi3+0x85c>
    1628:	ee 0c       	add	r14, r14
    162a:	ff 1c       	adc	r15, r15
    162c:	00 1f       	adc	r16, r16
    162e:	11 1f       	adc	r17, r17
    1630:	0a 94       	dec	r0
    1632:	d2 f7       	brpl	.-12     	; 0x1628 <__umoddi3+0x854>
    1634:	ed a2       	std	Y+37, r14	; 0x25
    1636:	fe a2       	std	Y+38, r15	; 0x26
    1638:	0f a3       	std	Y+39, r16	; 0x27
    163a:	18 a7       	std	Y+40, r17	; 0x28
    163c:	64 01       	movw	r12, r8
    163e:	53 01       	movw	r10, r6
    1640:	66 96       	adiw	r28, 0x16	; 22
    1642:	0f ac       	ldd	r0, Y+63	; 0x3f
    1644:	66 97       	sbiw	r28, 0x16	; 22
    1646:	04 c0       	rjmp	.+8      	; 0x1650 <__umoddi3+0x87c>
    1648:	d6 94       	lsr	r13
    164a:	c7 94       	ror	r12
    164c:	b7 94       	ror	r11
    164e:	a7 94       	ror	r10
    1650:	0a 94       	dec	r0
    1652:	d2 f7       	brpl	.-12     	; 0x1648 <__umoddi3+0x874>
    1654:	a4 01       	movw	r20, r8
    1656:	93 01       	movw	r18, r6
    1658:	67 96       	adiw	r28, 0x17	; 23
    165a:	0f ac       	ldd	r0, Y+63	; 0x3f
    165c:	67 97       	sbiw	r28, 0x17	; 23
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <__umoddi3+0x894>
    1660:	22 0f       	add	r18, r18
    1662:	33 1f       	adc	r19, r19
    1664:	44 1f       	adc	r20, r20
    1666:	55 1f       	adc	r21, r21
    1668:	0a 94       	dec	r0
    166a:	d2 f7       	brpl	.-12     	; 0x1660 <__umoddi3+0x88c>
    166c:	6c 96       	adiw	r28, 0x1c	; 28
    166e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1670:	9d ad       	ldd	r25, Y+61	; 0x3d
    1672:	ae ad       	ldd	r26, Y+62	; 0x3e
    1674:	bf ad       	ldd	r27, Y+63	; 0x3f
    1676:	6c 97       	sbiw	r28, 0x1c	; 28
    1678:	66 96       	adiw	r28, 0x16	; 22
    167a:	0f ac       	ldd	r0, Y+63	; 0x3f
    167c:	66 97       	sbiw	r28, 0x16	; 22
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <__umoddi3+0x8b4>
    1680:	b6 95       	lsr	r27
    1682:	a7 95       	ror	r26
    1684:	97 95       	ror	r25
    1686:	87 95       	ror	r24
    1688:	0a 94       	dec	r0
    168a:	d2 f7       	brpl	.-12     	; 0x1680 <__umoddi3+0x8ac>
    168c:	3c 01       	movw	r6, r24
    168e:	4d 01       	movw	r8, r26
    1690:	62 2a       	or	r6, r18
    1692:	73 2a       	or	r7, r19
    1694:	84 2a       	or	r8, r20
    1696:	95 2a       	or	r9, r21
    1698:	69 a2       	std	Y+33, r6	; 0x21
    169a:	7a a2       	std	Y+34, r7	; 0x22
    169c:	8b a2       	std	Y+35, r8	; 0x23
    169e:	9c a2       	std	Y+36, r9	; 0x24
    16a0:	6c 96       	adiw	r28, 0x1c	; 28
    16a2:	ec ac       	ldd	r14, Y+60	; 0x3c
    16a4:	fd ac       	ldd	r15, Y+61	; 0x3d
    16a6:	0e ad       	ldd	r16, Y+62	; 0x3e
    16a8:	1f ad       	ldd	r17, Y+63	; 0x3f
    16aa:	6c 97       	sbiw	r28, 0x1c	; 28
    16ac:	67 96       	adiw	r28, 0x17	; 23
    16ae:	0f ac       	ldd	r0, Y+63	; 0x3f
    16b0:	67 97       	sbiw	r28, 0x17	; 23
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <__umoddi3+0x8e8>
    16b4:	ee 0c       	add	r14, r14
    16b6:	ff 1c       	adc	r15, r15
    16b8:	00 1f       	adc	r16, r16
    16ba:	11 1f       	adc	r17, r17
    16bc:	0a 94       	dec	r0
    16be:	d2 f7       	brpl	.-12     	; 0x16b4 <__umoddi3+0x8e0>
    16c0:	ed 8e       	std	Y+29, r14	; 0x1d
    16c2:	fe 8e       	std	Y+30, r15	; 0x1e
    16c4:	0f 8f       	std	Y+31, r16	; 0x1f
    16c6:	18 a3       	std	Y+32, r17	; 0x20
    16c8:	49 a5       	ldd	r20, Y+41	; 0x29
    16ca:	5a a5       	ldd	r21, Y+42	; 0x2a
    16cc:	6b a5       	ldd	r22, Y+43	; 0x2b
    16ce:	7c a5       	ldd	r23, Y+44	; 0x2c
    16d0:	3b 01       	movw	r6, r22
    16d2:	88 24       	eor	r8, r8
    16d4:	99 24       	eor	r9, r9
    16d6:	60 70       	andi	r22, 0x00	; 0
    16d8:	70 70       	andi	r23, 0x00	; 0
    16da:	2d 96       	adiw	r28, 0x0d	; 13
    16dc:	4c af       	std	Y+60, r20	; 0x3c
    16de:	5d af       	std	Y+61, r21	; 0x3d
    16e0:	6e af       	std	Y+62, r22	; 0x3e
    16e2:	7f af       	std	Y+63, r23	; 0x3f
    16e4:	2d 97       	sbiw	r28, 0x0d	; 13
    16e6:	c6 01       	movw	r24, r12
    16e8:	b5 01       	movw	r22, r10
    16ea:	a4 01       	movw	r20, r8
    16ec:	93 01       	movw	r18, r6
    16ee:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    16f2:	7b 01       	movw	r14, r22
    16f4:	8c 01       	movw	r16, r24
    16f6:	c6 01       	movw	r24, r12
    16f8:	b5 01       	movw	r22, r10
    16fa:	a4 01       	movw	r20, r8
    16fc:	93 01       	movw	r18, r6
    16fe:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    1702:	c9 01       	movw	r24, r18
    1704:	da 01       	movw	r26, r20
    1706:	1c 01       	movw	r2, r24
    1708:	2d 01       	movw	r4, r26
    170a:	c2 01       	movw	r24, r4
    170c:	b1 01       	movw	r22, r2
    170e:	2d 96       	adiw	r28, 0x0d	; 13
    1710:	2c ad       	ldd	r18, Y+60	; 0x3c
    1712:	3d ad       	ldd	r19, Y+61	; 0x3d
    1714:	4e ad       	ldd	r20, Y+62	; 0x3e
    1716:	5f ad       	ldd	r21, Y+63	; 0x3f
    1718:	2d 97       	sbiw	r28, 0x0d	; 13
    171a:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
    171e:	9b 01       	movw	r18, r22
    1720:	ac 01       	movw	r20, r24
    1722:	87 01       	movw	r16, r14
    1724:	ff 24       	eor	r15, r15
    1726:	ee 24       	eor	r14, r14
    1728:	a9 a0       	ldd	r10, Y+33	; 0x21
    172a:	ba a0       	ldd	r11, Y+34	; 0x22
    172c:	cb a0       	ldd	r12, Y+35	; 0x23
    172e:	dc a0       	ldd	r13, Y+36	; 0x24
    1730:	c6 01       	movw	r24, r12
    1732:	aa 27       	eor	r26, r26
    1734:	bb 27       	eor	r27, r27
    1736:	57 01       	movw	r10, r14
    1738:	68 01       	movw	r12, r16
    173a:	a8 2a       	or	r10, r24
    173c:	b9 2a       	or	r11, r25
    173e:	ca 2a       	or	r12, r26
    1740:	db 2a       	or	r13, r27
    1742:	a2 16       	cp	r10, r18
    1744:	b3 06       	cpc	r11, r19
    1746:	c4 06       	cpc	r12, r20
    1748:	d5 06       	cpc	r13, r21
    174a:	00 f5       	brcc	.+64     	; 0x178c <__umoddi3+0x9b8>
    174c:	08 94       	sec
    174e:	21 08       	sbc	r2, r1
    1750:	31 08       	sbc	r3, r1
    1752:	41 08       	sbc	r4, r1
    1754:	51 08       	sbc	r5, r1
    1756:	e9 a4       	ldd	r14, Y+41	; 0x29
    1758:	fa a4       	ldd	r15, Y+42	; 0x2a
    175a:	0b a5       	ldd	r16, Y+43	; 0x2b
    175c:	1c a5       	ldd	r17, Y+44	; 0x2c
    175e:	ae 0c       	add	r10, r14
    1760:	bf 1c       	adc	r11, r15
    1762:	c0 1e       	adc	r12, r16
    1764:	d1 1e       	adc	r13, r17
    1766:	ae 14       	cp	r10, r14
    1768:	bf 04       	cpc	r11, r15
    176a:	c0 06       	cpc	r12, r16
    176c:	d1 06       	cpc	r13, r17
    176e:	70 f0       	brcs	.+28     	; 0x178c <__umoddi3+0x9b8>
    1770:	a2 16       	cp	r10, r18
    1772:	b3 06       	cpc	r11, r19
    1774:	c4 06       	cpc	r12, r20
    1776:	d5 06       	cpc	r13, r21
    1778:	48 f4       	brcc	.+18     	; 0x178c <__umoddi3+0x9b8>
    177a:	08 94       	sec
    177c:	21 08       	sbc	r2, r1
    177e:	31 08       	sbc	r3, r1
    1780:	41 08       	sbc	r4, r1
    1782:	51 08       	sbc	r5, r1
    1784:	ae 0c       	add	r10, r14
    1786:	bf 1c       	adc	r11, r15
    1788:	c0 1e       	adc	r12, r16
    178a:	d1 1e       	adc	r13, r17
    178c:	a2 1a       	sub	r10, r18
    178e:	b3 0a       	sbc	r11, r19
    1790:	c4 0a       	sbc	r12, r20
    1792:	d5 0a       	sbc	r13, r21
    1794:	c6 01       	movw	r24, r12
    1796:	b5 01       	movw	r22, r10
    1798:	a4 01       	movw	r20, r8
    179a:	93 01       	movw	r18, r6
    179c:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    17a0:	7b 01       	movw	r14, r22
    17a2:	8c 01       	movw	r16, r24
    17a4:	c6 01       	movw	r24, r12
    17a6:	b5 01       	movw	r22, r10
    17a8:	a4 01       	movw	r20, r8
    17aa:	93 01       	movw	r18, r6
    17ac:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    17b0:	c9 01       	movw	r24, r18
    17b2:	da 01       	movw	r26, r20
    17b4:	3c 01       	movw	r6, r24
    17b6:	4d 01       	movw	r8, r26
    17b8:	c4 01       	movw	r24, r8
    17ba:	b3 01       	movw	r22, r6
    17bc:	2d 96       	adiw	r28, 0x0d	; 13
    17be:	2c ad       	ldd	r18, Y+60	; 0x3c
    17c0:	3d ad       	ldd	r19, Y+61	; 0x3d
    17c2:	4e ad       	ldd	r20, Y+62	; 0x3e
    17c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    17c6:	2d 97       	sbiw	r28, 0x0d	; 13
    17c8:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
    17cc:	9b 01       	movw	r18, r22
    17ce:	ac 01       	movw	r20, r24
    17d0:	87 01       	movw	r16, r14
    17d2:	ff 24       	eor	r15, r15
    17d4:	ee 24       	eor	r14, r14
    17d6:	89 a1       	ldd	r24, Y+33	; 0x21
    17d8:	9a a1       	ldd	r25, Y+34	; 0x22
    17da:	ab a1       	ldd	r26, Y+35	; 0x23
    17dc:	bc a1       	ldd	r27, Y+36	; 0x24
    17de:	a0 70       	andi	r26, 0x00	; 0
    17e0:	b0 70       	andi	r27, 0x00	; 0
    17e2:	57 01       	movw	r10, r14
    17e4:	68 01       	movw	r12, r16
    17e6:	a8 2a       	or	r10, r24
    17e8:	b9 2a       	or	r11, r25
    17ea:	ca 2a       	or	r12, r26
    17ec:	db 2a       	or	r13, r27
    17ee:	a2 16       	cp	r10, r18
    17f0:	b3 06       	cpc	r11, r19
    17f2:	c4 06       	cpc	r12, r20
    17f4:	d5 06       	cpc	r13, r21
    17f6:	00 f5       	brcc	.+64     	; 0x1838 <__umoddi3+0xa64>
    17f8:	08 94       	sec
    17fa:	61 08       	sbc	r6, r1
    17fc:	71 08       	sbc	r7, r1
    17fe:	81 08       	sbc	r8, r1
    1800:	91 08       	sbc	r9, r1
    1802:	69 a5       	ldd	r22, Y+41	; 0x29
    1804:	7a a5       	ldd	r23, Y+42	; 0x2a
    1806:	8b a5       	ldd	r24, Y+43	; 0x2b
    1808:	9c a5       	ldd	r25, Y+44	; 0x2c
    180a:	a6 0e       	add	r10, r22
    180c:	b7 1e       	adc	r11, r23
    180e:	c8 1e       	adc	r12, r24
    1810:	d9 1e       	adc	r13, r25
    1812:	a6 16       	cp	r10, r22
    1814:	b7 06       	cpc	r11, r23
    1816:	c8 06       	cpc	r12, r24
    1818:	d9 06       	cpc	r13, r25
    181a:	70 f0       	brcs	.+28     	; 0x1838 <__umoddi3+0xa64>
    181c:	a2 16       	cp	r10, r18
    181e:	b3 06       	cpc	r11, r19
    1820:	c4 06       	cpc	r12, r20
    1822:	d5 06       	cpc	r13, r21
    1824:	48 f4       	brcc	.+18     	; 0x1838 <__umoddi3+0xa64>
    1826:	08 94       	sec
    1828:	61 08       	sbc	r6, r1
    182a:	71 08       	sbc	r7, r1
    182c:	81 08       	sbc	r8, r1
    182e:	91 08       	sbc	r9, r1
    1830:	a6 0e       	add	r10, r22
    1832:	b7 1e       	adc	r11, r23
    1834:	c8 1e       	adc	r12, r24
    1836:	d9 1e       	adc	r13, r25
    1838:	d6 01       	movw	r26, r12
    183a:	c5 01       	movw	r24, r10
    183c:	82 1b       	sub	r24, r18
    183e:	93 0b       	sbc	r25, r19
    1840:	a4 0b       	sbc	r26, r20
    1842:	b5 0b       	sbc	r27, r21
    1844:	89 8f       	std	Y+25, r24	; 0x19
    1846:	9a 8f       	std	Y+26, r25	; 0x1a
    1848:	ab 8f       	std	Y+27, r26	; 0x1b
    184a:	bc 8f       	std	Y+28, r27	; 0x1c
    184c:	d1 01       	movw	r26, r2
    184e:	99 27       	eor	r25, r25
    1850:	88 27       	eor	r24, r24
    1852:	84 01       	movw	r16, r8
    1854:	73 01       	movw	r14, r6
    1856:	e8 2a       	or	r14, r24
    1858:	f9 2a       	or	r15, r25
    185a:	0a 2b       	or	r16, r26
    185c:	1b 2b       	or	r17, r27
    185e:	4f ef       	ldi	r20, 0xFF	; 255
    1860:	a4 2e       	mov	r10, r20
    1862:	4f ef       	ldi	r20, 0xFF	; 255
    1864:	b4 2e       	mov	r11, r20
    1866:	c1 2c       	mov	r12, r1
    1868:	d1 2c       	mov	r13, r1
    186a:	ae 20       	and	r10, r14
    186c:	bf 20       	and	r11, r15
    186e:	c0 22       	and	r12, r16
    1870:	d1 22       	and	r13, r17
    1872:	78 01       	movw	r14, r16
    1874:	00 27       	eor	r16, r16
    1876:	11 27       	eor	r17, r17
    1878:	6d a0       	ldd	r6, Y+37	; 0x25
    187a:	7e a0       	ldd	r7, Y+38	; 0x26
    187c:	8f a0       	ldd	r8, Y+39	; 0x27
    187e:	98 a4       	ldd	r9, Y+40	; 0x28
    1880:	4f ef       	ldi	r20, 0xFF	; 255
    1882:	5f ef       	ldi	r21, 0xFF	; 255
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	64 22       	and	r6, r20
    188a:	75 22       	and	r7, r21
    188c:	86 22       	and	r8, r22
    188e:	97 22       	and	r9, r23
    1890:	8d a1       	ldd	r24, Y+37	; 0x25
    1892:	9e a1       	ldd	r25, Y+38	; 0x26
    1894:	af a1       	ldd	r26, Y+39	; 0x27
    1896:	b8 a5       	ldd	r27, Y+40	; 0x28
    1898:	bd 01       	movw	r22, r26
    189a:	88 27       	eor	r24, r24
    189c:	99 27       	eor	r25, r25
    189e:	65 96       	adiw	r28, 0x15	; 21
    18a0:	6c af       	std	Y+60, r22	; 0x3c
    18a2:	7d af       	std	Y+61, r23	; 0x3d
    18a4:	8e af       	std	Y+62, r24	; 0x3e
    18a6:	9f af       	std	Y+63, r25	; 0x3f
    18a8:	65 97       	sbiw	r28, 0x15	; 21
    18aa:	c6 01       	movw	r24, r12
    18ac:	b5 01       	movw	r22, r10
    18ae:	a4 01       	movw	r20, r8
    18b0:	93 01       	movw	r18, r6
    18b2:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
    18b6:	61 96       	adiw	r28, 0x11	; 17
    18b8:	6c af       	std	Y+60, r22	; 0x3c
    18ba:	7d af       	std	Y+61, r23	; 0x3d
    18bc:	8e af       	std	Y+62, r24	; 0x3e
    18be:	9f af       	std	Y+63, r25	; 0x3f
    18c0:	61 97       	sbiw	r28, 0x11	; 17
    18c2:	c6 01       	movw	r24, r12
    18c4:	b5 01       	movw	r22, r10
    18c6:	65 96       	adiw	r28, 0x15	; 21
    18c8:	2c ad       	ldd	r18, Y+60	; 0x3c
    18ca:	3d ad       	ldd	r19, Y+61	; 0x3d
    18cc:	4e ad       	ldd	r20, Y+62	; 0x3e
    18ce:	5f ad       	ldd	r21, Y+63	; 0x3f
    18d0:	65 97       	sbiw	r28, 0x15	; 21
    18d2:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
    18d6:	1b 01       	movw	r2, r22
    18d8:	2c 01       	movw	r4, r24
    18da:	c8 01       	movw	r24, r16
    18dc:	b7 01       	movw	r22, r14
    18de:	a4 01       	movw	r20, r8
    18e0:	93 01       	movw	r18, r6
    18e2:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
    18e6:	5b 01       	movw	r10, r22
    18e8:	6c 01       	movw	r12, r24
    18ea:	c8 01       	movw	r24, r16
    18ec:	b7 01       	movw	r22, r14
    18ee:	65 96       	adiw	r28, 0x15	; 21
    18f0:	2c ad       	ldd	r18, Y+60	; 0x3c
    18f2:	3d ad       	ldd	r19, Y+61	; 0x3d
    18f4:	4e ad       	ldd	r20, Y+62	; 0x3e
    18f6:	5f ad       	ldd	r21, Y+63	; 0x3f
    18f8:	65 97       	sbiw	r28, 0x15	; 21
    18fa:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
    18fe:	7b 01       	movw	r14, r22
    1900:	8c 01       	movw	r16, r24
    1902:	a6 01       	movw	r20, r12
    1904:	95 01       	movw	r18, r10
    1906:	22 0d       	add	r18, r2
    1908:	33 1d       	adc	r19, r3
    190a:	44 1d       	adc	r20, r4
    190c:	55 1d       	adc	r21, r5
    190e:	61 96       	adiw	r28, 0x11	; 17
    1910:	6c ac       	ldd	r6, Y+60	; 0x3c
    1912:	7d ac       	ldd	r7, Y+61	; 0x3d
    1914:	8e ac       	ldd	r8, Y+62	; 0x3e
    1916:	9f ac       	ldd	r9, Y+63	; 0x3f
    1918:	61 97       	sbiw	r28, 0x11	; 17
    191a:	c4 01       	movw	r24, r8
    191c:	aa 27       	eor	r26, r26
    191e:	bb 27       	eor	r27, r27
    1920:	28 0f       	add	r18, r24
    1922:	39 1f       	adc	r19, r25
    1924:	4a 1f       	adc	r20, r26
    1926:	5b 1f       	adc	r21, r27
    1928:	2a 15       	cp	r18, r10
    192a:	3b 05       	cpc	r19, r11
    192c:	4c 05       	cpc	r20, r12
    192e:	5d 05       	cpc	r21, r13
    1930:	48 f4       	brcc	.+18     	; 0x1944 <__umoddi3+0xb70>
    1932:	81 2c       	mov	r8, r1
    1934:	91 2c       	mov	r9, r1
    1936:	e1 e0       	ldi	r30, 0x01	; 1
    1938:	ae 2e       	mov	r10, r30
    193a:	b1 2c       	mov	r11, r1
    193c:	e8 0c       	add	r14, r8
    193e:	f9 1c       	adc	r15, r9
    1940:	0a 1d       	adc	r16, r10
    1942:	1b 1d       	adc	r17, r11
    1944:	ca 01       	movw	r24, r20
    1946:	aa 27       	eor	r26, r26
    1948:	bb 27       	eor	r27, r27
    194a:	57 01       	movw	r10, r14
    194c:	68 01       	movw	r12, r16
    194e:	a8 0e       	add	r10, r24
    1950:	b9 1e       	adc	r11, r25
    1952:	ca 1e       	adc	r12, r26
    1954:	db 1e       	adc	r13, r27
    1956:	a9 01       	movw	r20, r18
    1958:	33 27       	eor	r19, r19
    195a:	22 27       	eor	r18, r18
    195c:	61 96       	adiw	r28, 0x11	; 17
    195e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1960:	9d ad       	ldd	r25, Y+61	; 0x3d
    1962:	ae ad       	ldd	r26, Y+62	; 0x3e
    1964:	bf ad       	ldd	r27, Y+63	; 0x3f
    1966:	61 97       	sbiw	r28, 0x11	; 17
    1968:	a0 70       	andi	r26, 0x00	; 0
    196a:	b0 70       	andi	r27, 0x00	; 0
    196c:	28 0f       	add	r18, r24
    196e:	39 1f       	adc	r19, r25
    1970:	4a 1f       	adc	r20, r26
    1972:	5b 1f       	adc	r21, r27
    1974:	e9 8c       	ldd	r14, Y+25	; 0x19
    1976:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1978:	0b 8d       	ldd	r16, Y+27	; 0x1b
    197a:	1c 8d       	ldd	r17, Y+28	; 0x1c
    197c:	ea 14       	cp	r14, r10
    197e:	fb 04       	cpc	r15, r11
    1980:	0c 05       	cpc	r16, r12
    1982:	1d 05       	cpc	r17, r13
    1984:	70 f0       	brcs	.+28     	; 0x19a2 <__umoddi3+0xbce>
    1986:	ae 14       	cp	r10, r14
    1988:	bf 04       	cpc	r11, r15
    198a:	c0 06       	cpc	r12, r16
    198c:	d1 06       	cpc	r13, r17
    198e:	69 f5       	brne	.+90     	; 0x19ea <__umoddi3+0xc16>
    1990:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1992:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1994:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1996:	98 a1       	ldd	r25, Y+32	; 0x20
    1998:	62 17       	cp	r22, r18
    199a:	73 07       	cpc	r23, r19
    199c:	84 07       	cpc	r24, r20
    199e:	95 07       	cpc	r25, r21
    19a0:	20 f5       	brcc	.+72     	; 0x19ea <__umoddi3+0xc16>
    19a2:	da 01       	movw	r26, r20
    19a4:	c9 01       	movw	r24, r18
    19a6:	6d a0       	ldd	r6, Y+37	; 0x25
    19a8:	7e a0       	ldd	r7, Y+38	; 0x26
    19aa:	8f a0       	ldd	r8, Y+39	; 0x27
    19ac:	98 a4       	ldd	r9, Y+40	; 0x28
    19ae:	86 19       	sub	r24, r6
    19b0:	97 09       	sbc	r25, r7
    19b2:	a8 09       	sbc	r26, r8
    19b4:	b9 09       	sbc	r27, r9
    19b6:	e9 a4       	ldd	r14, Y+41	; 0x29
    19b8:	fa a4       	ldd	r15, Y+42	; 0x2a
    19ba:	0b a5       	ldd	r16, Y+43	; 0x2b
    19bc:	1c a5       	ldd	r17, Y+44	; 0x2c
    19be:	ae 18       	sub	r10, r14
    19c0:	bf 08       	sbc	r11, r15
    19c2:	c0 0a       	sbc	r12, r16
    19c4:	d1 0a       	sbc	r13, r17
    19c6:	ee 24       	eor	r14, r14
    19c8:	ff 24       	eor	r15, r15
    19ca:	87 01       	movw	r16, r14
    19cc:	28 17       	cp	r18, r24
    19ce:	39 07       	cpc	r19, r25
    19d0:	4a 07       	cpc	r20, r26
    19d2:	5b 07       	cpc	r21, r27
    19d4:	28 f4       	brcc	.+10     	; 0x19e0 <__umoddi3+0xc0c>
    19d6:	21 e0       	ldi	r18, 0x01	; 1
    19d8:	e2 2e       	mov	r14, r18
    19da:	f1 2c       	mov	r15, r1
    19dc:	01 2d       	mov	r16, r1
    19de:	11 2d       	mov	r17, r1
    19e0:	ae 18       	sub	r10, r14
    19e2:	bf 08       	sbc	r11, r15
    19e4:	c0 0a       	sbc	r12, r16
    19e6:	d1 0a       	sbc	r13, r17
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <__umoddi3+0xc1a>
    19ea:	da 01       	movw	r26, r20
    19ec:	c9 01       	movw	r24, r18
    19ee:	6d 8c       	ldd	r6, Y+29	; 0x1d
    19f0:	7e 8c       	ldd	r7, Y+30	; 0x1e
    19f2:	8f 8c       	ldd	r8, Y+31	; 0x1f
    19f4:	98 a0       	ldd	r9, Y+32	; 0x20
    19f6:	68 1a       	sub	r6, r24
    19f8:	79 0a       	sbc	r7, r25
    19fa:	8a 0a       	sbc	r8, r26
    19fc:	9b 0a       	sbc	r9, r27
    19fe:	49 8d       	ldd	r20, Y+25	; 0x19
    1a00:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1a02:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1a04:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1a06:	4a 19       	sub	r20, r10
    1a08:	5b 09       	sbc	r21, r11
    1a0a:	6c 09       	sbc	r22, r12
    1a0c:	7d 09       	sbc	r23, r13
    1a0e:	5a 01       	movw	r10, r20
    1a10:	6b 01       	movw	r12, r22
    1a12:	22 24       	eor	r2, r2
    1a14:	33 24       	eor	r3, r3
    1a16:	21 01       	movw	r4, r2
    1a18:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a1a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a20:	66 15       	cp	r22, r6
    1a22:	77 05       	cpc	r23, r7
    1a24:	88 05       	cpc	r24, r8
    1a26:	99 05       	cpc	r25, r9
    1a28:	28 f4       	brcc	.+10     	; 0x1a34 <__umoddi3+0xc60>
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	28 2e       	mov	r2, r24
    1a2e:	31 2c       	mov	r3, r1
    1a30:	41 2c       	mov	r4, r1
    1a32:	51 2c       	mov	r5, r1
    1a34:	86 01       	movw	r16, r12
    1a36:	75 01       	movw	r14, r10
    1a38:	e2 18       	sub	r14, r2
    1a3a:	f3 08       	sbc	r15, r3
    1a3c:	04 09       	sbc	r16, r4
    1a3e:	15 09       	sbc	r17, r5
    1a40:	a8 01       	movw	r20, r16
    1a42:	97 01       	movw	r18, r14
    1a44:	66 96       	adiw	r28, 0x16	; 22
    1a46:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a48:	66 97       	sbiw	r28, 0x16	; 22
    1a4a:	04 c0       	rjmp	.+8      	; 0x1a54 <__umoddi3+0xc80>
    1a4c:	22 0f       	add	r18, r18
    1a4e:	33 1f       	adc	r19, r19
    1a50:	44 1f       	adc	r20, r20
    1a52:	55 1f       	adc	r21, r21
    1a54:	0a 94       	dec	r0
    1a56:	d2 f7       	brpl	.-12     	; 0x1a4c <__umoddi3+0xc78>
    1a58:	d4 01       	movw	r26, r8
    1a5a:	c3 01       	movw	r24, r6
    1a5c:	67 96       	adiw	r28, 0x17	; 23
    1a5e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a60:	67 97       	sbiw	r28, 0x17	; 23
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <__umoddi3+0xc98>
    1a64:	b6 95       	lsr	r27
    1a66:	a7 95       	ror	r26
    1a68:	97 95       	ror	r25
    1a6a:	87 95       	ror	r24
    1a6c:	0a 94       	dec	r0
    1a6e:	d2 f7       	brpl	.-12     	; 0x1a64 <__umoddi3+0xc90>
    1a70:	28 2b       	or	r18, r24
    1a72:	39 2b       	or	r19, r25
    1a74:	4a 2b       	or	r20, r26
    1a76:	5b 2b       	or	r21, r27
    1a78:	29 8b       	std	Y+17, r18	; 0x11
    1a7a:	3a 8b       	std	Y+18, r19	; 0x12
    1a7c:	4b 8b       	std	Y+19, r20	; 0x13
    1a7e:	5c 8b       	std	Y+20, r21	; 0x14
    1a80:	67 96       	adiw	r28, 0x17	; 23
    1a82:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a84:	67 97       	sbiw	r28, 0x17	; 23
    1a86:	04 c0       	rjmp	.+8      	; 0x1a90 <__umoddi3+0xcbc>
    1a88:	16 95       	lsr	r17
    1a8a:	07 95       	ror	r16
    1a8c:	f7 94       	ror	r15
    1a8e:	e7 94       	ror	r14
    1a90:	0a 94       	dec	r0
    1a92:	d2 f7       	brpl	.-12     	; 0x1a88 <__umoddi3+0xcb4>
    1a94:	ed 8a       	std	Y+21, r14	; 0x15
    1a96:	fe 8a       	std	Y+22, r15	; 0x16
    1a98:	0f 8b       	std	Y+23, r16	; 0x17
    1a9a:	18 8f       	std	Y+24, r17	; 0x18
    1a9c:	3a 89       	ldd	r19, Y+18	; 0x12
    1a9e:	4b 89       	ldd	r20, Y+19	; 0x13
    1aa0:	5c 89       	ldd	r21, Y+20	; 0x14
    1aa2:	6e 2d       	mov	r22, r14
    1aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aaa:	c5 5a       	subi	r28, 0xA5	; 165
    1aac:	df 4f       	sbci	r29, 0xFF	; 255
    1aae:	e2 e1       	ldi	r30, 0x12	; 18
    1ab0:	0c 94 55 4c 	jmp	0x98aa	; 0x98aa <__epilogue_restores__>

00001ab4 <_fpadd_parts>:
    1ab4:	a0 e0       	ldi	r26, 0x00	; 0
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e0 e6       	ldi	r30, 0x60	; 96
    1aba:	fd e0       	ldi	r31, 0x0D	; 13
    1abc:	0c 94 39 4c 	jmp	0x9872	; 0x9872 <__prologue_saves__>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	2b 01       	movw	r4, r22
    1ac4:	fa 01       	movw	r30, r20
    1ac6:	9c 91       	ld	r25, X
    1ac8:	92 30       	cpi	r25, 0x02	; 2
    1aca:	08 f4       	brcc	.+2      	; 0x1ace <_fpadd_parts+0x1a>
    1acc:	39 c1       	rjmp	.+626    	; 0x1d40 <_fpadd_parts+0x28c>
    1ace:	eb 01       	movw	r28, r22
    1ad0:	88 81       	ld	r24, Y
    1ad2:	82 30       	cpi	r24, 0x02	; 2
    1ad4:	08 f4       	brcc	.+2      	; 0x1ad8 <_fpadd_parts+0x24>
    1ad6:	33 c1       	rjmp	.+614    	; 0x1d3e <_fpadd_parts+0x28a>
    1ad8:	94 30       	cpi	r25, 0x04	; 4
    1ada:	69 f4       	brne	.+26     	; 0x1af6 <_fpadd_parts+0x42>
    1adc:	84 30       	cpi	r24, 0x04	; 4
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <_fpadd_parts+0x2e>
    1ae0:	2f c1       	rjmp	.+606    	; 0x1d40 <_fpadd_parts+0x28c>
    1ae2:	11 96       	adiw	r26, 0x01	; 1
    1ae4:	9c 91       	ld	r25, X
    1ae6:	11 97       	sbiw	r26, 0x01	; 1
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	98 17       	cp	r25, r24
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <_fpadd_parts+0x3c>
    1aee:	28 c1       	rjmp	.+592    	; 0x1d40 <_fpadd_parts+0x28c>
    1af0:	a2 e1       	ldi	r26, 0x12	; 18
    1af2:	b1 e0       	ldi	r27, 0x01	; 1
    1af4:	25 c1       	rjmp	.+586    	; 0x1d40 <_fpadd_parts+0x28c>
    1af6:	84 30       	cpi	r24, 0x04	; 4
    1af8:	09 f4       	brne	.+2      	; 0x1afc <_fpadd_parts+0x48>
    1afa:	21 c1       	rjmp	.+578    	; 0x1d3e <_fpadd_parts+0x28a>
    1afc:	82 30       	cpi	r24, 0x02	; 2
    1afe:	a9 f4       	brne	.+42     	; 0x1b2a <_fpadd_parts+0x76>
    1b00:	92 30       	cpi	r25, 0x02	; 2
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <_fpadd_parts+0x52>
    1b04:	1d c1       	rjmp	.+570    	; 0x1d40 <_fpadd_parts+0x28c>
    1b06:	9a 01       	movw	r18, r20
    1b08:	ad 01       	movw	r20, r26
    1b0a:	88 e0       	ldi	r24, 0x08	; 8
    1b0c:	ea 01       	movw	r28, r20
    1b0e:	09 90       	ld	r0, Y+
    1b10:	ae 01       	movw	r20, r28
    1b12:	e9 01       	movw	r28, r18
    1b14:	09 92       	st	Y+, r0
    1b16:	9e 01       	movw	r18, r28
    1b18:	81 50       	subi	r24, 0x01	; 1
    1b1a:	c1 f7       	brne	.-16     	; 0x1b0c <_fpadd_parts+0x58>
    1b1c:	e2 01       	movw	r28, r4
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	11 96       	adiw	r26, 0x01	; 1
    1b22:	9c 91       	ld	r25, X
    1b24:	89 23       	and	r24, r25
    1b26:	81 83       	std	Z+1, r24	; 0x01
    1b28:	08 c1       	rjmp	.+528    	; 0x1d3a <_fpadd_parts+0x286>
    1b2a:	92 30       	cpi	r25, 0x02	; 2
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <_fpadd_parts+0x7c>
    1b2e:	07 c1       	rjmp	.+526    	; 0x1d3e <_fpadd_parts+0x28a>
    1b30:	12 96       	adiw	r26, 0x02	; 2
    1b32:	2d 90       	ld	r2, X+
    1b34:	3c 90       	ld	r3, X
    1b36:	13 97       	sbiw	r26, 0x03	; 3
    1b38:	eb 01       	movw	r28, r22
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3e:	14 96       	adiw	r26, 0x04	; 4
    1b40:	ad 90       	ld	r10, X+
    1b42:	bd 90       	ld	r11, X+
    1b44:	cd 90       	ld	r12, X+
    1b46:	dc 90       	ld	r13, X
    1b48:	17 97       	sbiw	r26, 0x07	; 7
    1b4a:	ec 80       	ldd	r14, Y+4	; 0x04
    1b4c:	fd 80       	ldd	r15, Y+5	; 0x05
    1b4e:	0e 81       	ldd	r16, Y+6	; 0x06
    1b50:	1f 81       	ldd	r17, Y+7	; 0x07
    1b52:	91 01       	movw	r18, r2
    1b54:	28 1b       	sub	r18, r24
    1b56:	39 0b       	sbc	r19, r25
    1b58:	b9 01       	movw	r22, r18
    1b5a:	37 ff       	sbrs	r19, 7
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <_fpadd_parts+0xb2>
    1b5e:	66 27       	eor	r22, r22
    1b60:	77 27       	eor	r23, r23
    1b62:	62 1b       	sub	r22, r18
    1b64:	73 0b       	sbc	r23, r19
    1b66:	60 32       	cpi	r22, 0x20	; 32
    1b68:	71 05       	cpc	r23, r1
    1b6a:	0c f0       	brlt	.+2      	; 0x1b6e <_fpadd_parts+0xba>
    1b6c:	61 c0       	rjmp	.+194    	; 0x1c30 <_fpadd_parts+0x17c>
    1b6e:	12 16       	cp	r1, r18
    1b70:	13 06       	cpc	r1, r19
    1b72:	6c f5       	brge	.+90     	; 0x1bce <_fpadd_parts+0x11a>
    1b74:	37 01       	movw	r6, r14
    1b76:	48 01       	movw	r8, r16
    1b78:	06 2e       	mov	r0, r22
    1b7a:	04 c0       	rjmp	.+8      	; 0x1b84 <_fpadd_parts+0xd0>
    1b7c:	96 94       	lsr	r9
    1b7e:	87 94       	ror	r8
    1b80:	77 94       	ror	r7
    1b82:	67 94       	ror	r6
    1b84:	0a 94       	dec	r0
    1b86:	d2 f7       	brpl	.-12     	; 0x1b7c <_fpadd_parts+0xc8>
    1b88:	21 e0       	ldi	r18, 0x01	; 1
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <_fpadd_parts+0xe6>
    1b92:	22 0f       	add	r18, r18
    1b94:	33 1f       	adc	r19, r19
    1b96:	44 1f       	adc	r20, r20
    1b98:	55 1f       	adc	r21, r21
    1b9a:	6a 95       	dec	r22
    1b9c:	d2 f7       	brpl	.-12     	; 0x1b92 <_fpadd_parts+0xde>
    1b9e:	21 50       	subi	r18, 0x01	; 1
    1ba0:	30 40       	sbci	r19, 0x00	; 0
    1ba2:	40 40       	sbci	r20, 0x00	; 0
    1ba4:	50 40       	sbci	r21, 0x00	; 0
    1ba6:	2e 21       	and	r18, r14
    1ba8:	3f 21       	and	r19, r15
    1baa:	40 23       	and	r20, r16
    1bac:	51 23       	and	r21, r17
    1bae:	21 15       	cp	r18, r1
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	41 05       	cpc	r20, r1
    1bb4:	51 05       	cpc	r21, r1
    1bb6:	21 f0       	breq	.+8      	; 0x1bc0 <_fpadd_parts+0x10c>
    1bb8:	21 e0       	ldi	r18, 0x01	; 1
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	79 01       	movw	r14, r18
    1bc2:	8a 01       	movw	r16, r20
    1bc4:	e6 28       	or	r14, r6
    1bc6:	f7 28       	or	r15, r7
    1bc8:	08 29       	or	r16, r8
    1bca:	19 29       	or	r17, r9
    1bcc:	3c c0       	rjmp	.+120    	; 0x1c46 <_fpadd_parts+0x192>
    1bce:	23 2b       	or	r18, r19
    1bd0:	d1 f1       	breq	.+116    	; 0x1c46 <_fpadd_parts+0x192>
    1bd2:	26 0e       	add	r2, r22
    1bd4:	37 1e       	adc	r3, r23
    1bd6:	35 01       	movw	r6, r10
    1bd8:	46 01       	movw	r8, r12
    1bda:	06 2e       	mov	r0, r22
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <_fpadd_parts+0x132>
    1bde:	96 94       	lsr	r9
    1be0:	87 94       	ror	r8
    1be2:	77 94       	ror	r7
    1be4:	67 94       	ror	r6
    1be6:	0a 94       	dec	r0
    1be8:	d2 f7       	brpl	.-12     	; 0x1bde <_fpadd_parts+0x12a>
    1bea:	21 e0       	ldi	r18, 0x01	; 1
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	04 c0       	rjmp	.+8      	; 0x1bfc <_fpadd_parts+0x148>
    1bf4:	22 0f       	add	r18, r18
    1bf6:	33 1f       	adc	r19, r19
    1bf8:	44 1f       	adc	r20, r20
    1bfa:	55 1f       	adc	r21, r21
    1bfc:	6a 95       	dec	r22
    1bfe:	d2 f7       	brpl	.-12     	; 0x1bf4 <_fpadd_parts+0x140>
    1c00:	21 50       	subi	r18, 0x01	; 1
    1c02:	30 40       	sbci	r19, 0x00	; 0
    1c04:	40 40       	sbci	r20, 0x00	; 0
    1c06:	50 40       	sbci	r21, 0x00	; 0
    1c08:	2a 21       	and	r18, r10
    1c0a:	3b 21       	and	r19, r11
    1c0c:	4c 21       	and	r20, r12
    1c0e:	5d 21       	and	r21, r13
    1c10:	21 15       	cp	r18, r1
    1c12:	31 05       	cpc	r19, r1
    1c14:	41 05       	cpc	r20, r1
    1c16:	51 05       	cpc	r21, r1
    1c18:	21 f0       	breq	.+8      	; 0x1c22 <_fpadd_parts+0x16e>
    1c1a:	21 e0       	ldi	r18, 0x01	; 1
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	59 01       	movw	r10, r18
    1c24:	6a 01       	movw	r12, r20
    1c26:	a6 28       	or	r10, r6
    1c28:	b7 28       	or	r11, r7
    1c2a:	c8 28       	or	r12, r8
    1c2c:	d9 28       	or	r13, r9
    1c2e:	0b c0       	rjmp	.+22     	; 0x1c46 <_fpadd_parts+0x192>
    1c30:	82 15       	cp	r24, r2
    1c32:	93 05       	cpc	r25, r3
    1c34:	2c f0       	brlt	.+10     	; 0x1c40 <_fpadd_parts+0x18c>
    1c36:	1c 01       	movw	r2, r24
    1c38:	aa 24       	eor	r10, r10
    1c3a:	bb 24       	eor	r11, r11
    1c3c:	65 01       	movw	r12, r10
    1c3e:	03 c0       	rjmp	.+6      	; 0x1c46 <_fpadd_parts+0x192>
    1c40:	ee 24       	eor	r14, r14
    1c42:	ff 24       	eor	r15, r15
    1c44:	87 01       	movw	r16, r14
    1c46:	11 96       	adiw	r26, 0x01	; 1
    1c48:	9c 91       	ld	r25, X
    1c4a:	d2 01       	movw	r26, r4
    1c4c:	11 96       	adiw	r26, 0x01	; 1
    1c4e:	8c 91       	ld	r24, X
    1c50:	98 17       	cp	r25, r24
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <_fpadd_parts+0x1a2>
    1c54:	45 c0       	rjmp	.+138    	; 0x1ce0 <_fpadd_parts+0x22c>
    1c56:	99 23       	and	r25, r25
    1c58:	39 f0       	breq	.+14     	; 0x1c68 <_fpadd_parts+0x1b4>
    1c5a:	a8 01       	movw	r20, r16
    1c5c:	97 01       	movw	r18, r14
    1c5e:	2a 19       	sub	r18, r10
    1c60:	3b 09       	sbc	r19, r11
    1c62:	4c 09       	sbc	r20, r12
    1c64:	5d 09       	sbc	r21, r13
    1c66:	06 c0       	rjmp	.+12     	; 0x1c74 <_fpadd_parts+0x1c0>
    1c68:	a6 01       	movw	r20, r12
    1c6a:	95 01       	movw	r18, r10
    1c6c:	2e 19       	sub	r18, r14
    1c6e:	3f 09       	sbc	r19, r15
    1c70:	40 0b       	sbc	r20, r16
    1c72:	51 0b       	sbc	r21, r17
    1c74:	57 fd       	sbrc	r21, 7
    1c76:	08 c0       	rjmp	.+16     	; 0x1c88 <_fpadd_parts+0x1d4>
    1c78:	11 82       	std	Z+1, r1	; 0x01
    1c7a:	33 82       	std	Z+3, r3	; 0x03
    1c7c:	22 82       	std	Z+2, r2	; 0x02
    1c7e:	24 83       	std	Z+4, r18	; 0x04
    1c80:	35 83       	std	Z+5, r19	; 0x05
    1c82:	46 83       	std	Z+6, r20	; 0x06
    1c84:	57 83       	std	Z+7, r21	; 0x07
    1c86:	1d c0       	rjmp	.+58     	; 0x1cc2 <_fpadd_parts+0x20e>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	81 83       	std	Z+1, r24	; 0x01
    1c8c:	33 82       	std	Z+3, r3	; 0x03
    1c8e:	22 82       	std	Z+2, r2	; 0x02
    1c90:	88 27       	eor	r24, r24
    1c92:	99 27       	eor	r25, r25
    1c94:	dc 01       	movw	r26, r24
    1c96:	82 1b       	sub	r24, r18
    1c98:	93 0b       	sbc	r25, r19
    1c9a:	a4 0b       	sbc	r26, r20
    1c9c:	b5 0b       	sbc	r27, r21
    1c9e:	84 83       	std	Z+4, r24	; 0x04
    1ca0:	95 83       	std	Z+5, r25	; 0x05
    1ca2:	a6 83       	std	Z+6, r26	; 0x06
    1ca4:	b7 83       	std	Z+7, r27	; 0x07
    1ca6:	0d c0       	rjmp	.+26     	; 0x1cc2 <_fpadd_parts+0x20e>
    1ca8:	22 0f       	add	r18, r18
    1caa:	33 1f       	adc	r19, r19
    1cac:	44 1f       	adc	r20, r20
    1cae:	55 1f       	adc	r21, r21
    1cb0:	24 83       	std	Z+4, r18	; 0x04
    1cb2:	35 83       	std	Z+5, r19	; 0x05
    1cb4:	46 83       	std	Z+6, r20	; 0x06
    1cb6:	57 83       	std	Z+7, r21	; 0x07
    1cb8:	82 81       	ldd	r24, Z+2	; 0x02
    1cba:	93 81       	ldd	r25, Z+3	; 0x03
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	93 83       	std	Z+3, r25	; 0x03
    1cc0:	82 83       	std	Z+2, r24	; 0x02
    1cc2:	24 81       	ldd	r18, Z+4	; 0x04
    1cc4:	35 81       	ldd	r19, Z+5	; 0x05
    1cc6:	46 81       	ldd	r20, Z+6	; 0x06
    1cc8:	57 81       	ldd	r21, Z+7	; 0x07
    1cca:	da 01       	movw	r26, r20
    1ccc:	c9 01       	movw	r24, r18
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	a1 09       	sbc	r26, r1
    1cd2:	b1 09       	sbc	r27, r1
    1cd4:	8f 5f       	subi	r24, 0xFF	; 255
    1cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd8:	af 4f       	sbci	r26, 0xFF	; 255
    1cda:	bf 43       	sbci	r27, 0x3F	; 63
    1cdc:	28 f3       	brcs	.-54     	; 0x1ca8 <_fpadd_parts+0x1f4>
    1cde:	0b c0       	rjmp	.+22     	; 0x1cf6 <_fpadd_parts+0x242>
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	33 82       	std	Z+3, r3	; 0x03
    1ce4:	22 82       	std	Z+2, r2	; 0x02
    1ce6:	ea 0c       	add	r14, r10
    1ce8:	fb 1c       	adc	r15, r11
    1cea:	0c 1d       	adc	r16, r12
    1cec:	1d 1d       	adc	r17, r13
    1cee:	e4 82       	std	Z+4, r14	; 0x04
    1cf0:	f5 82       	std	Z+5, r15	; 0x05
    1cf2:	06 83       	std	Z+6, r16	; 0x06
    1cf4:	17 83       	std	Z+7, r17	; 0x07
    1cf6:	83 e0       	ldi	r24, 0x03	; 3
    1cf8:	80 83       	st	Z, r24
    1cfa:	24 81       	ldd	r18, Z+4	; 0x04
    1cfc:	35 81       	ldd	r19, Z+5	; 0x05
    1cfe:	46 81       	ldd	r20, Z+6	; 0x06
    1d00:	57 81       	ldd	r21, Z+7	; 0x07
    1d02:	57 ff       	sbrs	r21, 7
    1d04:	1a c0       	rjmp	.+52     	; 0x1d3a <_fpadd_parts+0x286>
    1d06:	c9 01       	movw	r24, r18
    1d08:	aa 27       	eor	r26, r26
    1d0a:	97 fd       	sbrc	r25, 7
    1d0c:	a0 95       	com	r26
    1d0e:	ba 2f       	mov	r27, r26
    1d10:	81 70       	andi	r24, 0x01	; 1
    1d12:	90 70       	andi	r25, 0x00	; 0
    1d14:	a0 70       	andi	r26, 0x00	; 0
    1d16:	b0 70       	andi	r27, 0x00	; 0
    1d18:	56 95       	lsr	r21
    1d1a:	47 95       	ror	r20
    1d1c:	37 95       	ror	r19
    1d1e:	27 95       	ror	r18
    1d20:	82 2b       	or	r24, r18
    1d22:	93 2b       	or	r25, r19
    1d24:	a4 2b       	or	r26, r20
    1d26:	b5 2b       	or	r27, r21
    1d28:	84 83       	std	Z+4, r24	; 0x04
    1d2a:	95 83       	std	Z+5, r25	; 0x05
    1d2c:	a6 83       	std	Z+6, r26	; 0x06
    1d2e:	b7 83       	std	Z+7, r27	; 0x07
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	93 83       	std	Z+3, r25	; 0x03
    1d38:	82 83       	std	Z+2, r24	; 0x02
    1d3a:	df 01       	movw	r26, r30
    1d3c:	01 c0       	rjmp	.+2      	; 0x1d40 <_fpadd_parts+0x28c>
    1d3e:	d2 01       	movw	r26, r4
    1d40:	cd 01       	movw	r24, r26
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	e2 e1       	ldi	r30, 0x12	; 18
    1d48:	0c 94 55 4c 	jmp	0x98aa	; 0x98aa <__epilogue_restores__>

00001d4c <__subsf3>:
    1d4c:	a0 e2       	ldi	r26, 0x20	; 32
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	ec ea       	ldi	r30, 0xAC	; 172
    1d52:	fe e0       	ldi	r31, 0x0E	; 14
    1d54:	0c 94 45 4c 	jmp	0x988a	; 0x988a <__prologue_saves__+0x18>
    1d58:	69 83       	std	Y+1, r22	; 0x01
    1d5a:	7a 83       	std	Y+2, r23	; 0x02
    1d5c:	8b 83       	std	Y+3, r24	; 0x03
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	2d 83       	std	Y+5, r18	; 0x05
    1d62:	3e 83       	std	Y+6, r19	; 0x06
    1d64:	4f 83       	std	Y+7, r20	; 0x07
    1d66:	58 87       	std	Y+8, r21	; 0x08
    1d68:	e9 e0       	ldi	r30, 0x09	; 9
    1d6a:	ee 2e       	mov	r14, r30
    1d6c:	f1 2c       	mov	r15, r1
    1d6e:	ec 0e       	add	r14, r28
    1d70:	fd 1e       	adc	r15, r29
    1d72:	ce 01       	movw	r24, r28
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	b7 01       	movw	r22, r14
    1d78:	0e 94 89 13 	call	0x2712	; 0x2712 <__unpack_f>
    1d7c:	8e 01       	movw	r16, r28
    1d7e:	0f 5e       	subi	r16, 0xEF	; 239
    1d80:	1f 4f       	sbci	r17, 0xFF	; 255
    1d82:	ce 01       	movw	r24, r28
    1d84:	05 96       	adiw	r24, 0x05	; 5
    1d86:	b8 01       	movw	r22, r16
    1d88:	0e 94 89 13 	call	0x2712	; 0x2712 <__unpack_f>
    1d8c:	8a 89       	ldd	r24, Y+18	; 0x12
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	89 27       	eor	r24, r25
    1d92:	8a 8b       	std	Y+18, r24	; 0x12
    1d94:	c7 01       	movw	r24, r14
    1d96:	b8 01       	movw	r22, r16
    1d98:	ae 01       	movw	r20, r28
    1d9a:	47 5e       	subi	r20, 0xE7	; 231
    1d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_fpadd_parts>
    1da2:	0e 94 b4 12 	call	0x2568	; 0x2568 <__pack_f>
    1da6:	a0 96       	adiw	r28, 0x20	; 32
    1da8:	e6 e0       	ldi	r30, 0x06	; 6
    1daa:	0c 94 61 4c 	jmp	0x98c2	; 0x98c2 <__epilogue_restores__+0x18>

00001dae <__addsf3>:
    1dae:	a0 e2       	ldi	r26, 0x20	; 32
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	ed ed       	ldi	r30, 0xDD	; 221
    1db4:	fe e0       	ldi	r31, 0x0E	; 14
    1db6:	0c 94 45 4c 	jmp	0x988a	; 0x988a <__prologue_saves__+0x18>
    1dba:	69 83       	std	Y+1, r22	; 0x01
    1dbc:	7a 83       	std	Y+2, r23	; 0x02
    1dbe:	8b 83       	std	Y+3, r24	; 0x03
    1dc0:	9c 83       	std	Y+4, r25	; 0x04
    1dc2:	2d 83       	std	Y+5, r18	; 0x05
    1dc4:	3e 83       	std	Y+6, r19	; 0x06
    1dc6:	4f 83       	std	Y+7, r20	; 0x07
    1dc8:	58 87       	std	Y+8, r21	; 0x08
    1dca:	f9 e0       	ldi	r31, 0x09	; 9
    1dcc:	ef 2e       	mov	r14, r31
    1dce:	f1 2c       	mov	r15, r1
    1dd0:	ec 0e       	add	r14, r28
    1dd2:	fd 1e       	adc	r15, r29
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	01 96       	adiw	r24, 0x01	; 1
    1dd8:	b7 01       	movw	r22, r14
    1dda:	0e 94 89 13 	call	0x2712	; 0x2712 <__unpack_f>
    1dde:	8e 01       	movw	r16, r28
    1de0:	0f 5e       	subi	r16, 0xEF	; 239
    1de2:	1f 4f       	sbci	r17, 0xFF	; 255
    1de4:	ce 01       	movw	r24, r28
    1de6:	05 96       	adiw	r24, 0x05	; 5
    1de8:	b8 01       	movw	r22, r16
    1dea:	0e 94 89 13 	call	0x2712	; 0x2712 <__unpack_f>
    1dee:	c7 01       	movw	r24, r14
    1df0:	b8 01       	movw	r22, r16
    1df2:	ae 01       	movw	r20, r28
    1df4:	47 5e       	subi	r20, 0xE7	; 231
    1df6:	5f 4f       	sbci	r21, 0xFF	; 255
    1df8:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_fpadd_parts>
    1dfc:	0e 94 b4 12 	call	0x2568	; 0x2568 <__pack_f>
    1e00:	a0 96       	adiw	r28, 0x20	; 32
    1e02:	e6 e0       	ldi	r30, 0x06	; 6
    1e04:	0c 94 61 4c 	jmp	0x98c2	; 0x98c2 <__epilogue_restores__+0x18>

00001e08 <__mulsf3>:
    1e08:	a0 e2       	ldi	r26, 0x20	; 32
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	ea e0       	ldi	r30, 0x0A	; 10
    1e0e:	ff e0       	ldi	r31, 0x0F	; 15
    1e10:	0c 94 39 4c 	jmp	0x9872	; 0x9872 <__prologue_saves__>
    1e14:	69 83       	std	Y+1, r22	; 0x01
    1e16:	7a 83       	std	Y+2, r23	; 0x02
    1e18:	8b 83       	std	Y+3, r24	; 0x03
    1e1a:	9c 83       	std	Y+4, r25	; 0x04
    1e1c:	2d 83       	std	Y+5, r18	; 0x05
    1e1e:	3e 83       	std	Y+6, r19	; 0x06
    1e20:	4f 83       	std	Y+7, r20	; 0x07
    1e22:	58 87       	std	Y+8, r21	; 0x08
    1e24:	ce 01       	movw	r24, r28
    1e26:	01 96       	adiw	r24, 0x01	; 1
    1e28:	be 01       	movw	r22, r28
    1e2a:	67 5f       	subi	r22, 0xF7	; 247
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2e:	0e 94 89 13 	call	0x2712	; 0x2712 <__unpack_f>
    1e32:	ce 01       	movw	r24, r28
    1e34:	05 96       	adiw	r24, 0x05	; 5
    1e36:	be 01       	movw	r22, r28
    1e38:	6f 5e       	subi	r22, 0xEF	; 239
    1e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3c:	0e 94 89 13 	call	0x2712	; 0x2712 <__unpack_f>
    1e40:	99 85       	ldd	r25, Y+9	; 0x09
    1e42:	92 30       	cpi	r25, 0x02	; 2
    1e44:	88 f0       	brcs	.+34     	; 0x1e68 <__mulsf3+0x60>
    1e46:	89 89       	ldd	r24, Y+17	; 0x11
    1e48:	82 30       	cpi	r24, 0x02	; 2
    1e4a:	c8 f0       	brcs	.+50     	; 0x1e7e <__mulsf3+0x76>
    1e4c:	94 30       	cpi	r25, 0x04	; 4
    1e4e:	19 f4       	brne	.+6      	; 0x1e56 <__mulsf3+0x4e>
    1e50:	82 30       	cpi	r24, 0x02	; 2
    1e52:	51 f4       	brne	.+20     	; 0x1e68 <__mulsf3+0x60>
    1e54:	04 c0       	rjmp	.+8      	; 0x1e5e <__mulsf3+0x56>
    1e56:	84 30       	cpi	r24, 0x04	; 4
    1e58:	29 f4       	brne	.+10     	; 0x1e64 <__mulsf3+0x5c>
    1e5a:	92 30       	cpi	r25, 0x02	; 2
    1e5c:	81 f4       	brne	.+32     	; 0x1e7e <__mulsf3+0x76>
    1e5e:	82 e1       	ldi	r24, 0x12	; 18
    1e60:	91 e0       	ldi	r25, 0x01	; 1
    1e62:	c6 c0       	rjmp	.+396    	; 0x1ff0 <__mulsf3+0x1e8>
    1e64:	92 30       	cpi	r25, 0x02	; 2
    1e66:	49 f4       	brne	.+18     	; 0x1e7a <__mulsf3+0x72>
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6c:	8a 89       	ldd	r24, Y+18	; 0x12
    1e6e:	98 13       	cpse	r25, r24
    1e70:	21 e0       	ldi	r18, 0x01	; 1
    1e72:	2a 87       	std	Y+10, r18	; 0x0a
    1e74:	ce 01       	movw	r24, r28
    1e76:	09 96       	adiw	r24, 0x09	; 9
    1e78:	bb c0       	rjmp	.+374    	; 0x1ff0 <__mulsf3+0x1e8>
    1e7a:	82 30       	cpi	r24, 0x02	; 2
    1e7c:	49 f4       	brne	.+18     	; 0x1e90 <__mulsf3+0x88>
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e82:	8a 89       	ldd	r24, Y+18	; 0x12
    1e84:	98 13       	cpse	r25, r24
    1e86:	21 e0       	ldi	r18, 0x01	; 1
    1e88:	2a 8b       	std	Y+18, r18	; 0x12
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	41 96       	adiw	r24, 0x11	; 17
    1e8e:	b0 c0       	rjmp	.+352    	; 0x1ff0 <__mulsf3+0x1e8>
    1e90:	2d 84       	ldd	r2, Y+13	; 0x0d
    1e92:	3e 84       	ldd	r3, Y+14	; 0x0e
    1e94:	4f 84       	ldd	r4, Y+15	; 0x0f
    1e96:	58 88       	ldd	r5, Y+16	; 0x10
    1e98:	6d 88       	ldd	r6, Y+21	; 0x15
    1e9a:	7e 88       	ldd	r7, Y+22	; 0x16
    1e9c:	8f 88       	ldd	r8, Y+23	; 0x17
    1e9e:	98 8c       	ldd	r9, Y+24	; 0x18
    1ea0:	ee 24       	eor	r14, r14
    1ea2:	ff 24       	eor	r15, r15
    1ea4:	87 01       	movw	r16, r14
    1ea6:	aa 24       	eor	r10, r10
    1ea8:	bb 24       	eor	r11, r11
    1eaa:	65 01       	movw	r12, r10
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	70 e0       	ldi	r23, 0x00	; 0
    1eb4:	e0 e0       	ldi	r30, 0x00	; 0
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	c1 01       	movw	r24, r2
    1eba:	81 70       	andi	r24, 0x01	; 1
    1ebc:	90 70       	andi	r25, 0x00	; 0
    1ebe:	89 2b       	or	r24, r25
    1ec0:	e9 f0       	breq	.+58     	; 0x1efc <__mulsf3+0xf4>
    1ec2:	e6 0c       	add	r14, r6
    1ec4:	f7 1c       	adc	r15, r7
    1ec6:	08 1d       	adc	r16, r8
    1ec8:	19 1d       	adc	r17, r9
    1eca:	9a 01       	movw	r18, r20
    1ecc:	ab 01       	movw	r20, r22
    1ece:	2a 0d       	add	r18, r10
    1ed0:	3b 1d       	adc	r19, r11
    1ed2:	4c 1d       	adc	r20, r12
    1ed4:	5d 1d       	adc	r21, r13
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a0 e0       	ldi	r26, 0x00	; 0
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e6 14       	cp	r14, r6
    1ee0:	f7 04       	cpc	r15, r7
    1ee2:	08 05       	cpc	r16, r8
    1ee4:	19 05       	cpc	r17, r9
    1ee6:	20 f4       	brcc	.+8      	; 0x1ef0 <__mulsf3+0xe8>
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a0 e0       	ldi	r26, 0x00	; 0
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	ba 01       	movw	r22, r20
    1ef2:	a9 01       	movw	r20, r18
    1ef4:	48 0f       	add	r20, r24
    1ef6:	59 1f       	adc	r21, r25
    1ef8:	6a 1f       	adc	r22, r26
    1efa:	7b 1f       	adc	r23, r27
    1efc:	aa 0c       	add	r10, r10
    1efe:	bb 1c       	adc	r11, r11
    1f00:	cc 1c       	adc	r12, r12
    1f02:	dd 1c       	adc	r13, r13
    1f04:	97 fe       	sbrs	r9, 7
    1f06:	08 c0       	rjmp	.+16     	; 0x1f18 <__mulsf3+0x110>
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	a0 e0       	ldi	r26, 0x00	; 0
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	a8 2a       	or	r10, r24
    1f12:	b9 2a       	or	r11, r25
    1f14:	ca 2a       	or	r12, r26
    1f16:	db 2a       	or	r13, r27
    1f18:	31 96       	adiw	r30, 0x01	; 1
    1f1a:	e0 32       	cpi	r30, 0x20	; 32
    1f1c:	f1 05       	cpc	r31, r1
    1f1e:	49 f0       	breq	.+18     	; 0x1f32 <__mulsf3+0x12a>
    1f20:	66 0c       	add	r6, r6
    1f22:	77 1c       	adc	r7, r7
    1f24:	88 1c       	adc	r8, r8
    1f26:	99 1c       	adc	r9, r9
    1f28:	56 94       	lsr	r5
    1f2a:	47 94       	ror	r4
    1f2c:	37 94       	ror	r3
    1f2e:	27 94       	ror	r2
    1f30:	c3 cf       	rjmp	.-122    	; 0x1eb8 <__mulsf3+0xb0>
    1f32:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f34:	ea 89       	ldd	r30, Y+18	; 0x12
    1f36:	2b 89       	ldd	r18, Y+19	; 0x13
    1f38:	3c 89       	ldd	r19, Y+20	; 0x14
    1f3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f3e:	28 0f       	add	r18, r24
    1f40:	39 1f       	adc	r19, r25
    1f42:	2e 5f       	subi	r18, 0xFE	; 254
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	17 c0       	rjmp	.+46     	; 0x1f76 <__mulsf3+0x16e>
    1f48:	ca 01       	movw	r24, r20
    1f4a:	81 70       	andi	r24, 0x01	; 1
    1f4c:	90 70       	andi	r25, 0x00	; 0
    1f4e:	89 2b       	or	r24, r25
    1f50:	61 f0       	breq	.+24     	; 0x1f6a <__mulsf3+0x162>
    1f52:	16 95       	lsr	r17
    1f54:	07 95       	ror	r16
    1f56:	f7 94       	ror	r15
    1f58:	e7 94       	ror	r14
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a0 e0       	ldi	r26, 0x00	; 0
    1f60:	b0 e8       	ldi	r27, 0x80	; 128
    1f62:	e8 2a       	or	r14, r24
    1f64:	f9 2a       	or	r15, r25
    1f66:	0a 2b       	or	r16, r26
    1f68:	1b 2b       	or	r17, r27
    1f6a:	76 95       	lsr	r23
    1f6c:	67 95       	ror	r22
    1f6e:	57 95       	ror	r21
    1f70:	47 95       	ror	r20
    1f72:	2f 5f       	subi	r18, 0xFF	; 255
    1f74:	3f 4f       	sbci	r19, 0xFF	; 255
    1f76:	77 fd       	sbrc	r23, 7
    1f78:	e7 cf       	rjmp	.-50     	; 0x1f48 <__mulsf3+0x140>
    1f7a:	0c c0       	rjmp	.+24     	; 0x1f94 <__mulsf3+0x18c>
    1f7c:	44 0f       	add	r20, r20
    1f7e:	55 1f       	adc	r21, r21
    1f80:	66 1f       	adc	r22, r22
    1f82:	77 1f       	adc	r23, r23
    1f84:	17 fd       	sbrc	r17, 7
    1f86:	41 60       	ori	r20, 0x01	; 1
    1f88:	ee 0c       	add	r14, r14
    1f8a:	ff 1c       	adc	r15, r15
    1f8c:	00 1f       	adc	r16, r16
    1f8e:	11 1f       	adc	r17, r17
    1f90:	21 50       	subi	r18, 0x01	; 1
    1f92:	30 40       	sbci	r19, 0x00	; 0
    1f94:	40 30       	cpi	r20, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	59 07       	cpc	r21, r25
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	69 07       	cpc	r22, r25
    1f9e:	90 e4       	ldi	r25, 0x40	; 64
    1fa0:	79 07       	cpc	r23, r25
    1fa2:	60 f3       	brcs	.-40     	; 0x1f7c <__mulsf3+0x174>
    1fa4:	2b 8f       	std	Y+27, r18	; 0x1b
    1fa6:	3c 8f       	std	Y+28, r19	; 0x1c
    1fa8:	db 01       	movw	r26, r22
    1faa:	ca 01       	movw	r24, r20
    1fac:	8f 77       	andi	r24, 0x7F	; 127
    1fae:	90 70       	andi	r25, 0x00	; 0
    1fb0:	a0 70       	andi	r26, 0x00	; 0
    1fb2:	b0 70       	andi	r27, 0x00	; 0
    1fb4:	80 34       	cpi	r24, 0x40	; 64
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	a1 05       	cpc	r26, r1
    1fba:	b1 05       	cpc	r27, r1
    1fbc:	61 f4       	brne	.+24     	; 0x1fd6 <__mulsf3+0x1ce>
    1fbe:	47 fd       	sbrc	r20, 7
    1fc0:	0a c0       	rjmp	.+20     	; 0x1fd6 <__mulsf3+0x1ce>
    1fc2:	e1 14       	cp	r14, r1
    1fc4:	f1 04       	cpc	r15, r1
    1fc6:	01 05       	cpc	r16, r1
    1fc8:	11 05       	cpc	r17, r1
    1fca:	29 f0       	breq	.+10     	; 0x1fd6 <__mulsf3+0x1ce>
    1fcc:	40 5c       	subi	r20, 0xC0	; 192
    1fce:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd0:	6f 4f       	sbci	r22, 0xFF	; 255
    1fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd4:	40 78       	andi	r20, 0x80	; 128
    1fd6:	1a 8e       	std	Y+26, r1	; 0x1a
    1fd8:	fe 17       	cp	r31, r30
    1fda:	11 f0       	breq	.+4      	; 0x1fe0 <__mulsf3+0x1d8>
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	8a 8f       	std	Y+26, r24	; 0x1a
    1fe0:	4d 8f       	std	Y+29, r20	; 0x1d
    1fe2:	5e 8f       	std	Y+30, r21	; 0x1e
    1fe4:	6f 8f       	std	Y+31, r22	; 0x1f
    1fe6:	78 a3       	std	Y+32, r23	; 0x20
    1fe8:	83 e0       	ldi	r24, 0x03	; 3
    1fea:	89 8f       	std	Y+25, r24	; 0x19
    1fec:	ce 01       	movw	r24, r28
    1fee:	49 96       	adiw	r24, 0x19	; 25
    1ff0:	0e 94 b4 12 	call	0x2568	; 0x2568 <__pack_f>
    1ff4:	a0 96       	adiw	r28, 0x20	; 32
    1ff6:	e2 e1       	ldi	r30, 0x12	; 18
    1ff8:	0c 94 55 4c 	jmp	0x98aa	; 0x98aa <__epilogue_restores__>

00001ffc <__divsf3>:
    1ffc:	a8 e1       	ldi	r26, 0x18	; 24
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e4 e0       	ldi	r30, 0x04	; 4
    2002:	f0 e1       	ldi	r31, 0x10	; 16
    2004:	0c 94 41 4c 	jmp	0x9882	; 0x9882 <__prologue_saves__+0x10>
    2008:	69 83       	std	Y+1, r22	; 0x01
    200a:	7a 83       	std	Y+2, r23	; 0x02
    200c:	8b 83       	std	Y+3, r24	; 0x03
    200e:	9c 83       	std	Y+4, r25	; 0x04
    2010:	2d 83       	std	Y+5, r18	; 0x05
    2012:	3e 83       	std	Y+6, r19	; 0x06
    2014:	4f 83       	std	Y+7, r20	; 0x07
    2016:	58 87       	std	Y+8, r21	; 0x08
    2018:	b9 e0       	ldi	r27, 0x09	; 9
    201a:	eb 2e       	mov	r14, r27
    201c:	f1 2c       	mov	r15, r1
    201e:	ec 0e       	add	r14, r28
    2020:	fd 1e       	adc	r15, r29
    2022:	ce 01       	movw	r24, r28
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	b7 01       	movw	r22, r14
    2028:	0e 94 89 13 	call	0x2712	; 0x2712 <__unpack_f>
    202c:	8e 01       	movw	r16, r28
    202e:	0f 5e       	subi	r16, 0xEF	; 239
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	ce 01       	movw	r24, r28
    2034:	05 96       	adiw	r24, 0x05	; 5
    2036:	b8 01       	movw	r22, r16
    2038:	0e 94 89 13 	call	0x2712	; 0x2712 <__unpack_f>
    203c:	29 85       	ldd	r18, Y+9	; 0x09
    203e:	22 30       	cpi	r18, 0x02	; 2
    2040:	08 f4       	brcc	.+2      	; 0x2044 <__divsf3+0x48>
    2042:	7e c0       	rjmp	.+252    	; 0x2140 <__divsf3+0x144>
    2044:	39 89       	ldd	r19, Y+17	; 0x11
    2046:	32 30       	cpi	r19, 0x02	; 2
    2048:	10 f4       	brcc	.+4      	; 0x204e <__divsf3+0x52>
    204a:	b8 01       	movw	r22, r16
    204c:	7c c0       	rjmp	.+248    	; 0x2146 <__divsf3+0x14a>
    204e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2050:	9a 89       	ldd	r25, Y+18	; 0x12
    2052:	89 27       	eor	r24, r25
    2054:	8a 87       	std	Y+10, r24	; 0x0a
    2056:	24 30       	cpi	r18, 0x04	; 4
    2058:	11 f0       	breq	.+4      	; 0x205e <__divsf3+0x62>
    205a:	22 30       	cpi	r18, 0x02	; 2
    205c:	31 f4       	brne	.+12     	; 0x206a <__divsf3+0x6e>
    205e:	23 17       	cp	r18, r19
    2060:	09 f0       	breq	.+2      	; 0x2064 <__divsf3+0x68>
    2062:	6e c0       	rjmp	.+220    	; 0x2140 <__divsf3+0x144>
    2064:	62 e1       	ldi	r22, 0x12	; 18
    2066:	71 e0       	ldi	r23, 0x01	; 1
    2068:	6e c0       	rjmp	.+220    	; 0x2146 <__divsf3+0x14a>
    206a:	34 30       	cpi	r19, 0x04	; 4
    206c:	39 f4       	brne	.+14     	; 0x207c <__divsf3+0x80>
    206e:	1d 86       	std	Y+13, r1	; 0x0d
    2070:	1e 86       	std	Y+14, r1	; 0x0e
    2072:	1f 86       	std	Y+15, r1	; 0x0f
    2074:	18 8a       	std	Y+16, r1	; 0x10
    2076:	1c 86       	std	Y+12, r1	; 0x0c
    2078:	1b 86       	std	Y+11, r1	; 0x0b
    207a:	04 c0       	rjmp	.+8      	; 0x2084 <__divsf3+0x88>
    207c:	32 30       	cpi	r19, 0x02	; 2
    207e:	21 f4       	brne	.+8      	; 0x2088 <__divsf3+0x8c>
    2080:	84 e0       	ldi	r24, 0x04	; 4
    2082:	89 87       	std	Y+9, r24	; 0x09
    2084:	b7 01       	movw	r22, r14
    2086:	5f c0       	rjmp	.+190    	; 0x2146 <__divsf3+0x14a>
    2088:	2b 85       	ldd	r18, Y+11	; 0x0b
    208a:	3c 85       	ldd	r19, Y+12	; 0x0c
    208c:	8b 89       	ldd	r24, Y+19	; 0x13
    208e:	9c 89       	ldd	r25, Y+20	; 0x14
    2090:	28 1b       	sub	r18, r24
    2092:	39 0b       	sbc	r19, r25
    2094:	3c 87       	std	Y+12, r19	; 0x0c
    2096:	2b 87       	std	Y+11, r18	; 0x0b
    2098:	ed 84       	ldd	r14, Y+13	; 0x0d
    209a:	fe 84       	ldd	r15, Y+14	; 0x0e
    209c:	0f 85       	ldd	r16, Y+15	; 0x0f
    209e:	18 89       	ldd	r17, Y+16	; 0x10
    20a0:	ad 88       	ldd	r10, Y+21	; 0x15
    20a2:	be 88       	ldd	r11, Y+22	; 0x16
    20a4:	cf 88       	ldd	r12, Y+23	; 0x17
    20a6:	d8 8c       	ldd	r13, Y+24	; 0x18
    20a8:	ea 14       	cp	r14, r10
    20aa:	fb 04       	cpc	r15, r11
    20ac:	0c 05       	cpc	r16, r12
    20ae:	1d 05       	cpc	r17, r13
    20b0:	40 f4       	brcc	.+16     	; 0x20c2 <__divsf3+0xc6>
    20b2:	ee 0c       	add	r14, r14
    20b4:	ff 1c       	adc	r15, r15
    20b6:	00 1f       	adc	r16, r16
    20b8:	11 1f       	adc	r17, r17
    20ba:	21 50       	subi	r18, 0x01	; 1
    20bc:	30 40       	sbci	r19, 0x00	; 0
    20be:	3c 87       	std	Y+12, r19	; 0x0c
    20c0:	2b 87       	std	Y+11, r18	; 0x0b
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	a0 e0       	ldi	r26, 0x00	; 0
    20d0:	b0 e4       	ldi	r27, 0x40	; 64
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	70 e0       	ldi	r23, 0x00	; 0
    20d6:	ea 14       	cp	r14, r10
    20d8:	fb 04       	cpc	r15, r11
    20da:	0c 05       	cpc	r16, r12
    20dc:	1d 05       	cpc	r17, r13
    20de:	40 f0       	brcs	.+16     	; 0x20f0 <__divsf3+0xf4>
    20e0:	28 2b       	or	r18, r24
    20e2:	39 2b       	or	r19, r25
    20e4:	4a 2b       	or	r20, r26
    20e6:	5b 2b       	or	r21, r27
    20e8:	ea 18       	sub	r14, r10
    20ea:	fb 08       	sbc	r15, r11
    20ec:	0c 09       	sbc	r16, r12
    20ee:	1d 09       	sbc	r17, r13
    20f0:	b6 95       	lsr	r27
    20f2:	a7 95       	ror	r26
    20f4:	97 95       	ror	r25
    20f6:	87 95       	ror	r24
    20f8:	ee 0c       	add	r14, r14
    20fa:	ff 1c       	adc	r15, r15
    20fc:	00 1f       	adc	r16, r16
    20fe:	11 1f       	adc	r17, r17
    2100:	6f 5f       	subi	r22, 0xFF	; 255
    2102:	7f 4f       	sbci	r23, 0xFF	; 255
    2104:	6f 31       	cpi	r22, 0x1F	; 31
    2106:	71 05       	cpc	r23, r1
    2108:	31 f7       	brne	.-52     	; 0x20d6 <__divsf3+0xda>
    210a:	da 01       	movw	r26, r20
    210c:	c9 01       	movw	r24, r18
    210e:	8f 77       	andi	r24, 0x7F	; 127
    2110:	90 70       	andi	r25, 0x00	; 0
    2112:	a0 70       	andi	r26, 0x00	; 0
    2114:	b0 70       	andi	r27, 0x00	; 0
    2116:	80 34       	cpi	r24, 0x40	; 64
    2118:	91 05       	cpc	r25, r1
    211a:	a1 05       	cpc	r26, r1
    211c:	b1 05       	cpc	r27, r1
    211e:	61 f4       	brne	.+24     	; 0x2138 <__divsf3+0x13c>
    2120:	27 fd       	sbrc	r18, 7
    2122:	0a c0       	rjmp	.+20     	; 0x2138 <__divsf3+0x13c>
    2124:	e1 14       	cp	r14, r1
    2126:	f1 04       	cpc	r15, r1
    2128:	01 05       	cpc	r16, r1
    212a:	11 05       	cpc	r17, r1
    212c:	29 f0       	breq	.+10     	; 0x2138 <__divsf3+0x13c>
    212e:	20 5c       	subi	r18, 0xC0	; 192
    2130:	3f 4f       	sbci	r19, 0xFF	; 255
    2132:	4f 4f       	sbci	r20, 0xFF	; 255
    2134:	5f 4f       	sbci	r21, 0xFF	; 255
    2136:	20 78       	andi	r18, 0x80	; 128
    2138:	2d 87       	std	Y+13, r18	; 0x0d
    213a:	3e 87       	std	Y+14, r19	; 0x0e
    213c:	4f 87       	std	Y+15, r20	; 0x0f
    213e:	58 8b       	std	Y+16, r21	; 0x10
    2140:	be 01       	movw	r22, r28
    2142:	67 5f       	subi	r22, 0xF7	; 247
    2144:	7f 4f       	sbci	r23, 0xFF	; 255
    2146:	cb 01       	movw	r24, r22
    2148:	0e 94 b4 12 	call	0x2568	; 0x2568 <__pack_f>
    214c:	68 96       	adiw	r28, 0x18	; 24
    214e:	ea e0       	ldi	r30, 0x0A	; 10
    2150:	0c 94 5d 4c 	jmp	0x98ba	; 0x98ba <__epilogue_restores__+0x10>

00002154 <__gtsf2>:
    2154:	a8 e1       	ldi	r26, 0x18	; 24
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e0 eb       	ldi	r30, 0xB0	; 176
    215a:	f0 e1       	ldi	r31, 0x10	; 16
    215c:	0c 94 45 4c 	jmp	0x988a	; 0x988a <__prologue_saves__+0x18>
    2160:	69 83       	std	Y+1, r22	; 0x01
    2162:	7a 83       	std	Y+2, r23	; 0x02
    2164:	8b 83       	std	Y+3, r24	; 0x03
    2166:	9c 83       	std	Y+4, r25	; 0x04
    2168:	2d 83       	std	Y+5, r18	; 0x05
    216a:	3e 83       	std	Y+6, r19	; 0x06
    216c:	4f 83       	std	Y+7, r20	; 0x07
    216e:	58 87       	std	Y+8, r21	; 0x08
    2170:	89 e0       	ldi	r24, 0x09	; 9
    2172:	e8 2e       	mov	r14, r24
    2174:	f1 2c       	mov	r15, r1
    2176:	ec 0e       	add	r14, r28
    2178:	fd 1e       	adc	r15, r29
    217a:	ce 01       	movw	r24, r28
    217c:	01 96       	adiw	r24, 0x01	; 1
    217e:	b7 01       	movw	r22, r14
    2180:	0e 94 89 13 	call	0x2712	; 0x2712 <__unpack_f>
    2184:	8e 01       	movw	r16, r28
    2186:	0f 5e       	subi	r16, 0xEF	; 239
    2188:	1f 4f       	sbci	r17, 0xFF	; 255
    218a:	ce 01       	movw	r24, r28
    218c:	05 96       	adiw	r24, 0x05	; 5
    218e:	b8 01       	movw	r22, r16
    2190:	0e 94 89 13 	call	0x2712	; 0x2712 <__unpack_f>
    2194:	89 85       	ldd	r24, Y+9	; 0x09
    2196:	82 30       	cpi	r24, 0x02	; 2
    2198:	40 f0       	brcs	.+16     	; 0x21aa <__gtsf2+0x56>
    219a:	89 89       	ldd	r24, Y+17	; 0x11
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	28 f0       	brcs	.+10     	; 0x21aa <__gtsf2+0x56>
    21a0:	c7 01       	movw	r24, r14
    21a2:	b8 01       	movw	r22, r16
    21a4:	0e 94 01 14 	call	0x2802	; 0x2802 <__fpcmp_parts_f>
    21a8:	01 c0       	rjmp	.+2      	; 0x21ac <__gtsf2+0x58>
    21aa:	8f ef       	ldi	r24, 0xFF	; 255
    21ac:	68 96       	adiw	r28, 0x18	; 24
    21ae:	e6 e0       	ldi	r30, 0x06	; 6
    21b0:	0c 94 61 4c 	jmp	0x98c2	; 0x98c2 <__epilogue_restores__+0x18>

000021b4 <__gesf2>:
    21b4:	a8 e1       	ldi	r26, 0x18	; 24
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e0 ee       	ldi	r30, 0xE0	; 224
    21ba:	f0 e1       	ldi	r31, 0x10	; 16
    21bc:	0c 94 45 4c 	jmp	0x988a	; 0x988a <__prologue_saves__+0x18>
    21c0:	69 83       	std	Y+1, r22	; 0x01
    21c2:	7a 83       	std	Y+2, r23	; 0x02
    21c4:	8b 83       	std	Y+3, r24	; 0x03
    21c6:	9c 83       	std	Y+4, r25	; 0x04
    21c8:	2d 83       	std	Y+5, r18	; 0x05
    21ca:	3e 83       	std	Y+6, r19	; 0x06
    21cc:	4f 83       	std	Y+7, r20	; 0x07
    21ce:	58 87       	std	Y+8, r21	; 0x08
    21d0:	89 e0       	ldi	r24, 0x09	; 9
    21d2:	e8 2e       	mov	r14, r24
    21d4:	f1 2c       	mov	r15, r1
    21d6:	ec 0e       	add	r14, r28
    21d8:	fd 1e       	adc	r15, r29
    21da:	ce 01       	movw	r24, r28
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	b7 01       	movw	r22, r14
    21e0:	0e 94 89 13 	call	0x2712	; 0x2712 <__unpack_f>
    21e4:	8e 01       	movw	r16, r28
    21e6:	0f 5e       	subi	r16, 0xEF	; 239
    21e8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ea:	ce 01       	movw	r24, r28
    21ec:	05 96       	adiw	r24, 0x05	; 5
    21ee:	b8 01       	movw	r22, r16
    21f0:	0e 94 89 13 	call	0x2712	; 0x2712 <__unpack_f>
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	82 30       	cpi	r24, 0x02	; 2
    21f8:	40 f0       	brcs	.+16     	; 0x220a <__gesf2+0x56>
    21fa:	89 89       	ldd	r24, Y+17	; 0x11
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	28 f0       	brcs	.+10     	; 0x220a <__gesf2+0x56>
    2200:	c7 01       	movw	r24, r14
    2202:	b8 01       	movw	r22, r16
    2204:	0e 94 01 14 	call	0x2802	; 0x2802 <__fpcmp_parts_f>
    2208:	01 c0       	rjmp	.+2      	; 0x220c <__gesf2+0x58>
    220a:	8f ef       	ldi	r24, 0xFF	; 255
    220c:	68 96       	adiw	r28, 0x18	; 24
    220e:	e6 e0       	ldi	r30, 0x06	; 6
    2210:	0c 94 61 4c 	jmp	0x98c2	; 0x98c2 <__epilogue_restores__+0x18>

00002214 <__ltsf2>:
    2214:	a8 e1       	ldi	r26, 0x18	; 24
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e0 e1       	ldi	r30, 0x10	; 16
    221a:	f1 e1       	ldi	r31, 0x11	; 17
    221c:	0c 94 45 4c 	jmp	0x988a	; 0x988a <__prologue_saves__+0x18>
    2220:	69 83       	std	Y+1, r22	; 0x01
    2222:	7a 83       	std	Y+2, r23	; 0x02
    2224:	8b 83       	std	Y+3, r24	; 0x03
    2226:	9c 83       	std	Y+4, r25	; 0x04
    2228:	2d 83       	std	Y+5, r18	; 0x05
    222a:	3e 83       	std	Y+6, r19	; 0x06
    222c:	4f 83       	std	Y+7, r20	; 0x07
    222e:	58 87       	std	Y+8, r21	; 0x08
    2230:	89 e0       	ldi	r24, 0x09	; 9
    2232:	e8 2e       	mov	r14, r24
    2234:	f1 2c       	mov	r15, r1
    2236:	ec 0e       	add	r14, r28
    2238:	fd 1e       	adc	r15, r29
    223a:	ce 01       	movw	r24, r28
    223c:	01 96       	adiw	r24, 0x01	; 1
    223e:	b7 01       	movw	r22, r14
    2240:	0e 94 89 13 	call	0x2712	; 0x2712 <__unpack_f>
    2244:	8e 01       	movw	r16, r28
    2246:	0f 5e       	subi	r16, 0xEF	; 239
    2248:	1f 4f       	sbci	r17, 0xFF	; 255
    224a:	ce 01       	movw	r24, r28
    224c:	05 96       	adiw	r24, 0x05	; 5
    224e:	b8 01       	movw	r22, r16
    2250:	0e 94 89 13 	call	0x2712	; 0x2712 <__unpack_f>
    2254:	89 85       	ldd	r24, Y+9	; 0x09
    2256:	82 30       	cpi	r24, 0x02	; 2
    2258:	40 f0       	brcs	.+16     	; 0x226a <__ltsf2+0x56>
    225a:	89 89       	ldd	r24, Y+17	; 0x11
    225c:	82 30       	cpi	r24, 0x02	; 2
    225e:	28 f0       	brcs	.+10     	; 0x226a <__ltsf2+0x56>
    2260:	c7 01       	movw	r24, r14
    2262:	b8 01       	movw	r22, r16
    2264:	0e 94 01 14 	call	0x2802	; 0x2802 <__fpcmp_parts_f>
    2268:	01 c0       	rjmp	.+2      	; 0x226c <__ltsf2+0x58>
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	68 96       	adiw	r28, 0x18	; 24
    226e:	e6 e0       	ldi	r30, 0x06	; 6
    2270:	0c 94 61 4c 	jmp	0x98c2	; 0x98c2 <__epilogue_restores__+0x18>

00002274 <__floatsisf>:
    2274:	a8 e0       	ldi	r26, 0x08	; 8
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e0 e4       	ldi	r30, 0x40	; 64
    227a:	f1 e1       	ldi	r31, 0x11	; 17
    227c:	0c 94 42 4c 	jmp	0x9884	; 0x9884 <__prologue_saves__+0x12>
    2280:	9b 01       	movw	r18, r22
    2282:	ac 01       	movw	r20, r24
    2284:	83 e0       	ldi	r24, 0x03	; 3
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	da 01       	movw	r26, r20
    228a:	c9 01       	movw	r24, r18
    228c:	88 27       	eor	r24, r24
    228e:	b7 fd       	sbrc	r27, 7
    2290:	83 95       	inc	r24
    2292:	99 27       	eor	r25, r25
    2294:	aa 27       	eor	r26, r26
    2296:	bb 27       	eor	r27, r27
    2298:	b8 2e       	mov	r11, r24
    229a:	21 15       	cp	r18, r1
    229c:	31 05       	cpc	r19, r1
    229e:	41 05       	cpc	r20, r1
    22a0:	51 05       	cpc	r21, r1
    22a2:	19 f4       	brne	.+6      	; 0x22aa <__floatsisf+0x36>
    22a4:	82 e0       	ldi	r24, 0x02	; 2
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	3a c0       	rjmp	.+116    	; 0x231e <__floatsisf+0xaa>
    22aa:	88 23       	and	r24, r24
    22ac:	a9 f0       	breq	.+42     	; 0x22d8 <__floatsisf+0x64>
    22ae:	20 30       	cpi	r18, 0x00	; 0
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	38 07       	cpc	r19, r24
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	48 07       	cpc	r20, r24
    22b8:	80 e8       	ldi	r24, 0x80	; 128
    22ba:	58 07       	cpc	r21, r24
    22bc:	29 f4       	brne	.+10     	; 0x22c8 <__floatsisf+0x54>
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	70 e0       	ldi	r23, 0x00	; 0
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	9f ec       	ldi	r25, 0xCF	; 207
    22c6:	30 c0       	rjmp	.+96     	; 0x2328 <__floatsisf+0xb4>
    22c8:	ee 24       	eor	r14, r14
    22ca:	ff 24       	eor	r15, r15
    22cc:	87 01       	movw	r16, r14
    22ce:	e2 1a       	sub	r14, r18
    22d0:	f3 0a       	sbc	r15, r19
    22d2:	04 0b       	sbc	r16, r20
    22d4:	15 0b       	sbc	r17, r21
    22d6:	02 c0       	rjmp	.+4      	; 0x22dc <__floatsisf+0x68>
    22d8:	79 01       	movw	r14, r18
    22da:	8a 01       	movw	r16, r20
    22dc:	8e e1       	ldi	r24, 0x1E	; 30
    22de:	c8 2e       	mov	r12, r24
    22e0:	d1 2c       	mov	r13, r1
    22e2:	dc 82       	std	Y+4, r13	; 0x04
    22e4:	cb 82       	std	Y+3, r12	; 0x03
    22e6:	ed 82       	std	Y+5, r14	; 0x05
    22e8:	fe 82       	std	Y+6, r15	; 0x06
    22ea:	0f 83       	std	Y+7, r16	; 0x07
    22ec:	18 87       	std	Y+8, r17	; 0x08
    22ee:	c8 01       	movw	r24, r16
    22f0:	b7 01       	movw	r22, r14
    22f2:	0e 94 65 12 	call	0x24ca	; 0x24ca <__clzsi2>
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	18 16       	cp	r1, r24
    22fa:	19 06       	cpc	r1, r25
    22fc:	84 f4       	brge	.+32     	; 0x231e <__floatsisf+0xaa>
    22fe:	08 2e       	mov	r0, r24
    2300:	04 c0       	rjmp	.+8      	; 0x230a <__floatsisf+0x96>
    2302:	ee 0c       	add	r14, r14
    2304:	ff 1c       	adc	r15, r15
    2306:	00 1f       	adc	r16, r16
    2308:	11 1f       	adc	r17, r17
    230a:	0a 94       	dec	r0
    230c:	d2 f7       	brpl	.-12     	; 0x2302 <__floatsisf+0x8e>
    230e:	ed 82       	std	Y+5, r14	; 0x05
    2310:	fe 82       	std	Y+6, r15	; 0x06
    2312:	0f 83       	std	Y+7, r16	; 0x07
    2314:	18 87       	std	Y+8, r17	; 0x08
    2316:	c8 1a       	sub	r12, r24
    2318:	d9 0a       	sbc	r13, r25
    231a:	dc 82       	std	Y+4, r13	; 0x04
    231c:	cb 82       	std	Y+3, r12	; 0x03
    231e:	ba 82       	std	Y+2, r11	; 0x02
    2320:	ce 01       	movw	r24, r28
    2322:	01 96       	adiw	r24, 0x01	; 1
    2324:	0e 94 b4 12 	call	0x2568	; 0x2568 <__pack_f>
    2328:	28 96       	adiw	r28, 0x08	; 8
    232a:	e9 e0       	ldi	r30, 0x09	; 9
    232c:	0c 94 5e 4c 	jmp	0x98bc	; 0x98bc <__epilogue_restores__+0x12>

00002330 <__fixsfsi>:
    2330:	ac e0       	ldi	r26, 0x0C	; 12
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	ee e9       	ldi	r30, 0x9E	; 158
    2336:	f1 e1       	ldi	r31, 0x11	; 17
    2338:	0c 94 49 4c 	jmp	0x9892	; 0x9892 <__prologue_saves__+0x20>
    233c:	69 83       	std	Y+1, r22	; 0x01
    233e:	7a 83       	std	Y+2, r23	; 0x02
    2340:	8b 83       	std	Y+3, r24	; 0x03
    2342:	9c 83       	std	Y+4, r25	; 0x04
    2344:	ce 01       	movw	r24, r28
    2346:	01 96       	adiw	r24, 0x01	; 1
    2348:	be 01       	movw	r22, r28
    234a:	6b 5f       	subi	r22, 0xFB	; 251
    234c:	7f 4f       	sbci	r23, 0xFF	; 255
    234e:	0e 94 89 13 	call	0x2712	; 0x2712 <__unpack_f>
    2352:	8d 81       	ldd	r24, Y+5	; 0x05
    2354:	82 30       	cpi	r24, 0x02	; 2
    2356:	61 f1       	breq	.+88     	; 0x23b0 <__fixsfsi+0x80>
    2358:	82 30       	cpi	r24, 0x02	; 2
    235a:	50 f1       	brcs	.+84     	; 0x23b0 <__fixsfsi+0x80>
    235c:	84 30       	cpi	r24, 0x04	; 4
    235e:	21 f4       	brne	.+8      	; 0x2368 <__fixsfsi+0x38>
    2360:	8e 81       	ldd	r24, Y+6	; 0x06
    2362:	88 23       	and	r24, r24
    2364:	51 f1       	breq	.+84     	; 0x23ba <__fixsfsi+0x8a>
    2366:	2e c0       	rjmp	.+92     	; 0x23c4 <__fixsfsi+0x94>
    2368:	2f 81       	ldd	r18, Y+7	; 0x07
    236a:	38 85       	ldd	r19, Y+8	; 0x08
    236c:	37 fd       	sbrc	r19, 7
    236e:	20 c0       	rjmp	.+64     	; 0x23b0 <__fixsfsi+0x80>
    2370:	6e 81       	ldd	r22, Y+6	; 0x06
    2372:	2f 31       	cpi	r18, 0x1F	; 31
    2374:	31 05       	cpc	r19, r1
    2376:	1c f0       	brlt	.+6      	; 0x237e <__fixsfsi+0x4e>
    2378:	66 23       	and	r22, r22
    237a:	f9 f0       	breq	.+62     	; 0x23ba <__fixsfsi+0x8a>
    237c:	23 c0       	rjmp	.+70     	; 0x23c4 <__fixsfsi+0x94>
    237e:	8e e1       	ldi	r24, 0x1E	; 30
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	82 1b       	sub	r24, r18
    2384:	93 0b       	sbc	r25, r19
    2386:	29 85       	ldd	r18, Y+9	; 0x09
    2388:	3a 85       	ldd	r19, Y+10	; 0x0a
    238a:	4b 85       	ldd	r20, Y+11	; 0x0b
    238c:	5c 85       	ldd	r21, Y+12	; 0x0c
    238e:	04 c0       	rjmp	.+8      	; 0x2398 <__fixsfsi+0x68>
    2390:	56 95       	lsr	r21
    2392:	47 95       	ror	r20
    2394:	37 95       	ror	r19
    2396:	27 95       	ror	r18
    2398:	8a 95       	dec	r24
    239a:	d2 f7       	brpl	.-12     	; 0x2390 <__fixsfsi+0x60>
    239c:	66 23       	and	r22, r22
    239e:	b1 f0       	breq	.+44     	; 0x23cc <__fixsfsi+0x9c>
    23a0:	50 95       	com	r21
    23a2:	40 95       	com	r20
    23a4:	30 95       	com	r19
    23a6:	21 95       	neg	r18
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	4f 4f       	sbci	r20, 0xFF	; 255
    23ac:	5f 4f       	sbci	r21, 0xFF	; 255
    23ae:	0e c0       	rjmp	.+28     	; 0x23cc <__fixsfsi+0x9c>
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e0       	ldi	r20, 0x00	; 0
    23b6:	50 e0       	ldi	r21, 0x00	; 0
    23b8:	09 c0       	rjmp	.+18     	; 0x23cc <__fixsfsi+0x9c>
    23ba:	2f ef       	ldi	r18, 0xFF	; 255
    23bc:	3f ef       	ldi	r19, 0xFF	; 255
    23be:	4f ef       	ldi	r20, 0xFF	; 255
    23c0:	5f e7       	ldi	r21, 0x7F	; 127
    23c2:	04 c0       	rjmp	.+8      	; 0x23cc <__fixsfsi+0x9c>
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	50 e8       	ldi	r21, 0x80	; 128
    23cc:	b9 01       	movw	r22, r18
    23ce:	ca 01       	movw	r24, r20
    23d0:	2c 96       	adiw	r28, 0x0c	; 12
    23d2:	e2 e0       	ldi	r30, 0x02	; 2
    23d4:	0c 94 65 4c 	jmp	0x98ca	; 0x98ca <__epilogue_restores__+0x20>

000023d8 <__floatunsisf>:
    23d8:	a8 e0       	ldi	r26, 0x08	; 8
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	e2 ef       	ldi	r30, 0xF2	; 242
    23de:	f1 e1       	ldi	r31, 0x11	; 17
    23e0:	0c 94 41 4c 	jmp	0x9882	; 0x9882 <__prologue_saves__+0x10>
    23e4:	7b 01       	movw	r14, r22
    23e6:	8c 01       	movw	r16, r24
    23e8:	61 15       	cp	r22, r1
    23ea:	71 05       	cpc	r23, r1
    23ec:	81 05       	cpc	r24, r1
    23ee:	91 05       	cpc	r25, r1
    23f0:	19 f4       	brne	.+6      	; 0x23f8 <__floatunsisf+0x20>
    23f2:	82 e0       	ldi	r24, 0x02	; 2
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	60 c0       	rjmp	.+192    	; 0x24b8 <__floatunsisf+0xe0>
    23f8:	83 e0       	ldi	r24, 0x03	; 3
    23fa:	89 83       	std	Y+1, r24	; 0x01
    23fc:	8e e1       	ldi	r24, 0x1E	; 30
    23fe:	c8 2e       	mov	r12, r24
    2400:	d1 2c       	mov	r13, r1
    2402:	dc 82       	std	Y+4, r13	; 0x04
    2404:	cb 82       	std	Y+3, r12	; 0x03
    2406:	ed 82       	std	Y+5, r14	; 0x05
    2408:	fe 82       	std	Y+6, r15	; 0x06
    240a:	0f 83       	std	Y+7, r16	; 0x07
    240c:	18 87       	std	Y+8, r17	; 0x08
    240e:	c8 01       	movw	r24, r16
    2410:	b7 01       	movw	r22, r14
    2412:	0e 94 65 12 	call	0x24ca	; 0x24ca <__clzsi2>
    2416:	fc 01       	movw	r30, r24
    2418:	31 97       	sbiw	r30, 0x01	; 1
    241a:	f7 ff       	sbrs	r31, 7
    241c:	3b c0       	rjmp	.+118    	; 0x2494 <__floatunsisf+0xbc>
    241e:	22 27       	eor	r18, r18
    2420:	33 27       	eor	r19, r19
    2422:	2e 1b       	sub	r18, r30
    2424:	3f 0b       	sbc	r19, r31
    2426:	57 01       	movw	r10, r14
    2428:	68 01       	movw	r12, r16
    242a:	02 2e       	mov	r0, r18
    242c:	04 c0       	rjmp	.+8      	; 0x2436 <__floatunsisf+0x5e>
    242e:	d6 94       	lsr	r13
    2430:	c7 94       	ror	r12
    2432:	b7 94       	ror	r11
    2434:	a7 94       	ror	r10
    2436:	0a 94       	dec	r0
    2438:	d2 f7       	brpl	.-12     	; 0x242e <__floatunsisf+0x56>
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	60 e0       	ldi	r22, 0x00	; 0
    2440:	70 e0       	ldi	r23, 0x00	; 0
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	a0 e0       	ldi	r26, 0x00	; 0
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	04 c0       	rjmp	.+8      	; 0x2454 <__floatunsisf+0x7c>
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	aa 1f       	adc	r26, r26
    2452:	bb 1f       	adc	r27, r27
    2454:	2a 95       	dec	r18
    2456:	d2 f7       	brpl	.-12     	; 0x244c <__floatunsisf+0x74>
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	a1 09       	sbc	r26, r1
    245c:	b1 09       	sbc	r27, r1
    245e:	8e 21       	and	r24, r14
    2460:	9f 21       	and	r25, r15
    2462:	a0 23       	and	r26, r16
    2464:	b1 23       	and	r27, r17
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	a1 05       	cpc	r26, r1
    246a:	b1 05       	cpc	r27, r1
    246c:	21 f0       	breq	.+8      	; 0x2476 <__floatunsisf+0x9e>
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	50 e0       	ldi	r21, 0x00	; 0
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	70 e0       	ldi	r23, 0x00	; 0
    2476:	4a 29       	or	r20, r10
    2478:	5b 29       	or	r21, r11
    247a:	6c 29       	or	r22, r12
    247c:	7d 29       	or	r23, r13
    247e:	4d 83       	std	Y+5, r20	; 0x05
    2480:	5e 83       	std	Y+6, r21	; 0x06
    2482:	6f 83       	std	Y+7, r22	; 0x07
    2484:	78 87       	std	Y+8, r23	; 0x08
    2486:	8e e1       	ldi	r24, 0x1E	; 30
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	8e 1b       	sub	r24, r30
    248c:	9f 0b       	sbc	r25, r31
    248e:	9c 83       	std	Y+4, r25	; 0x04
    2490:	8b 83       	std	Y+3, r24	; 0x03
    2492:	12 c0       	rjmp	.+36     	; 0x24b8 <__floatunsisf+0xe0>
    2494:	30 97       	sbiw	r30, 0x00	; 0
    2496:	81 f0       	breq	.+32     	; 0x24b8 <__floatunsisf+0xe0>
    2498:	0e 2e       	mov	r0, r30
    249a:	04 c0       	rjmp	.+8      	; 0x24a4 <__floatunsisf+0xcc>
    249c:	ee 0c       	add	r14, r14
    249e:	ff 1c       	adc	r15, r15
    24a0:	00 1f       	adc	r16, r16
    24a2:	11 1f       	adc	r17, r17
    24a4:	0a 94       	dec	r0
    24a6:	d2 f7       	brpl	.-12     	; 0x249c <__floatunsisf+0xc4>
    24a8:	ed 82       	std	Y+5, r14	; 0x05
    24aa:	fe 82       	std	Y+6, r15	; 0x06
    24ac:	0f 83       	std	Y+7, r16	; 0x07
    24ae:	18 87       	std	Y+8, r17	; 0x08
    24b0:	ce 1a       	sub	r12, r30
    24b2:	df 0a       	sbc	r13, r31
    24b4:	dc 82       	std	Y+4, r13	; 0x04
    24b6:	cb 82       	std	Y+3, r12	; 0x03
    24b8:	1a 82       	std	Y+2, r1	; 0x02
    24ba:	ce 01       	movw	r24, r28
    24bc:	01 96       	adiw	r24, 0x01	; 1
    24be:	0e 94 b4 12 	call	0x2568	; 0x2568 <__pack_f>
    24c2:	28 96       	adiw	r28, 0x08	; 8
    24c4:	ea e0       	ldi	r30, 0x0A	; 10
    24c6:	0c 94 5d 4c 	jmp	0x98ba	; 0x98ba <__epilogue_restores__+0x10>

000024ca <__clzsi2>:
    24ca:	ef 92       	push	r14
    24cc:	ff 92       	push	r15
    24ce:	0f 93       	push	r16
    24d0:	1f 93       	push	r17
    24d2:	7b 01       	movw	r14, r22
    24d4:	8c 01       	movw	r16, r24
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	e8 16       	cp	r14, r24
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	f8 06       	cpc	r15, r24
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	08 07       	cpc	r16, r24
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	18 07       	cpc	r17, r24
    24e6:	88 f4       	brcc	.+34     	; 0x250a <__clzsi2+0x40>
    24e8:	8f ef       	ldi	r24, 0xFF	; 255
    24ea:	e8 16       	cp	r14, r24
    24ec:	f1 04       	cpc	r15, r1
    24ee:	01 05       	cpc	r16, r1
    24f0:	11 05       	cpc	r17, r1
    24f2:	31 f0       	breq	.+12     	; 0x2500 <__clzsi2+0x36>
    24f4:	28 f0       	brcs	.+10     	; 0x2500 <__clzsi2+0x36>
    24f6:	88 e0       	ldi	r24, 0x08	; 8
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	a0 e0       	ldi	r26, 0x00	; 0
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	17 c0       	rjmp	.+46     	; 0x252e <__clzsi2+0x64>
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	a0 e0       	ldi	r26, 0x00	; 0
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	12 c0       	rjmp	.+36     	; 0x252e <__clzsi2+0x64>
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	e8 16       	cp	r14, r24
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	f8 06       	cpc	r15, r24
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	08 07       	cpc	r16, r24
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	18 07       	cpc	r17, r24
    251a:	28 f0       	brcs	.+10     	; 0x2526 <__clzsi2+0x5c>
    251c:	88 e1       	ldi	r24, 0x18	; 24
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	a0 e0       	ldi	r26, 0x00	; 0
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	04 c0       	rjmp	.+8      	; 0x252e <__clzsi2+0x64>
    2526:	80 e1       	ldi	r24, 0x10	; 16
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	a0 e0       	ldi	r26, 0x00	; 0
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	20 e2       	ldi	r18, 0x20	; 32
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e0       	ldi	r20, 0x00	; 0
    2534:	50 e0       	ldi	r21, 0x00	; 0
    2536:	28 1b       	sub	r18, r24
    2538:	39 0b       	sbc	r19, r25
    253a:	4a 0b       	sbc	r20, r26
    253c:	5b 0b       	sbc	r21, r27
    253e:	04 c0       	rjmp	.+8      	; 0x2548 <__clzsi2+0x7e>
    2540:	16 95       	lsr	r17
    2542:	07 95       	ror	r16
    2544:	f7 94       	ror	r15
    2546:	e7 94       	ror	r14
    2548:	8a 95       	dec	r24
    254a:	d2 f7       	brpl	.-12     	; 0x2540 <__clzsi2+0x76>
    254c:	f7 01       	movw	r30, r14
    254e:	e6 5e       	subi	r30, 0xE6	; 230
    2550:	fe 4f       	sbci	r31, 0xFE	; 254
    2552:	80 81       	ld	r24, Z
    2554:	28 1b       	sub	r18, r24
    2556:	31 09       	sbc	r19, r1
    2558:	41 09       	sbc	r20, r1
    255a:	51 09       	sbc	r21, r1
    255c:	c9 01       	movw	r24, r18
    255e:	1f 91       	pop	r17
    2560:	0f 91       	pop	r16
    2562:	ff 90       	pop	r15
    2564:	ef 90       	pop	r14
    2566:	08 95       	ret

00002568 <__pack_f>:
    2568:	df 92       	push	r13
    256a:	ef 92       	push	r14
    256c:	ff 92       	push	r15
    256e:	0f 93       	push	r16
    2570:	1f 93       	push	r17
    2572:	fc 01       	movw	r30, r24
    2574:	e4 80       	ldd	r14, Z+4	; 0x04
    2576:	f5 80       	ldd	r15, Z+5	; 0x05
    2578:	06 81       	ldd	r16, Z+6	; 0x06
    257a:	17 81       	ldd	r17, Z+7	; 0x07
    257c:	d1 80       	ldd	r13, Z+1	; 0x01
    257e:	80 81       	ld	r24, Z
    2580:	82 30       	cpi	r24, 0x02	; 2
    2582:	48 f4       	brcc	.+18     	; 0x2596 <__pack_f+0x2e>
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	a0 e1       	ldi	r26, 0x10	; 16
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	e8 2a       	or	r14, r24
    258e:	f9 2a       	or	r15, r25
    2590:	0a 2b       	or	r16, r26
    2592:	1b 2b       	or	r17, r27
    2594:	a5 c0       	rjmp	.+330    	; 0x26e0 <__pack_f+0x178>
    2596:	84 30       	cpi	r24, 0x04	; 4
    2598:	09 f4       	brne	.+2      	; 0x259c <__pack_f+0x34>
    259a:	9f c0       	rjmp	.+318    	; 0x26da <__pack_f+0x172>
    259c:	82 30       	cpi	r24, 0x02	; 2
    259e:	21 f4       	brne	.+8      	; 0x25a8 <__pack_f+0x40>
    25a0:	ee 24       	eor	r14, r14
    25a2:	ff 24       	eor	r15, r15
    25a4:	87 01       	movw	r16, r14
    25a6:	05 c0       	rjmp	.+10     	; 0x25b2 <__pack_f+0x4a>
    25a8:	e1 14       	cp	r14, r1
    25aa:	f1 04       	cpc	r15, r1
    25ac:	01 05       	cpc	r16, r1
    25ae:	11 05       	cpc	r17, r1
    25b0:	19 f4       	brne	.+6      	; 0x25b8 <__pack_f+0x50>
    25b2:	e0 e0       	ldi	r30, 0x00	; 0
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	96 c0       	rjmp	.+300    	; 0x26e4 <__pack_f+0x17c>
    25b8:	62 81       	ldd	r22, Z+2	; 0x02
    25ba:	73 81       	ldd	r23, Z+3	; 0x03
    25bc:	9f ef       	ldi	r25, 0xFF	; 255
    25be:	62 38       	cpi	r22, 0x82	; 130
    25c0:	79 07       	cpc	r23, r25
    25c2:	0c f0       	brlt	.+2      	; 0x25c6 <__pack_f+0x5e>
    25c4:	5b c0       	rjmp	.+182    	; 0x267c <__pack_f+0x114>
    25c6:	22 e8       	ldi	r18, 0x82	; 130
    25c8:	3f ef       	ldi	r19, 0xFF	; 255
    25ca:	26 1b       	sub	r18, r22
    25cc:	37 0b       	sbc	r19, r23
    25ce:	2a 31       	cpi	r18, 0x1A	; 26
    25d0:	31 05       	cpc	r19, r1
    25d2:	2c f0       	brlt	.+10     	; 0x25de <__pack_f+0x76>
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e0       	ldi	r20, 0x00	; 0
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	2a c0       	rjmp	.+84     	; 0x2632 <__pack_f+0xca>
    25de:	b8 01       	movw	r22, r16
    25e0:	a7 01       	movw	r20, r14
    25e2:	02 2e       	mov	r0, r18
    25e4:	04 c0       	rjmp	.+8      	; 0x25ee <__pack_f+0x86>
    25e6:	76 95       	lsr	r23
    25e8:	67 95       	ror	r22
    25ea:	57 95       	ror	r21
    25ec:	47 95       	ror	r20
    25ee:	0a 94       	dec	r0
    25f0:	d2 f7       	brpl	.-12     	; 0x25e6 <__pack_f+0x7e>
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	a0 e0       	ldi	r26, 0x00	; 0
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	04 c0       	rjmp	.+8      	; 0x2604 <__pack_f+0x9c>
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	aa 1f       	adc	r26, r26
    2602:	bb 1f       	adc	r27, r27
    2604:	2a 95       	dec	r18
    2606:	d2 f7       	brpl	.-12     	; 0x25fc <__pack_f+0x94>
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	a1 09       	sbc	r26, r1
    260c:	b1 09       	sbc	r27, r1
    260e:	8e 21       	and	r24, r14
    2610:	9f 21       	and	r25, r15
    2612:	a0 23       	and	r26, r16
    2614:	b1 23       	and	r27, r17
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	a1 05       	cpc	r26, r1
    261a:	b1 05       	cpc	r27, r1
    261c:	21 f0       	breq	.+8      	; 0x2626 <__pack_f+0xbe>
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	a0 e0       	ldi	r26, 0x00	; 0
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	9a 01       	movw	r18, r20
    2628:	ab 01       	movw	r20, r22
    262a:	28 2b       	or	r18, r24
    262c:	39 2b       	or	r19, r25
    262e:	4a 2b       	or	r20, r26
    2630:	5b 2b       	or	r21, r27
    2632:	da 01       	movw	r26, r20
    2634:	c9 01       	movw	r24, r18
    2636:	8f 77       	andi	r24, 0x7F	; 127
    2638:	90 70       	andi	r25, 0x00	; 0
    263a:	a0 70       	andi	r26, 0x00	; 0
    263c:	b0 70       	andi	r27, 0x00	; 0
    263e:	80 34       	cpi	r24, 0x40	; 64
    2640:	91 05       	cpc	r25, r1
    2642:	a1 05       	cpc	r26, r1
    2644:	b1 05       	cpc	r27, r1
    2646:	39 f4       	brne	.+14     	; 0x2656 <__pack_f+0xee>
    2648:	27 ff       	sbrs	r18, 7
    264a:	09 c0       	rjmp	.+18     	; 0x265e <__pack_f+0xf6>
    264c:	20 5c       	subi	r18, 0xC0	; 192
    264e:	3f 4f       	sbci	r19, 0xFF	; 255
    2650:	4f 4f       	sbci	r20, 0xFF	; 255
    2652:	5f 4f       	sbci	r21, 0xFF	; 255
    2654:	04 c0       	rjmp	.+8      	; 0x265e <__pack_f+0xf6>
    2656:	21 5c       	subi	r18, 0xC1	; 193
    2658:	3f 4f       	sbci	r19, 0xFF	; 255
    265a:	4f 4f       	sbci	r20, 0xFF	; 255
    265c:	5f 4f       	sbci	r21, 0xFF	; 255
    265e:	e0 e0       	ldi	r30, 0x00	; 0
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	20 30       	cpi	r18, 0x00	; 0
    2664:	a0 e0       	ldi	r26, 0x00	; 0
    2666:	3a 07       	cpc	r19, r26
    2668:	a0 e0       	ldi	r26, 0x00	; 0
    266a:	4a 07       	cpc	r20, r26
    266c:	a0 e4       	ldi	r26, 0x40	; 64
    266e:	5a 07       	cpc	r21, r26
    2670:	10 f0       	brcs	.+4      	; 0x2676 <__pack_f+0x10e>
    2672:	e1 e0       	ldi	r30, 0x01	; 1
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	79 01       	movw	r14, r18
    2678:	8a 01       	movw	r16, r20
    267a:	27 c0       	rjmp	.+78     	; 0x26ca <__pack_f+0x162>
    267c:	60 38       	cpi	r22, 0x80	; 128
    267e:	71 05       	cpc	r23, r1
    2680:	64 f5       	brge	.+88     	; 0x26da <__pack_f+0x172>
    2682:	fb 01       	movw	r30, r22
    2684:	e1 58       	subi	r30, 0x81	; 129
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	d8 01       	movw	r26, r16
    268a:	c7 01       	movw	r24, r14
    268c:	8f 77       	andi	r24, 0x7F	; 127
    268e:	90 70       	andi	r25, 0x00	; 0
    2690:	a0 70       	andi	r26, 0x00	; 0
    2692:	b0 70       	andi	r27, 0x00	; 0
    2694:	80 34       	cpi	r24, 0x40	; 64
    2696:	91 05       	cpc	r25, r1
    2698:	a1 05       	cpc	r26, r1
    269a:	b1 05       	cpc	r27, r1
    269c:	39 f4       	brne	.+14     	; 0x26ac <__pack_f+0x144>
    269e:	e7 fe       	sbrs	r14, 7
    26a0:	0d c0       	rjmp	.+26     	; 0x26bc <__pack_f+0x154>
    26a2:	80 e4       	ldi	r24, 0x40	; 64
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	a0 e0       	ldi	r26, 0x00	; 0
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	04 c0       	rjmp	.+8      	; 0x26b4 <__pack_f+0x14c>
    26ac:	8f e3       	ldi	r24, 0x3F	; 63
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	a0 e0       	ldi	r26, 0x00	; 0
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	e8 0e       	add	r14, r24
    26b6:	f9 1e       	adc	r15, r25
    26b8:	0a 1f       	adc	r16, r26
    26ba:	1b 1f       	adc	r17, r27
    26bc:	17 ff       	sbrs	r17, 7
    26be:	05 c0       	rjmp	.+10     	; 0x26ca <__pack_f+0x162>
    26c0:	16 95       	lsr	r17
    26c2:	07 95       	ror	r16
    26c4:	f7 94       	ror	r15
    26c6:	e7 94       	ror	r14
    26c8:	31 96       	adiw	r30, 0x01	; 1
    26ca:	87 e0       	ldi	r24, 0x07	; 7
    26cc:	16 95       	lsr	r17
    26ce:	07 95       	ror	r16
    26d0:	f7 94       	ror	r15
    26d2:	e7 94       	ror	r14
    26d4:	8a 95       	dec	r24
    26d6:	d1 f7       	brne	.-12     	; 0x26cc <__pack_f+0x164>
    26d8:	05 c0       	rjmp	.+10     	; 0x26e4 <__pack_f+0x17c>
    26da:	ee 24       	eor	r14, r14
    26dc:	ff 24       	eor	r15, r15
    26de:	87 01       	movw	r16, r14
    26e0:	ef ef       	ldi	r30, 0xFF	; 255
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	6e 2f       	mov	r22, r30
    26e6:	67 95       	ror	r22
    26e8:	66 27       	eor	r22, r22
    26ea:	67 95       	ror	r22
    26ec:	90 2f       	mov	r25, r16
    26ee:	9f 77       	andi	r25, 0x7F	; 127
    26f0:	d7 94       	ror	r13
    26f2:	dd 24       	eor	r13, r13
    26f4:	d7 94       	ror	r13
    26f6:	8e 2f       	mov	r24, r30
    26f8:	86 95       	lsr	r24
    26fa:	49 2f       	mov	r20, r25
    26fc:	46 2b       	or	r20, r22
    26fe:	58 2f       	mov	r21, r24
    2700:	5d 29       	or	r21, r13
    2702:	b7 01       	movw	r22, r14
    2704:	ca 01       	movw	r24, r20
    2706:	1f 91       	pop	r17
    2708:	0f 91       	pop	r16
    270a:	ff 90       	pop	r15
    270c:	ef 90       	pop	r14
    270e:	df 90       	pop	r13
    2710:	08 95       	ret

00002712 <__unpack_f>:
    2712:	fc 01       	movw	r30, r24
    2714:	db 01       	movw	r26, r22
    2716:	40 81       	ld	r20, Z
    2718:	51 81       	ldd	r21, Z+1	; 0x01
    271a:	22 81       	ldd	r18, Z+2	; 0x02
    271c:	62 2f       	mov	r22, r18
    271e:	6f 77       	andi	r22, 0x7F	; 127
    2720:	70 e0       	ldi	r23, 0x00	; 0
    2722:	22 1f       	adc	r18, r18
    2724:	22 27       	eor	r18, r18
    2726:	22 1f       	adc	r18, r18
    2728:	93 81       	ldd	r25, Z+3	; 0x03
    272a:	89 2f       	mov	r24, r25
    272c:	88 0f       	add	r24, r24
    272e:	82 2b       	or	r24, r18
    2730:	28 2f       	mov	r18, r24
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	99 1f       	adc	r25, r25
    2736:	99 27       	eor	r25, r25
    2738:	99 1f       	adc	r25, r25
    273a:	11 96       	adiw	r26, 0x01	; 1
    273c:	9c 93       	st	X, r25
    273e:	11 97       	sbiw	r26, 0x01	; 1
    2740:	21 15       	cp	r18, r1
    2742:	31 05       	cpc	r19, r1
    2744:	a9 f5       	brne	.+106    	; 0x27b0 <__unpack_f+0x9e>
    2746:	41 15       	cp	r20, r1
    2748:	51 05       	cpc	r21, r1
    274a:	61 05       	cpc	r22, r1
    274c:	71 05       	cpc	r23, r1
    274e:	11 f4       	brne	.+4      	; 0x2754 <__unpack_f+0x42>
    2750:	82 e0       	ldi	r24, 0x02	; 2
    2752:	37 c0       	rjmp	.+110    	; 0x27c2 <__unpack_f+0xb0>
    2754:	82 e8       	ldi	r24, 0x82	; 130
    2756:	9f ef       	ldi	r25, 0xFF	; 255
    2758:	13 96       	adiw	r26, 0x03	; 3
    275a:	9c 93       	st	X, r25
    275c:	8e 93       	st	-X, r24
    275e:	12 97       	sbiw	r26, 0x02	; 2
    2760:	9a 01       	movw	r18, r20
    2762:	ab 01       	movw	r20, r22
    2764:	67 e0       	ldi	r22, 0x07	; 7
    2766:	22 0f       	add	r18, r18
    2768:	33 1f       	adc	r19, r19
    276a:	44 1f       	adc	r20, r20
    276c:	55 1f       	adc	r21, r21
    276e:	6a 95       	dec	r22
    2770:	d1 f7       	brne	.-12     	; 0x2766 <__unpack_f+0x54>
    2772:	83 e0       	ldi	r24, 0x03	; 3
    2774:	8c 93       	st	X, r24
    2776:	0d c0       	rjmp	.+26     	; 0x2792 <__unpack_f+0x80>
    2778:	22 0f       	add	r18, r18
    277a:	33 1f       	adc	r19, r19
    277c:	44 1f       	adc	r20, r20
    277e:	55 1f       	adc	r21, r21
    2780:	12 96       	adiw	r26, 0x02	; 2
    2782:	8d 91       	ld	r24, X+
    2784:	9c 91       	ld	r25, X
    2786:	13 97       	sbiw	r26, 0x03	; 3
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	13 96       	adiw	r26, 0x03	; 3
    278c:	9c 93       	st	X, r25
    278e:	8e 93       	st	-X, r24
    2790:	12 97       	sbiw	r26, 0x02	; 2
    2792:	20 30       	cpi	r18, 0x00	; 0
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	38 07       	cpc	r19, r24
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	48 07       	cpc	r20, r24
    279c:	80 e4       	ldi	r24, 0x40	; 64
    279e:	58 07       	cpc	r21, r24
    27a0:	58 f3       	brcs	.-42     	; 0x2778 <__unpack_f+0x66>
    27a2:	14 96       	adiw	r26, 0x04	; 4
    27a4:	2d 93       	st	X+, r18
    27a6:	3d 93       	st	X+, r19
    27a8:	4d 93       	st	X+, r20
    27aa:	5c 93       	st	X, r21
    27ac:	17 97       	sbiw	r26, 0x07	; 7
    27ae:	08 95       	ret
    27b0:	2f 3f       	cpi	r18, 0xFF	; 255
    27b2:	31 05       	cpc	r19, r1
    27b4:	79 f4       	brne	.+30     	; 0x27d4 <__unpack_f+0xc2>
    27b6:	41 15       	cp	r20, r1
    27b8:	51 05       	cpc	r21, r1
    27ba:	61 05       	cpc	r22, r1
    27bc:	71 05       	cpc	r23, r1
    27be:	19 f4       	brne	.+6      	; 0x27c6 <__unpack_f+0xb4>
    27c0:	84 e0       	ldi	r24, 0x04	; 4
    27c2:	8c 93       	st	X, r24
    27c4:	08 95       	ret
    27c6:	64 ff       	sbrs	r22, 4
    27c8:	03 c0       	rjmp	.+6      	; 0x27d0 <__unpack_f+0xbe>
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	8c 93       	st	X, r24
    27ce:	12 c0       	rjmp	.+36     	; 0x27f4 <__unpack_f+0xe2>
    27d0:	1c 92       	st	X, r1
    27d2:	10 c0       	rjmp	.+32     	; 0x27f4 <__unpack_f+0xe2>
    27d4:	2f 57       	subi	r18, 0x7F	; 127
    27d6:	30 40       	sbci	r19, 0x00	; 0
    27d8:	13 96       	adiw	r26, 0x03	; 3
    27da:	3c 93       	st	X, r19
    27dc:	2e 93       	st	-X, r18
    27de:	12 97       	sbiw	r26, 0x02	; 2
    27e0:	83 e0       	ldi	r24, 0x03	; 3
    27e2:	8c 93       	st	X, r24
    27e4:	87 e0       	ldi	r24, 0x07	; 7
    27e6:	44 0f       	add	r20, r20
    27e8:	55 1f       	adc	r21, r21
    27ea:	66 1f       	adc	r22, r22
    27ec:	77 1f       	adc	r23, r23
    27ee:	8a 95       	dec	r24
    27f0:	d1 f7       	brne	.-12     	; 0x27e6 <__unpack_f+0xd4>
    27f2:	70 64       	ori	r23, 0x40	; 64
    27f4:	14 96       	adiw	r26, 0x04	; 4
    27f6:	4d 93       	st	X+, r20
    27f8:	5d 93       	st	X+, r21
    27fa:	6d 93       	st	X+, r22
    27fc:	7c 93       	st	X, r23
    27fe:	17 97       	sbiw	r26, 0x07	; 7
    2800:	08 95       	ret

00002802 <__fpcmp_parts_f>:
    2802:	1f 93       	push	r17
    2804:	dc 01       	movw	r26, r24
    2806:	fb 01       	movw	r30, r22
    2808:	9c 91       	ld	r25, X
    280a:	92 30       	cpi	r25, 0x02	; 2
    280c:	08 f4       	brcc	.+2      	; 0x2810 <__fpcmp_parts_f+0xe>
    280e:	47 c0       	rjmp	.+142    	; 0x289e <__fpcmp_parts_f+0x9c>
    2810:	80 81       	ld	r24, Z
    2812:	82 30       	cpi	r24, 0x02	; 2
    2814:	08 f4       	brcc	.+2      	; 0x2818 <__fpcmp_parts_f+0x16>
    2816:	43 c0       	rjmp	.+134    	; 0x289e <__fpcmp_parts_f+0x9c>
    2818:	94 30       	cpi	r25, 0x04	; 4
    281a:	51 f4       	brne	.+20     	; 0x2830 <__fpcmp_parts_f+0x2e>
    281c:	11 96       	adiw	r26, 0x01	; 1
    281e:	1c 91       	ld	r17, X
    2820:	84 30       	cpi	r24, 0x04	; 4
    2822:	99 f5       	brne	.+102    	; 0x288a <__fpcmp_parts_f+0x88>
    2824:	81 81       	ldd	r24, Z+1	; 0x01
    2826:	68 2f       	mov	r22, r24
    2828:	70 e0       	ldi	r23, 0x00	; 0
    282a:	61 1b       	sub	r22, r17
    282c:	71 09       	sbc	r23, r1
    282e:	3f c0       	rjmp	.+126    	; 0x28ae <__fpcmp_parts_f+0xac>
    2830:	84 30       	cpi	r24, 0x04	; 4
    2832:	21 f0       	breq	.+8      	; 0x283c <__fpcmp_parts_f+0x3a>
    2834:	92 30       	cpi	r25, 0x02	; 2
    2836:	31 f4       	brne	.+12     	; 0x2844 <__fpcmp_parts_f+0x42>
    2838:	82 30       	cpi	r24, 0x02	; 2
    283a:	b9 f1       	breq	.+110    	; 0x28aa <__fpcmp_parts_f+0xa8>
    283c:	81 81       	ldd	r24, Z+1	; 0x01
    283e:	88 23       	and	r24, r24
    2840:	89 f1       	breq	.+98     	; 0x28a4 <__fpcmp_parts_f+0xa2>
    2842:	2d c0       	rjmp	.+90     	; 0x289e <__fpcmp_parts_f+0x9c>
    2844:	11 96       	adiw	r26, 0x01	; 1
    2846:	1c 91       	ld	r17, X
    2848:	11 97       	sbiw	r26, 0x01	; 1
    284a:	82 30       	cpi	r24, 0x02	; 2
    284c:	f1 f0       	breq	.+60     	; 0x288a <__fpcmp_parts_f+0x88>
    284e:	81 81       	ldd	r24, Z+1	; 0x01
    2850:	18 17       	cp	r17, r24
    2852:	d9 f4       	brne	.+54     	; 0x288a <__fpcmp_parts_f+0x88>
    2854:	12 96       	adiw	r26, 0x02	; 2
    2856:	2d 91       	ld	r18, X+
    2858:	3c 91       	ld	r19, X
    285a:	13 97       	sbiw	r26, 0x03	; 3
    285c:	82 81       	ldd	r24, Z+2	; 0x02
    285e:	93 81       	ldd	r25, Z+3	; 0x03
    2860:	82 17       	cp	r24, r18
    2862:	93 07       	cpc	r25, r19
    2864:	94 f0       	brlt	.+36     	; 0x288a <__fpcmp_parts_f+0x88>
    2866:	28 17       	cp	r18, r24
    2868:	39 07       	cpc	r19, r25
    286a:	bc f0       	brlt	.+46     	; 0x289a <__fpcmp_parts_f+0x98>
    286c:	14 96       	adiw	r26, 0x04	; 4
    286e:	8d 91       	ld	r24, X+
    2870:	9d 91       	ld	r25, X+
    2872:	0d 90       	ld	r0, X+
    2874:	bc 91       	ld	r27, X
    2876:	a0 2d       	mov	r26, r0
    2878:	24 81       	ldd	r18, Z+4	; 0x04
    287a:	35 81       	ldd	r19, Z+5	; 0x05
    287c:	46 81       	ldd	r20, Z+6	; 0x06
    287e:	57 81       	ldd	r21, Z+7	; 0x07
    2880:	28 17       	cp	r18, r24
    2882:	39 07       	cpc	r19, r25
    2884:	4a 07       	cpc	r20, r26
    2886:	5b 07       	cpc	r21, r27
    2888:	18 f4       	brcc	.+6      	; 0x2890 <__fpcmp_parts_f+0x8e>
    288a:	11 23       	and	r17, r17
    288c:	41 f0       	breq	.+16     	; 0x289e <__fpcmp_parts_f+0x9c>
    288e:	0a c0       	rjmp	.+20     	; 0x28a4 <__fpcmp_parts_f+0xa2>
    2890:	82 17       	cp	r24, r18
    2892:	93 07       	cpc	r25, r19
    2894:	a4 07       	cpc	r26, r20
    2896:	b5 07       	cpc	r27, r21
    2898:	40 f4       	brcc	.+16     	; 0x28aa <__fpcmp_parts_f+0xa8>
    289a:	11 23       	and	r17, r17
    289c:	19 f0       	breq	.+6      	; 0x28a4 <__fpcmp_parts_f+0xa2>
    289e:	61 e0       	ldi	r22, 0x01	; 1
    28a0:	70 e0       	ldi	r23, 0x00	; 0
    28a2:	05 c0       	rjmp	.+10     	; 0x28ae <__fpcmp_parts_f+0xac>
    28a4:	6f ef       	ldi	r22, 0xFF	; 255
    28a6:	7f ef       	ldi	r23, 0xFF	; 255
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <__fpcmp_parts_f+0xac>
    28aa:	60 e0       	ldi	r22, 0x00	; 0
    28ac:	70 e0       	ldi	r23, 0x00	; 0
    28ae:	cb 01       	movw	r24, r22
    28b0:	1f 91       	pop	r17
    28b2:	08 95       	ret

000028b4 <ADC_voidInit>:




void ADC_voidInit(void)
{
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
#if ADC_VOLT_REFRE == ADC_AREF
	CLR_BIT(ADMUX_REG , ADMUX_REFS0) ;
	CLR_BIT(ADMUX_REG , ADMUX_REFS1) ;

#elif ADC_VOLT_REFRE == ADC_AVCC
	SET_BIT(ADMUX_REG , ADMUX_REFS0) ;
    28bc:	a7 e2       	ldi	r26, 0x27	; 39
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	e7 e2       	ldi	r30, 0x27	; 39
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	80 64       	ori	r24, 0x40	; 64
    28c8:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG , ADMUX_REFS1) ;
    28ca:	a7 e2       	ldi	r26, 0x27	; 39
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	e7 e2       	ldi	r30, 0x27	; 39
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	8f 77       	andi	r24, 0x7F	; 127
    28d6:	8c 93       	st	X, r24
#endif


	/*Selection the ADE Reading Adjustment*/
#if ADC_ADJUSTMENT_READING == ADC_TEN_BITS_MOOD
	CLR_BIT(ADMUX_REG , ADMUX_ADLAR) ;
    28d8:	a7 e2       	ldi	r26, 0x27	; 39
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	e7 e2       	ldi	r30, 0x27	; 39
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	8f 7d       	andi	r24, 0xDF	; 223
    28e4:	8c 93       	st	X, r24

#endif


	/*Set the Pre_scaler BITS_MASKING*/
	ADCSRA_REG &= ADC_PRESCALERMASK;
    28e6:	a6 e2       	ldi	r26, 0x26	; 38
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	e6 e2       	ldi	r30, 0x26	; 38
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	88 7f       	andi	r24, 0xF8	; 248
    28f2:	8c 93       	st	X, r24
	ADCSRA_REG |= ADC_PRESCALLER;
    28f4:	a6 e2       	ldi	r26, 0x26	; 38
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	e6 e2       	ldi	r30, 0x26	; 38
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	87 60       	ori	r24, 0x07	; 7
    2900:	8c 93       	st	X, r24


	/*Enable ADC Peripheral*/
	SET_BIT(ADCSRA_REG,ADCSRA_ADEN);
    2902:	a6 e2       	ldi	r26, 0x26	; 38
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	e6 e2       	ldi	r30, 0x26	; 38
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	80 68       	ori	r24, 0x80	; 128
    290e:	8c 93       	st	X, r24
	/*	Setting Conversion Mood ADC  */
	/* Single Conversion Mood */
#if  ADC_CONVERSION_MOOD  ==  SINGLE_CONVERSION

	/* Clear the Auto trigger mode*/
	CLR_BIT(ADCSRA_REG,ADCSRA_ADATE);
    2910:	a6 e2       	ldi	r26, 0x26	; 38
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	e6 e2       	ldi	r30, 0x26	; 38
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	8f 7d       	andi	r24, 0xDF	; 223
    291c:	8c 93       	st	X, r24

	/*Disable interrupt*/
	CLR_BIT(ADCSRA_REG,ADCSRA_ADIE);
    291e:	a6 e2       	ldi	r26, 0x26	; 38
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	e6 e2       	ldi	r30, 0x26	; 38
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	87 7f       	andi	r24, 0xF7	; 247
    292a:	8c 93       	st	X, r24

#else
#error "Wrong ADC_STATUS configuration"
#endif

}
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	08 95       	ret

00002932 <ADC_u16StartConversionSynch>:


u8 ADC_u16StartConversionSynch(u8 Copy_u8Channel , u16 *Copy_pu16Reading )
{
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	28 97       	sbiw	r28, 0x08	; 8
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	f8 94       	cli
    2940:	de bf       	out	0x3e, r29	; 62
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	cd bf       	out	0x3d, r28	; 61
    2946:	8e 83       	std	Y+6, r24	; 0x06
    2948:	78 87       	std	Y+8, r23	; 0x08
    294a:	6f 83       	std	Y+7, r22	; 0x07
	u8	Local_u8ErrorStatu = STD_TYPES_OK;
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeoutCounter = 0 ;
    2950:	19 82       	std	Y+1, r1	; 0x01
    2952:	1a 82       	std	Y+2, r1	; 0x02
    2954:	1b 82       	std	Y+3, r1	; 0x03
    2956:	1c 82       	std	Y+4, r1	; 0x04

	/*HINT:*****************
	 * is Safety for the Function is run and interrupt happen and call function again */
	if (ADC_u8BusyState == ADC_IDLE )
    2958:	80 91 45 02 	lds	r24, 0x0245
    295c:	88 23       	and	r24, r24
    295e:	09 f0       	breq	.+2      	; 0x2962 <ADC_u16StartConversionSynch+0x30>
    2960:	67 c0       	rjmp	.+206    	; 0x2a30 <ADC_u16StartConversionSynch+0xfe>
	{
		/*Make ADC is now Busy*/
		ADC_u8BusyState=ADC_BUSY;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	80 93 45 02 	sts	0x0245, r24

		/*Clear the Mux_bits in ADMUX register*/
		ADMUX_REG &= ADC_CHANNELMASK;
    2968:	a7 e2       	ldi	r26, 0x27	; 39
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	e7 e2       	ldi	r30, 0x27	; 39
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	80 7e       	andi	r24, 0xE0	; 224
    2974:	8c 93       	st	X, r24

		/*Set the required channel into the Mux_bits*/
		ADMUX_REG |= Copy_u8Channel;
    2976:	a7 e2       	ldi	r26, 0x27	; 39
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	e7 e2       	ldi	r30, 0x27	; 39
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	90 81       	ld	r25, Z
    2980:	8e 81       	ldd	r24, Y+6	; 0x06
    2982:	89 2b       	or	r24, r25
    2984:	8c 93       	st	X, r24

		/*Start Conversion*/
		SET_BIT(ADCSRA_REG,ADCSRA_ADSC);
    2986:	a6 e2       	ldi	r26, 0x26	; 38
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	e6 e2       	ldi	r30, 0x26	; 38
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	80 81       	ld	r24, Z
    2990:	80 64       	ori	r24, 0x40	; 64
    2992:	8c 93       	st	X, r24
    2994:	0b c0       	rjmp	.+22     	; 0x29ac <ADC_u16StartConversionSynch+0x7a>

		/*Polling (Busy waiting) until The conversion complete flag is set or Counter reaching Timeout_Value */
		while((GET_BIT(ADCSRA_REG,ADCSRA_ADIF) == 0) && (Local_u32TimeoutCounter != ADC_u32TIMEOUT ))
		{
			Local_u32TimeoutCounter++;
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	9a 81       	ldd	r25, Y+2	; 0x02
    299a:	ab 81       	ldd	r26, Y+3	; 0x03
    299c:	bc 81       	ldd	r27, Y+4	; 0x04
    299e:	01 96       	adiw	r24, 0x01	; 1
    29a0:	a1 1d       	adc	r26, r1
    29a2:	b1 1d       	adc	r27, r1
    29a4:	89 83       	std	Y+1, r24	; 0x01
    29a6:	9a 83       	std	Y+2, r25	; 0x02
    29a8:	ab 83       	std	Y+3, r26	; 0x03
    29aa:	bc 83       	std	Y+4, r27	; 0x04

		/*Start Conversion*/
		SET_BIT(ADCSRA_REG,ADCSRA_ADSC);

		/*Polling (Busy waiting) until The conversion complete flag is set or Counter reaching Timeout_Value */
		while((GET_BIT(ADCSRA_REG,ADCSRA_ADIF) == 0) && (Local_u32TimeoutCounter != ADC_u32TIMEOUT ))
    29ac:	e6 e2       	ldi	r30, 0x26	; 38
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	82 95       	swap	r24
    29b4:	8f 70       	andi	r24, 0x0F	; 15
    29b6:	88 2f       	mov	r24, r24
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	81 70       	andi	r24, 0x01	; 1
    29bc:	90 70       	andi	r25, 0x00	; 0
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	61 f4       	brne	.+24     	; 0x29da <ADC_u16StartConversionSynch+0xa8>
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	9a 81       	ldd	r25, Y+2	; 0x02
    29c6:	ab 81       	ldd	r26, Y+3	; 0x03
    29c8:	bc 81       	ldd	r27, Y+4	; 0x04
    29ca:	80 35       	cpi	r24, 0x50	; 80
    29cc:	23 ec       	ldi	r18, 0xC3	; 195
    29ce:	92 07       	cpc	r25, r18
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	a2 07       	cpc	r26, r18
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	b2 07       	cpc	r27, r18
    29d8:	f1 f6       	brne	.-68     	; 0x2996 <ADC_u16StartConversionSynch+0x64>
		{
			Local_u32TimeoutCounter++;
		}

		if (Local_u32TimeoutCounter == ADC_u32TIMEOUT)
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	9a 81       	ldd	r25, Y+2	; 0x02
    29de:	ab 81       	ldd	r26, Y+3	; 0x03
    29e0:	bc 81       	ldd	r27, Y+4	; 0x04
    29e2:	80 35       	cpi	r24, 0x50	; 80
    29e4:	23 ec       	ldi	r18, 0xC3	; 195
    29e6:	92 07       	cpc	r25, r18
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	a2 07       	cpc	r26, r18
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	b2 07       	cpc	r27, r18
    29f0:	19 f4       	brne	.+6      	; 0x29f8 <ADC_u16StartConversionSynch+0xc6>
		{
			/*Loop is broken because the timeout is reaching*/
			Local_u8ErrorStatu = STD_TIMEOUT_STATE;
    29f2:	83 e0       	ldi	r24, 0x03	; 3
    29f4:	8d 83       	std	Y+5, r24	; 0x05
    29f6:	1e c0       	rjmp	.+60     	; 0x2a34 <ADC_u16StartConversionSynch+0x102>
		else
		{
			/*Loop is broken because flag is risen*/

			/*Clear the conversion complete flag */
			SET_BIT(ADCSRA_REG,ADCSRA_ADIF);
    29f8:	a6 e2       	ldi	r26, 0x26	; 38
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	e6 e2       	ldi	r30, 0x26	; 38
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	80 61       	ori	r24, 0x10	; 16
    2a04:	8c 93       	st	X, r24

			/*Selection the ADC Reading Adjustment*/
#if ADC_ADJUSTMENT_READING == ADC_TEN_BITS_MOOD
			*Copy_pu16Reading = ( ADCL_REG | (ADCH_REG << 8) ) ;
    2a06:	e4 e2       	ldi	r30, 0x24	; 36
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	28 2f       	mov	r18, r24
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	e5 e2       	ldi	r30, 0x25	; 37
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	88 2f       	mov	r24, r24
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	98 2f       	mov	r25, r24
    2a1c:	88 27       	eor	r24, r24
    2a1e:	82 2b       	or	r24, r18
    2a20:	93 2b       	or	r25, r19
    2a22:	ef 81       	ldd	r30, Y+7	; 0x07
    2a24:	f8 85       	ldd	r31, Y+8	; 0x08
    2a26:	91 83       	std	Z+1, r25	; 0x01
    2a28:	80 83       	st	Z, r24
#error "Wrong ADC_ADJUSTMENT configuration"

#endif

			/*Make ADC State be IDLE because is finished*/
			ADC_u8BusyState = ADC_IDLE;
    2a2a:	10 92 45 02 	sts	0x0245, r1
    2a2e:	02 c0       	rjmp	.+4      	; 0x2a34 <ADC_u16StartConversionSynch+0x102>
	}

	else
	{
		/*Function is not finished  */
		Local_u8ErrorStatu = BUSY_FUNC;
    2a30:	85 e0       	ldi	r24, 0x05	; 5
    2a32:	8d 83       	std	Y+5, r24	; 0x05
	}


	/*Return error state*/
	return Local_u8ErrorStatu;
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2a36:	28 96       	adiw	r28, 0x08	; 8
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	cf 91       	pop	r28
    2a44:	df 91       	pop	r29
    2a46:	08 95       	ret

00002a48 <ADC_u16StartConversionAsynch>:



u8 ADC_u16StartConversionAsynch(u8 Copy_u8Channel , u16 *Copy_pu16Reading  , void (*Copy_PvNotificationFunction)(void)  )
{
    2a48:	df 93       	push	r29
    2a4a:	cf 93       	push	r28
    2a4c:	00 d0       	rcall	.+0      	; 0x2a4e <ADC_u16StartConversionAsynch+0x6>
    2a4e:	00 d0       	rcall	.+0      	; 0x2a50 <ADC_u16StartConversionAsynch+0x8>
    2a50:	00 d0       	rcall	.+0      	; 0x2a52 <ADC_u16StartConversionAsynch+0xa>
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
    2a56:	8a 83       	std	Y+2, r24	; 0x02
    2a58:	7c 83       	std	Y+4, r23	; 0x04
    2a5a:	6b 83       	std	Y+3, r22	; 0x03
    2a5c:	5e 83       	std	Y+6, r21	; 0x06
    2a5e:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	89 83       	std	Y+1, r24	; 0x01

	if(ADC_u8BusyState == ADC_IDLE)
    2a64:	80 91 45 02 	lds	r24, 0x0245
    2a68:	88 23       	and	r24, r24
    2a6a:	c9 f5       	brne	.+114    	; 0x2ade <ADC_u16StartConversionAsynch+0x96>
	{
		if ((Copy_pu16Reading == NULL) || (Copy_PvNotificationFunction == NULL))
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a70:	00 97       	sbiw	r24, 0x00	; 0
    2a72:	21 f0       	breq	.+8      	; 0x2a7c <ADC_u16StartConversionAsynch+0x34>
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	9e 81       	ldd	r25, Y+6	; 0x06
    2a78:	00 97       	sbiw	r24, 0x00	; 0
    2a7a:	11 f4       	brne	.+4      	; 0x2a80 <ADC_u16StartConversionAsynch+0x38>
		{
			Local_u8ErrorState =STD_TYPES_NOK;
    2a7c:	19 82       	std	Y+1, r1	; 0x01
    2a7e:	31 c0       	rjmp	.+98     	; 0x2ae2 <ADC_u16StartConversionAsynch+0x9a>
		}
		else
		{
			/*Make ADC is now Busy*/
			ADC_u8BusyState = ADC_BUSY;
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	80 93 45 02 	sts	0x0245, r24

			/*Make ISR source single Channel Asynchronous*/
			ADC_u8ISRSource = SINGLE_CHANNEL_ASYNCH;
    2a86:	10 92 47 02 	sts	0x0247, r1

			/*Global variable to pointed in same addresses to used it in function ISR*/
			ADC_pu16AsynchConversionReading = Copy_pu16Reading;
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8e:	90 93 3d 02 	sts	0x023D, r25
    2a92:	80 93 3c 02 	sts	0x023C, r24

			/*initialize The callback notification function globally*/
			ADC_pvCallBackNotificationFunc = Copy_PvNotificationFunction;
    2a96:	8d 81       	ldd	r24, Y+5	; 0x05
    2a98:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9a:	90 93 3f 02 	sts	0x023F, r25
    2a9e:	80 93 3e 02 	sts	0x023E, r24

			/*Clear the Mux_bits in ADMUX register*/
			ADMUX_REG &= ADC_CHANNELMASK;
    2aa2:	a7 e2       	ldi	r26, 0x27	; 39
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	e7 e2       	ldi	r30, 0x27	; 39
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	80 7e       	andi	r24, 0xE0	; 224
    2aae:	8c 93       	st	X, r24

			/*Set the required channel into the Mux_bits*/
			ADMUX_REG |= Copy_u8Channel;
    2ab0:	a7 e2       	ldi	r26, 0x27	; 39
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	e7 e2       	ldi	r30, 0x27	; 39
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	90 81       	ld	r25, Z
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	89 2b       	or	r24, r25
    2abe:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA_REG,ADCSRA_ADSC);
    2ac0:	a6 e2       	ldi	r26, 0x26	; 38
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	e6 e2       	ldi	r30, 0x26	; 38
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	80 64       	ori	r24, 0x40	; 64
    2acc:	8c 93       	st	X, r24

			/*ADC Conversion Complete Interrupt Enable*/
			SET_BIT(ADCSRA_REG , ADCSRA_ADIE );
    2ace:	a6 e2       	ldi	r26, 0x26	; 38
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	e6 e2       	ldi	r30, 0x26	; 38
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	88 60       	ori	r24, 0x08	; 8
    2ada:	8c 93       	st	X, r24
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <ADC_u16StartConversionAsynch+0x9a>

	}

	else
	{
		Local_u8ErrorState = BUSY_FUNC;
    2ade:	85 e0       	ldi	r24, 0x05	; 5
    2ae0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ae4:	26 96       	adiw	r28, 0x06	; 6
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	de bf       	out	0x3e, r29	; 62
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	cd bf       	out	0x3d, r28	; 61
    2af0:	cf 91       	pop	r28
    2af2:	df 91       	pop	r29
    2af4:	08 95       	ret

00002af6 <ADC_u8StartChainAsynch>:



u8 ADC_u8StartChainAsynch(Chain_T *Copy_Chain)
{
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <ADC_u8StartChainAsynch+0x6>
    2afc:	0f 92       	push	r0
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	9b 83       	std	Y+3, r25	; 0x03
    2b04:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ErrorState=STD_TYPES_OK;
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	89 83       	std	Y+1, r24	; 0x01

	/*Check NULL Pointer*/
	if (Copy_Chain == NULL)
    2b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b0e:	00 97       	sbiw	r24, 0x00	; 0
    2b10:	11 f4       	brne	.+4      	; 0x2b16 <ADC_u8StartChainAsynch+0x20>
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2b12:	19 82       	std	Y+1, r1	; 0x01
    2b14:	55 c0       	rjmp	.+170    	; 0x2bc0 <ADC_u8StartChainAsynch+0xca>
	}
	else
	{
		if (ADC_u8BusyState == ADC_IDLE)
    2b16:	80 91 45 02 	lds	r24, 0x0245
    2b1a:	88 23       	and	r24, r24
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <ADC_u8StartChainAsynch+0x2a>
    2b1e:	4e c0       	rjmp	.+156    	; 0x2bbc <ADC_u8StartChainAsynch+0xc6>
		{
			/*Make ADC Busy*/
			ADC_u8BusyState = ADC_BUSY;
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	80 93 45 02 	sts	0x0245, r24

			/*Make ISR source  : Chain Asynchronous*/
			ADC_u8ISRSource = CHAIN_ASYNCH ;
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	80 93 47 02 	sts	0x0247, r24


			/*Assign the ADC data globally*/
			/*Initialize chain Channel Array (Local -> global)*/
			ADC_pu8ChainChannelArr = Copy_Chain->Channel;
    2b2c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b2e:	fb 81       	ldd	r31, Y+3	; 0x03
    2b30:	80 81       	ld	r24, Z
    2b32:	91 81       	ldd	r25, Z+1	; 0x01
    2b34:	90 93 41 02 	sts	0x0241, r25
    2b38:	80 93 40 02 	sts	0x0240, r24
			/*Initialize Results Array*/
			ADC_pu16ChainResultArr = Copy_Chain->Result;
    2b3c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b3e:	fb 81       	ldd	r31, Y+3	; 0x03
    2b40:	82 81       	ldd	r24, Z+2	; 0x02
    2b42:	93 81       	ldd	r25, Z+3	; 0x03
    2b44:	90 93 43 02 	sts	0x0243, r25
    2b48:	80 93 42 02 	sts	0x0242, r24
			/*Initialize chain Size*/
			ADC_u8ChainSize = Copy_Chain->Size;
    2b4c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b4e:	fb 81       	ldd	r31, Y+3	; 0x03
    2b50:	84 81       	ldd	r24, Z+4	; 0x04
    2b52:	80 93 46 02 	sts	0x0246, r24
			/*Initialize Notification Function*/
			ADC_pvCallBackNotificationFunc = Copy_Chain->NotificationFunction;
    2b56:	ea 81       	ldd	r30, Y+2	; 0x02
    2b58:	fb 81       	ldd	r31, Y+3	; 0x03
    2b5a:	85 81       	ldd	r24, Z+5	; 0x05
    2b5c:	96 81       	ldd	r25, Z+6	; 0x06
    2b5e:	90 93 3f 02 	sts	0x023F, r25
    2b62:	80 93 3e 02 	sts	0x023E, r24
			/*Initialize current conversion index equal 0*/
			ADC_u8ChainConversionIndex = 0;
    2b66:	10 92 44 02 	sts	0x0244, r1

			/*Set required channel*/
			/*Clear the Mux_bits in ADMUX register*/
			ADMUX_REG &= ADC_CHANNELMASK;
    2b6a:	a7 e2       	ldi	r26, 0x27	; 39
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	e7 e2       	ldi	r30, 0x27	; 39
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	80 7e       	andi	r24, 0xE0	; 224
    2b76:	8c 93       	st	X, r24

			/*Set the required channel into the Mux_bits*/
			ADMUX_REG |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
    2b78:	a7 e2       	ldi	r26, 0x27	; 39
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	e7 e2       	ldi	r30, 0x27	; 39
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	40 81       	ld	r20, Z
    2b82:	20 91 40 02 	lds	r18, 0x0240
    2b86:	30 91 41 02 	lds	r19, 0x0241
    2b8a:	80 91 44 02 	lds	r24, 0x0244
    2b8e:	88 2f       	mov	r24, r24
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	f9 01       	movw	r30, r18
    2b94:	e8 0f       	add	r30, r24
    2b96:	f9 1f       	adc	r31, r25
    2b98:	80 81       	ld	r24, Z
    2b9a:	84 2b       	or	r24, r20
    2b9c:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA_REG , ADCSRA_ADSC);
    2b9e:	a6 e2       	ldi	r26, 0x26	; 38
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	e6 e2       	ldi	r30, 0x26	; 38
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	80 64       	ori	r24, 0x40	; 64
    2baa:	8c 93       	st	X, r24

			/*Enable Conversion complete interrupt*/
			SET_BIT(ADCSRA_REG , ADCSRA_ADIE);
    2bac:	a6 e2       	ldi	r26, 0x26	; 38
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	e6 e2       	ldi	r30, 0x26	; 38
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	88 60       	ori	r24, 0x08	; 8
    2bb8:	8c 93       	st	X, r24
    2bba:	02 c0       	rjmp	.+4      	; 0x2bc0 <ADC_u8StartChainAsynch+0xca>
		}

		else
		{
			Local_u8ErrorState = BUSY_FUNC;
    2bbc:	85 e0       	ldi	r24, 0x05	; 5
    2bbe:	89 83       	std	Y+1, r24	; 0x01
	}




	return Local_u8ErrorState;
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01

}
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	cf 91       	pop	r28
    2bca:	df 91       	pop	r29
    2bcc:	08 95       	ret

00002bce <__vector_16>:



void __vector_16 (void)  __attribute__((signal));
void __vector_16 (void)
{
    2bce:	1f 92       	push	r1
    2bd0:	0f 92       	push	r0
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	0f 92       	push	r0
    2bd6:	11 24       	eor	r1, r1
    2bd8:	2f 93       	push	r18
    2bda:	3f 93       	push	r19
    2bdc:	4f 93       	push	r20
    2bde:	5f 93       	push	r21
    2be0:	6f 93       	push	r22
    2be2:	7f 93       	push	r23
    2be4:	8f 93       	push	r24
    2be6:	9f 93       	push	r25
    2be8:	af 93       	push	r26
    2bea:	bf 93       	push	r27
    2bec:	ef 93       	push	r30
    2bee:	ff 93       	push	r31
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62

	/*Function Single Conversion Asynchronous */
	if (ADC_u8ISRSource == SINGLE_CHANNEL_ASYNCH)
    2bf8:	80 91 47 02 	lds	r24, 0x0247
    2bfc:	88 23       	and	r24, r24
    2bfe:	19 f5       	brne	.+70     	; 0x2c46 <__vector_16+0x78>
	{
		/*Read ADC Results*/
#if ADC_ADJUSTMENT_READING == ADC_TEN_BITS_MOOD
		*ADC_pu16AsynchConversionReading = ( ADCL_REG | (ADCH_REG << 8) ) ;
    2c00:	a0 91 3c 02 	lds	r26, 0x023C
    2c04:	b0 91 3d 02 	lds	r27, 0x023D
    2c08:	e4 e2       	ldi	r30, 0x24	; 36
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	28 2f       	mov	r18, r24
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	e5 e2       	ldi	r30, 0x25	; 37
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	88 2f       	mov	r24, r24
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	98 2f       	mov	r25, r24
    2c1e:	88 27       	eor	r24, r24
    2c20:	82 2b       	or	r24, r18
    2c22:	93 2b       	or	r25, r19
    2c24:	8d 93       	st	X+, r24
    2c26:	9c 93       	st	X, r25
#error "Wrong ADC_ADJUSTMENT configuration"

#endif

		/*Make ADC State be IDLE because is finished*/
		ADC_u8BusyState = ADC_IDLE;
    2c28:	10 92 45 02 	sts	0x0245, r1

		/*Invoke the Callback notification Function*/
		ADC_pvCallBackNotificationFunc();
    2c2c:	e0 91 3e 02 	lds	r30, 0x023E
    2c30:	f0 91 3f 02 	lds	r31, 0x023F
    2c34:	09 95       	icall

		/*Disable ADC Interrupt*/
		CLR_BIT(ADCSRA_REG , ADCSRA_ADIE);
    2c36:	a6 e2       	ldi	r26, 0x26	; 38
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	e6 e2       	ldi	r30, 0x26	; 38
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
    2c40:	87 7f       	andi	r24, 0xF7	; 247
    2c42:	8c 93       	st	X, r24
    2c44:	5e c0       	rjmp	.+188    	; 0x2d02 <__vector_16+0x134>
	}



	else if(ADC_u8ISRSource == CHAIN_ASYNCH)
    2c46:	80 91 47 02 	lds	r24, 0x0247
    2c4a:	81 30       	cpi	r24, 0x01	; 1
    2c4c:	09 f0       	breq	.+2      	; 0x2c50 <__vector_16+0x82>
    2c4e:	59 c0       	rjmp	.+178    	; 0x2d02 <__vector_16+0x134>
	{
		/*Read the Current Conversion*/
#if ADC_ADJUSTMENT_READING == ADC_TEN_BITS_MOOD
		ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex] = ( ADCL_REG | (ADCH_REG << 8) ) ;
    2c50:	20 91 42 02 	lds	r18, 0x0242
    2c54:	30 91 43 02 	lds	r19, 0x0243
    2c58:	80 91 44 02 	lds	r24, 0x0244
    2c5c:	88 2f       	mov	r24, r24
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	88 0f       	add	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	d9 01       	movw	r26, r18
    2c66:	a8 0f       	add	r26, r24
    2c68:	b9 1f       	adc	r27, r25
    2c6a:	e4 e2       	ldi	r30, 0x24	; 36
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	80 81       	ld	r24, Z
    2c70:	28 2f       	mov	r18, r24
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	e5 e2       	ldi	r30, 0x25	; 37
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	80 81       	ld	r24, Z
    2c7a:	88 2f       	mov	r24, r24
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	98 2f       	mov	r25, r24
    2c80:	88 27       	eor	r24, r24
    2c82:	82 2b       	or	r24, r18
    2c84:	93 2b       	or	r25, r19
    2c86:	11 96       	adiw	r26, 0x01	; 1
    2c88:	9c 93       	st	X, r25
    2c8a:	8e 93       	st	-X, r24
#error "Wrong ADC_ADJUSTMENT configuration"

#endif

		/*Increment chain index*/
		ADC_u8ChainConversionIndex++;
    2c8c:	80 91 44 02 	lds	r24, 0x0244
    2c90:	8f 5f       	subi	r24, 0xFF	; 255
    2c92:	80 93 44 02 	sts	0x0244, r24

		/*Check chain is finished or not*/
		if (ADC_u8ChainConversionIndex == ADC_u8ChainSize)
    2c96:	90 91 44 02 	lds	r25, 0x0244
    2c9a:	80 91 46 02 	lds	r24, 0x0246
    2c9e:	98 17       	cp	r25, r24
    2ca0:	79 f4       	brne	.+30     	; 0x2cc0 <__vector_16+0xf2>
		{
			/*chain is finished*/
			/*Make ADC IDEL*/
			ADC_u8BusyState = ADC_IDLE;
    2ca2:	10 92 45 02 	sts	0x0245, r1

			/*Invoke the Callback notification Function*/
			ADC_pvCallBackNotificationFunc();
    2ca6:	e0 91 3e 02 	lds	r30, 0x023E
    2caa:	f0 91 3f 02 	lds	r31, 0x023F
    2cae:	09 95       	icall

			/*Disable ADC conversion Complete*/
			CLR_BIT(ADCSRA_REG , ADCSRA_ADIE);
    2cb0:	a6 e2       	ldi	r26, 0x26	; 38
    2cb2:	b0 e0       	ldi	r27, 0x00	; 0
    2cb4:	e6 e2       	ldi	r30, 0x26	; 38
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	80 81       	ld	r24, Z
    2cba:	87 7f       	andi	r24, 0xF7	; 247
    2cbc:	8c 93       	st	X, r24
    2cbe:	21 c0       	rjmp	.+66     	; 0x2d02 <__vector_16+0x134>
		else
		{
			/*chain is not finished */
			/*Set New required channel*/
			/*Clear the Mux_bits in ADMUX register*/
			ADMUX_REG &= ADC_CHANNELMASK;
    2cc0:	a7 e2       	ldi	r26, 0x27	; 39
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	e7 e2       	ldi	r30, 0x27	; 39
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	80 81       	ld	r24, Z
    2cca:	80 7e       	andi	r24, 0xE0	; 224
    2ccc:	8c 93       	st	X, r24

			/*Set the required channel into the Mux_bits*/
			ADMUX_REG |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
    2cce:	a7 e2       	ldi	r26, 0x27	; 39
    2cd0:	b0 e0       	ldi	r27, 0x00	; 0
    2cd2:	e7 e2       	ldi	r30, 0x27	; 39
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	40 81       	ld	r20, Z
    2cd8:	20 91 40 02 	lds	r18, 0x0240
    2cdc:	30 91 41 02 	lds	r19, 0x0241
    2ce0:	80 91 44 02 	lds	r24, 0x0244
    2ce4:	88 2f       	mov	r24, r24
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	f9 01       	movw	r30, r18
    2cea:	e8 0f       	add	r30, r24
    2cec:	f9 1f       	adc	r31, r25
    2cee:	80 81       	ld	r24, Z
    2cf0:	84 2b       	or	r24, r20
    2cf2:	8c 93       	st	X, r24

			/*Start Next Conversion*/
			SET_BIT(ADCSRA_REG , ADCSRA_ADSC);
    2cf4:	a6 e2       	ldi	r26, 0x26	; 38
    2cf6:	b0 e0       	ldi	r27, 0x00	; 0
    2cf8:	e6 e2       	ldi	r30, 0x26	; 38
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	80 81       	ld	r24, Z
    2cfe:	80 64       	ori	r24, 0x40	; 64
    2d00:	8c 93       	st	X, r24
		}
	}
}
    2d02:	cf 91       	pop	r28
    2d04:	df 91       	pop	r29
    2d06:	ff 91       	pop	r31
    2d08:	ef 91       	pop	r30
    2d0a:	bf 91       	pop	r27
    2d0c:	af 91       	pop	r26
    2d0e:	9f 91       	pop	r25
    2d10:	8f 91       	pop	r24
    2d12:	7f 91       	pop	r23
    2d14:	6f 91       	pop	r22
    2d16:	5f 91       	pop	r21
    2d18:	4f 91       	pop	r20
    2d1a:	3f 91       	pop	r19
    2d1c:	2f 91       	pop	r18
    2d1e:	0f 90       	pop	r0
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	0f 90       	pop	r0
    2d24:	1f 90       	pop	r1
    2d26:	18 95       	reti

00002d28 <BUZZ_voidInit>:
#include "Buzzer_interface.h"



void BUZZ_voidInit(BUZZER_T *BUZZ_Configuration)
{
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	00 d0       	rcall	.+0      	; 0x2d2e <BUZZ_voidInit+0x6>
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	9a 83       	std	Y+2, r25	; 0x02
    2d34:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinDirection(BUZZ_Configuration->Port,BUZZ_Configuration->Pin,BUZZ_PIN_OUTPUT);
    2d36:	e9 81       	ldd	r30, Y+1	; 0x01
    2d38:	fa 81       	ldd	r31, Y+2	; 0x02
    2d3a:	80 81       	ld	r24, Z
    2d3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d40:	91 81       	ldd	r25, Z+1	; 0x01
    2d42:	69 2f       	mov	r22, r25
    2d44:	41 e0       	ldi	r20, 0x01	; 1
    2d46:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
}
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
    2d4e:	cf 91       	pop	r28
    2d50:	df 91       	pop	r29
    2d52:	08 95       	ret

00002d54 <BUZZ_voidTurnOn>:

void BUZZ_voidTurnOn(BUZZER_T *BUZZ_Configuration)
{
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <BUZZ_voidTurnOn+0x6>
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    2d5e:	9a 83       	std	Y+2, r25	; 0x02
    2d60:	89 83       	std	Y+1, r24	; 0x01
	if (BUZZ_Configuration->Conn_Type == BUZZ_SOURCE)
    2d62:	e9 81       	ldd	r30, Y+1	; 0x01
    2d64:	fa 81       	ldd	r31, Y+2	; 0x02
    2d66:	82 81       	ldd	r24, Z+2	; 0x02
    2d68:	81 30       	cpi	r24, 0x01	; 1
    2d6a:	59 f4       	brne	.+22     	; 0x2d82 <BUZZ_voidTurnOn+0x2e>
	{
		DIO_enumSetPinValue(BUZZ_Configuration->Port,BUZZ_Configuration->Pin,BUZZ_PIN_HIGH);
    2d6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d70:	80 81       	ld	r24, Z
    2d72:	e9 81       	ldd	r30, Y+1	; 0x01
    2d74:	fa 81       	ldd	r31, Y+2	; 0x02
    2d76:	91 81       	ldd	r25, Z+1	; 0x01
    2d78:	69 2f       	mov	r22, r25
    2d7a:	41 e0       	ldi	r20, 0x01	; 1
    2d7c:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
    2d80:	0f c0       	rjmp	.+30     	; 0x2da0 <BUZZ_voidTurnOn+0x4c>
	}
	else if(BUZZ_Configuration->Conn_Type == BUZZ_SINK)
    2d82:	e9 81       	ldd	r30, Y+1	; 0x01
    2d84:	fa 81       	ldd	r31, Y+2	; 0x02
    2d86:	82 81       	ldd	r24, Z+2	; 0x02
    2d88:	88 23       	and	r24, r24
    2d8a:	51 f4       	brne	.+20     	; 0x2da0 <BUZZ_voidTurnOn+0x4c>
	{
		DIO_enumSetPinValue(BUZZ_Configuration->Port,BUZZ_Configuration->Pin,BUZZ_PIN_LOW);
    2d8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d90:	80 81       	ld	r24, Z
    2d92:	e9 81       	ldd	r30, Y+1	; 0x01
    2d94:	fa 81       	ldd	r31, Y+2	; 0x02
    2d96:	91 81       	ldd	r25, Z+1	; 0x01
    2d98:	69 2f       	mov	r22, r25
    2d9a:	40 e0       	ldi	r20, 0x00	; 0
    2d9c:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	}

}
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	08 95       	ret

00002daa <BUZZ_voidTurnOff>:

void BUZZ_voidTurnOff(BUZZER_T *BUZZ_Configuration)
{
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	00 d0       	rcall	.+0      	; 0x2db0 <BUZZ_voidTurnOff+0x6>
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	9a 83       	std	Y+2, r25	; 0x02
    2db6:	89 83       	std	Y+1, r24	; 0x01
	if (BUZZ_Configuration->Conn_Type == BUZZ_SOURCE)
    2db8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dba:	fa 81       	ldd	r31, Y+2	; 0x02
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	81 30       	cpi	r24, 0x01	; 1
    2dc0:	59 f4       	brne	.+22     	; 0x2dd8 <BUZZ_voidTurnOff+0x2e>
	{
		DIO_enumSetPinValue(BUZZ_Configuration->Port,BUZZ_Configuration->Pin,BUZZ_PIN_LOW);
    2dc2:	e9 81       	ldd	r30, Y+1	; 0x01
    2dc4:	fa 81       	ldd	r31, Y+2	; 0x02
    2dc6:	80 81       	ld	r24, Z
    2dc8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dca:	fa 81       	ldd	r31, Y+2	; 0x02
    2dcc:	91 81       	ldd	r25, Z+1	; 0x01
    2dce:	69 2f       	mov	r22, r25
    2dd0:	40 e0       	ldi	r20, 0x00	; 0
    2dd2:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
    2dd6:	0f c0       	rjmp	.+30     	; 0x2df6 <BUZZ_voidTurnOff+0x4c>
	}
	else if(BUZZ_Configuration->Conn_Type == BUZZ_SINK)
    2dd8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dda:	fa 81       	ldd	r31, Y+2	; 0x02
    2ddc:	82 81       	ldd	r24, Z+2	; 0x02
    2dde:	88 23       	and	r24, r24
    2de0:	51 f4       	brne	.+20     	; 0x2df6 <BUZZ_voidTurnOff+0x4c>
	{
		DIO_enumSetPinValue(BUZZ_Configuration->Port,BUZZ_Configuration->Pin,BUZZ_PIN_HIGH);
    2de2:	e9 81       	ldd	r30, Y+1	; 0x01
    2de4:	fa 81       	ldd	r31, Y+2	; 0x02
    2de6:	80 81       	ld	r24, Z
    2de8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dea:	fa 81       	ldd	r31, Y+2	; 0x02
    2dec:	91 81       	ldd	r25, Z+1	; 0x01
    2dee:	69 2f       	mov	r22, r25
    2df0:	41 e0       	ldi	r20, 0x01	; 1
    2df2:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	}

}
    2df6:	0f 90       	pop	r0
    2df8:	0f 90       	pop	r0
    2dfa:	cf 91       	pop	r28
    2dfc:	df 91       	pop	r29
    2dfe:	08 95       	ret

00002e00 <BUZZ_voidToggle>:


void BUZZ_voidToggle(BUZZER_T *BUZZ_Configuration)
{
    2e00:	df 93       	push	r29
    2e02:	cf 93       	push	r28
    2e04:	00 d0       	rcall	.+0      	; 0x2e06 <BUZZ_voidToggle+0x6>
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    2e0a:	9a 83       	std	Y+2, r25	; 0x02
    2e0c:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumTogglePinValue(BUZZ_Configuration->Port,BUZZ_Configuration->Pin);
    2e0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e10:	fa 81       	ldd	r31, Y+2	; 0x02
    2e12:	80 81       	ld	r24, Z
    2e14:	e9 81       	ldd	r30, Y+1	; 0x01
    2e16:	fa 81       	ldd	r31, Y+2	; 0x02
    2e18:	91 81       	ldd	r25, Z+1	; 0x01
    2e1a:	69 2f       	mov	r22, r25
    2e1c:	0e 94 44 22 	call	0x4488	; 0x4488 <DIO_enumTogglePinValue>
}
    2e20:	0f 90       	pop	r0
    2e22:	0f 90       	pop	r0
    2e24:	cf 91       	pop	r28
    2e26:	df 91       	pop	r29
    2e28:	08 95       	ret

00002e2a <CLCD_voidSendCommand>:
 |        PC0|---------------->|RS        |         |        PC0|---------------->|RS        |
  -----------                   ----------           -----------                   ----------
 */

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	0f 92       	push	r0
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
    2e34:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendPuls();


#elif CLCD_MODE == MODE_4_BIT
	/*Set RS pin to low for command*/
	DIO_enumSetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_LOW);
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	60 e0       	ldi	r22, 0x00	; 0
    2e3a:	40 e0       	ldi	r20, 0x00	; 0
    2e3c:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>

	/*Set RW pin to low for write*/
	DIO_enumSetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	61 e0       	ldi	r22, 0x01	; 1
    2e44:	40 e0       	ldi	r20, 0x00	; 0
    2e46:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>

	/*Send the most 4 bits of data to high nibbles*/
	DIO_enumSetPinValue(CLCD_DATA_PORT ,DIO_PIN4 ,GET_BIT(Copy_u8Command,4));
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
    2e4c:	82 95       	swap	r24
    2e4e:	8f 70       	andi	r24, 0x0F	; 15
    2e50:	98 2f       	mov	r25, r24
    2e52:	91 70       	andi	r25, 0x01	; 1
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	64 e0       	ldi	r22, 0x04	; 4
    2e58:	49 2f       	mov	r20, r25
    2e5a:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(CLCD_DATA_PORT ,DIO_PIN5 ,GET_BIT(Copy_u8Command,5));
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
    2e60:	82 95       	swap	r24
    2e62:	86 95       	lsr	r24
    2e64:	87 70       	andi	r24, 0x07	; 7
    2e66:	98 2f       	mov	r25, r24
    2e68:	91 70       	andi	r25, 0x01	; 1
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	65 e0       	ldi	r22, 0x05	; 5
    2e6e:	49 2f       	mov	r20, r25
    2e70:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(CLCD_DATA_PORT ,DIO_PIN6 ,GET_BIT(Copy_u8Command,6));
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	82 95       	swap	r24
    2e78:	86 95       	lsr	r24
    2e7a:	86 95       	lsr	r24
    2e7c:	83 70       	andi	r24, 0x03	; 3
    2e7e:	98 2f       	mov	r25, r24
    2e80:	91 70       	andi	r25, 0x01	; 1
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	66 e0       	ldi	r22, 0x06	; 6
    2e86:	49 2f       	mov	r20, r25
    2e88:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(CLCD_DATA_PORT ,DIO_PIN7 ,GET_BIT(Copy_u8Command,7));
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	98 2f       	mov	r25, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	99 27       	eor	r25, r25
    2e94:	99 1f       	adc	r25, r25
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	67 e0       	ldi	r22, 0x07	; 7
    2e9a:	49 2f       	mov	r20, r25
    2e9c:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>

	CLCD_voidSendPuls();
    2ea0:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <CLCD_voidSendPuls>

	/*Send the Least 4 bits of data to Low nibbles*/
	DIO_enumSetPinValue(CLCD_DATA_PORT ,DIO_PIN4 ,GET_BIT(Copy_u8Command,0));
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	98 2f       	mov	r25, r24
    2ea8:	91 70       	andi	r25, 0x01	; 1
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	64 e0       	ldi	r22, 0x04	; 4
    2eae:	49 2f       	mov	r20, r25
    2eb0:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(CLCD_DATA_PORT ,DIO_PIN5 ,GET_BIT(Copy_u8Command,1));
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	86 95       	lsr	r24
    2eb8:	98 2f       	mov	r25, r24
    2eba:	91 70       	andi	r25, 0x01	; 1
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	65 e0       	ldi	r22, 0x05	; 5
    2ec0:	49 2f       	mov	r20, r25
    2ec2:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(CLCD_DATA_PORT ,DIO_PIN6 ,GET_BIT(Copy_u8Command,2));
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	86 95       	lsr	r24
    2eca:	86 95       	lsr	r24
    2ecc:	98 2f       	mov	r25, r24
    2ece:	91 70       	andi	r25, 0x01	; 1
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	66 e0       	ldi	r22, 0x06	; 6
    2ed4:	49 2f       	mov	r20, r25
    2ed6:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(CLCD_DATA_PORT ,DIO_PIN7 ,GET_BIT(Copy_u8Command,3));
    2eda:	89 81       	ldd	r24, Y+1	; 0x01
    2edc:	86 95       	lsr	r24
    2ede:	86 95       	lsr	r24
    2ee0:	86 95       	lsr	r24
    2ee2:	98 2f       	mov	r25, r24
    2ee4:	91 70       	andi	r25, 0x01	; 1
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	67 e0       	ldi	r22, 0x07	; 7
    2eea:	49 2f       	mov	r20, r25
    2eec:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>

	CLCD_voidSendPuls();
    2ef0:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <CLCD_voidSendPuls>

#endif
}
    2ef4:	0f 90       	pop	r0
    2ef6:	cf 91       	pop	r28
    2ef8:	df 91       	pop	r29
    2efa:	08 95       	ret

00002efc <CLCD_voidSendData>:


void CLCD_voidSendData(u8 Copy_u8Data)
{
    2efc:	df 93       	push	r29
    2efe:	cf 93       	push	r28
    2f00:	0f 92       	push	r0
    2f02:	cd b7       	in	r28, 0x3d	; 61
    2f04:	de b7       	in	r29, 0x3e	; 62
    2f06:	89 83       	std	Y+1, r24	; 0x01


#elif CLCD_MODE == MODE_4_BIT

	/*Set RS pin to low for command*/
	DIO_enumSetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_HIGH);
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	60 e0       	ldi	r22, 0x00	; 0
    2f0c:	41 e0       	ldi	r20, 0x01	; 1
    2f0e:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>

	/*Set RW pin to low for write*/
	DIO_enumSetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	61 e0       	ldi	r22, 0x01	; 1
    2f16:	40 e0       	ldi	r20, 0x00	; 0
    2f18:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>


	/*Send the most 4 bits of data to high nibbles*/
	DIO_enumSetPinValue(CLCD_DATA_PORT ,DIO_PIN4 ,GET_BIT(Copy_u8Data,4));
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	82 95       	swap	r24
    2f20:	8f 70       	andi	r24, 0x0F	; 15
    2f22:	98 2f       	mov	r25, r24
    2f24:	91 70       	andi	r25, 0x01	; 1
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	64 e0       	ldi	r22, 0x04	; 4
    2f2a:	49 2f       	mov	r20, r25
    2f2c:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(CLCD_DATA_PORT ,DIO_PIN5 ,GET_BIT(Copy_u8Data,5));
    2f30:	89 81       	ldd	r24, Y+1	; 0x01
    2f32:	82 95       	swap	r24
    2f34:	86 95       	lsr	r24
    2f36:	87 70       	andi	r24, 0x07	; 7
    2f38:	98 2f       	mov	r25, r24
    2f3a:	91 70       	andi	r25, 0x01	; 1
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	65 e0       	ldi	r22, 0x05	; 5
    2f40:	49 2f       	mov	r20, r25
    2f42:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(CLCD_DATA_PORT ,DIO_PIN6 ,GET_BIT(Copy_u8Data,6));
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	82 95       	swap	r24
    2f4a:	86 95       	lsr	r24
    2f4c:	86 95       	lsr	r24
    2f4e:	83 70       	andi	r24, 0x03	; 3
    2f50:	98 2f       	mov	r25, r24
    2f52:	91 70       	andi	r25, 0x01	; 1
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	66 e0       	ldi	r22, 0x06	; 6
    2f58:	49 2f       	mov	r20, r25
    2f5a:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(CLCD_DATA_PORT ,DIO_PIN7 ,GET_BIT(Copy_u8Data,7));
    2f5e:	89 81       	ldd	r24, Y+1	; 0x01
    2f60:	98 2f       	mov	r25, r24
    2f62:	99 1f       	adc	r25, r25
    2f64:	99 27       	eor	r25, r25
    2f66:	99 1f       	adc	r25, r25
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	67 e0       	ldi	r22, 0x07	; 7
    2f6c:	49 2f       	mov	r20, r25
    2f6e:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>


	CLCD_voidSendPuls();
    2f72:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <CLCD_voidSendPuls>

	/*Send the Least 4 bits of data to Low nibbles*/
	DIO_enumSetPinValue(CLCD_DATA_PORT ,DIO_PIN4 ,GET_BIT(Copy_u8Data,0));
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	98 2f       	mov	r25, r24
    2f7a:	91 70       	andi	r25, 0x01	; 1
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	64 e0       	ldi	r22, 0x04	; 4
    2f80:	49 2f       	mov	r20, r25
    2f82:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(CLCD_DATA_PORT ,DIO_PIN5 ,GET_BIT(Copy_u8Data,1));
    2f86:	89 81       	ldd	r24, Y+1	; 0x01
    2f88:	86 95       	lsr	r24
    2f8a:	98 2f       	mov	r25, r24
    2f8c:	91 70       	andi	r25, 0x01	; 1
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	65 e0       	ldi	r22, 0x05	; 5
    2f92:	49 2f       	mov	r20, r25
    2f94:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(CLCD_DATA_PORT ,DIO_PIN6 ,GET_BIT(Copy_u8Data,2));
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	86 95       	lsr	r24
    2f9c:	86 95       	lsr	r24
    2f9e:	98 2f       	mov	r25, r24
    2fa0:	91 70       	andi	r25, 0x01	; 1
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	66 e0       	ldi	r22, 0x06	; 6
    2fa6:	49 2f       	mov	r20, r25
    2fa8:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(CLCD_DATA_PORT ,DIO_PIN7 ,GET_BIT(Copy_u8Data,3));
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	86 95       	lsr	r24
    2fb0:	86 95       	lsr	r24
    2fb2:	86 95       	lsr	r24
    2fb4:	98 2f       	mov	r25, r24
    2fb6:	91 70       	andi	r25, 0x01	; 1
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	67 e0       	ldi	r22, 0x07	; 7
    2fbc:	49 2f       	mov	r20, r25
    2fbe:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>

	CLCD_voidSendPuls();
    2fc2:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <CLCD_voidSendPuls>

#endif
}
    2fc6:	0f 90       	pop	r0
    2fc8:	cf 91       	pop	r28
    2fca:	df 91       	pop	r29
    2fcc:	08 95       	ret

00002fce <CLCD_voidSendCharPosition>:




void CLCD_voidSendCharPosition(u8 Copy_u8Data, u8 Copy_u8Xposition , u8 Copy_u8Yposition)
{
    2fce:	df 93       	push	r29
    2fd0:	cf 93       	push	r28
    2fd2:	00 d0       	rcall	.+0      	; 0x2fd4 <CLCD_voidSendCharPosition+0x6>
    2fd4:	0f 92       	push	r0
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62
    2fda:	89 83       	std	Y+1, r24	; 0x01
    2fdc:	6a 83       	std	Y+2, r22	; 0x02
    2fde:	4b 83       	std	Y+3, r20	; 0x03
	CLCD_voidGoToXY(Copy_u8Xposition,Copy_u8Yposition);
    2fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe2:	6b 81       	ldd	r22, Y+3	; 0x03
    2fe4:	0e 94 1b 1a 	call	0x3436	; 0x3436 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8Data);
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	0e 94 7e 17 	call	0x2efc	; 0x2efc <CLCD_voidSendData>
}
    2fee:	0f 90       	pop	r0
    2ff0:	0f 90       	pop	r0
    2ff2:	0f 90       	pop	r0
    2ff4:	cf 91       	pop	r28
    2ff6:	df 91       	pop	r29
    2ff8:	08 95       	ret

00002ffa <CLCD_voidInit>:




void CLCD_voidInit(void)
{
    2ffa:	df 93       	push	r29
    2ffc:	cf 93       	push	r28
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
    3002:	aa 97       	sbiw	r28, 0x2a	; 42
    3004:	0f b6       	in	r0, 0x3f	; 63
    3006:	f8 94       	cli
    3008:	de bf       	out	0x3e, r29	; 62
    300a:	0f be       	out	0x3f, r0	; 63
    300c:	cd bf       	out	0x3d, r28	; 61


#elif CLCD_MODE == MODE_4_BIT

	/*Set Direction Pins from LCD*/
	DIO_enumSetPinDirection(CLCD_DATA_PORT,CLCD_DATA_PIN_ONE,DIO_OUTPUT);
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	64 e0       	ldi	r22, 0x04	; 4
    3012:	41 e0       	ldi	r20, 0x01	; 1
    3014:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(CLCD_DATA_PORT,CLCD_DATA_PIN_TWO,DIO_OUTPUT);
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	65 e0       	ldi	r22, 0x05	; 5
    301c:	41 e0       	ldi	r20, 0x01	; 1
    301e:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(CLCD_DATA_PORT,CLCD_DATA_PIN_THREE,DIO_OUTPUT);
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	66 e0       	ldi	r22, 0x06	; 6
    3026:	41 e0       	ldi	r20, 0x01	; 1
    3028:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(CLCD_DATA_PORT,CLCD_DATA_PIN_FOUR,DIO_OUTPUT);
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	67 e0       	ldi	r22, 0x07	; 7
    3030:	41 e0       	ldi	r20, 0x01	; 1
    3032:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_OUTPUT);
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	41 e0       	ldi	r20, 0x01	; 1
    303c:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_OUTPUT);
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	61 e0       	ldi	r22, 0x01	; 1
    3044:	41 e0       	ldi	r20, 0x01	; 1
    3046:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_OUTPUT);
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	62 e0       	ldi	r22, 0x02	; 2
    304e:	41 e0       	ldi	r20, 0x01	; 1
    3050:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	a0 ef       	ldi	r26, 0xF0	; 240
    305a:	b1 e4       	ldi	r27, 0x41	; 65
    305c:	8f a3       	std	Y+39, r24	; 0x27
    305e:	98 a7       	std	Y+40, r25	; 0x28
    3060:	a9 a7       	std	Y+41, r26	; 0x29
    3062:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3064:	6f a1       	ldd	r22, Y+39	; 0x27
    3066:	78 a5       	ldd	r23, Y+40	; 0x28
    3068:	89 a5       	ldd	r24, Y+41	; 0x29
    306a:	9a a5       	ldd	r25, Y+42	; 0x2a
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	4a ef       	ldi	r20, 0xFA	; 250
    3072:	54 e4       	ldi	r21, 0x44	; 68
    3074:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	8b a3       	std	Y+35, r24	; 0x23
    307e:	9c a3       	std	Y+36, r25	; 0x24
    3080:	ad a3       	std	Y+37, r26	; 0x25
    3082:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3084:	6b a1       	ldd	r22, Y+35	; 0x23
    3086:	7c a1       	ldd	r23, Y+36	; 0x24
    3088:	8d a1       	ldd	r24, Y+37	; 0x25
    308a:	9e a1       	ldd	r25, Y+38	; 0x26
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	40 e8       	ldi	r20, 0x80	; 128
    3092:	5f e3       	ldi	r21, 0x3F	; 63
    3094:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    3098:	88 23       	and	r24, r24
    309a:	2c f4       	brge	.+10     	; 0x30a6 <CLCD_voidInit+0xac>
		__ticks = 1;
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	9a a3       	std	Y+34, r25	; 0x22
    30a2:	89 a3       	std	Y+33, r24	; 0x21
    30a4:	3f c0       	rjmp	.+126    	; 0x3124 <CLCD_voidInit+0x12a>
	else if (__tmp > 65535)
    30a6:	6b a1       	ldd	r22, Y+35	; 0x23
    30a8:	7c a1       	ldd	r23, Y+36	; 0x24
    30aa:	8d a1       	ldd	r24, Y+37	; 0x25
    30ac:	9e a1       	ldd	r25, Y+38	; 0x26
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	3f ef       	ldi	r19, 0xFF	; 255
    30b2:	4f e7       	ldi	r20, 0x7F	; 127
    30b4:	57 e4       	ldi	r21, 0x47	; 71
    30b6:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    30ba:	18 16       	cp	r1, r24
    30bc:	4c f5       	brge	.+82     	; 0x3110 <CLCD_voidInit+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30be:	6f a1       	ldd	r22, Y+39	; 0x27
    30c0:	78 a5       	ldd	r23, Y+40	; 0x28
    30c2:	89 a5       	ldd	r24, Y+41	; 0x29
    30c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	40 e2       	ldi	r20, 0x20	; 32
    30cc:	51 e4       	ldi	r21, 0x41	; 65
    30ce:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	bc 01       	movw	r22, r24
    30d8:	cd 01       	movw	r24, r26
    30da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	9a a3       	std	Y+34, r25	; 0x22
    30e4:	89 a3       	std	Y+33, r24	; 0x21
    30e6:	0f c0       	rjmp	.+30     	; 0x3106 <CLCD_voidInit+0x10c>
    30e8:	88 ec       	ldi	r24, 0xC8	; 200
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	98 a3       	std	Y+32, r25	; 0x20
    30ee:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30f2:	98 a1       	ldd	r25, Y+32	; 0x20
    30f4:	01 97       	sbiw	r24, 0x01	; 1
    30f6:	f1 f7       	brne	.-4      	; 0x30f4 <CLCD_voidInit+0xfa>
    30f8:	98 a3       	std	Y+32, r25	; 0x20
    30fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30fc:	89 a1       	ldd	r24, Y+33	; 0x21
    30fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3100:	01 97       	sbiw	r24, 0x01	; 1
    3102:	9a a3       	std	Y+34, r25	; 0x22
    3104:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3106:	89 a1       	ldd	r24, Y+33	; 0x21
    3108:	9a a1       	ldd	r25, Y+34	; 0x22
    310a:	00 97       	sbiw	r24, 0x00	; 0
    310c:	69 f7       	brne	.-38     	; 0x30e8 <CLCD_voidInit+0xee>
    310e:	14 c0       	rjmp	.+40     	; 0x3138 <CLCD_voidInit+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3110:	6b a1       	ldd	r22, Y+35	; 0x23
    3112:	7c a1       	ldd	r23, Y+36	; 0x24
    3114:	8d a1       	ldd	r24, Y+37	; 0x25
    3116:	9e a1       	ldd	r25, Y+38	; 0x26
    3118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	9a a3       	std	Y+34, r25	; 0x22
    3122:	89 a3       	std	Y+33, r24	; 0x21
    3124:	89 a1       	ldd	r24, Y+33	; 0x21
    3126:	9a a1       	ldd	r25, Y+34	; 0x22
    3128:	9e 8f       	std	Y+30, r25	; 0x1e
    312a:	8d 8f       	std	Y+29, r24	; 0x1d
    312c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    312e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	f1 f7       	brne	.-4      	; 0x3130 <CLCD_voidInit+0x136>
    3134:	9e 8f       	std	Y+30, r25	; 0x1e
    3136:	8d 8f       	std	Y+29, r24	; 0x1d

	/*Wait for more than 30 ms before any action (VDD rises to 4.5 v)*/
	_delay_ms(30);

	CLCD_voidSendCommand(0x33);
    3138:	83 e3       	ldi	r24, 0x33	; 51
    313a:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0x32);
    313e:	82 e3       	ldi	r24, 0x32	; 50
    3140:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <CLCD_voidSendCommand>


	/*Function set command: 2 lines, 5*7 Font size*/
	CLCD_voidSendCommand(CLCD_FUNCSET_4BIT);
    3144:	88 e2       	ldi	r24, 0x28	; 40
    3146:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <CLCD_voidSendCommand>

	/*Display on off control: display enable, disable cursor, no blink cursor*/
	CLCD_voidSendCommand(CLCD_DISPON_CURSOFF);
    314a:	8c e0       	ldi	r24, 0x0C	; 12
    314c:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <CLCD_voidSendCommand>
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	a0 e8       	ldi	r26, 0x80	; 128
    3156:	bf e3       	ldi	r27, 0x3F	; 63
    3158:	89 8f       	std	Y+25, r24	; 0x19
    315a:	9a 8f       	std	Y+26, r25	; 0x1a
    315c:	ab 8f       	std	Y+27, r26	; 0x1b
    315e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3160:	69 8d       	ldd	r22, Y+25	; 0x19
    3162:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3164:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3166:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	4a ef       	ldi	r20, 0xFA	; 250
    316e:	54 e4       	ldi	r21, 0x44	; 68
    3170:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	8d 8b       	std	Y+21, r24	; 0x15
    317a:	9e 8b       	std	Y+22, r25	; 0x16
    317c:	af 8b       	std	Y+23, r26	; 0x17
    317e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3180:	6d 89       	ldd	r22, Y+21	; 0x15
    3182:	7e 89       	ldd	r23, Y+22	; 0x16
    3184:	8f 89       	ldd	r24, Y+23	; 0x17
    3186:	98 8d       	ldd	r25, Y+24	; 0x18
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	40 e8       	ldi	r20, 0x80	; 128
    318e:	5f e3       	ldi	r21, 0x3F	; 63
    3190:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    3194:	88 23       	and	r24, r24
    3196:	2c f4       	brge	.+10     	; 0x31a2 <CLCD_voidInit+0x1a8>
		__ticks = 1;
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	9c 8b       	std	Y+20, r25	; 0x14
    319e:	8b 8b       	std	Y+19, r24	; 0x13
    31a0:	3f c0       	rjmp	.+126    	; 0x3220 <CLCD_voidInit+0x226>
	else if (__tmp > 65535)
    31a2:	6d 89       	ldd	r22, Y+21	; 0x15
    31a4:	7e 89       	ldd	r23, Y+22	; 0x16
    31a6:	8f 89       	ldd	r24, Y+23	; 0x17
    31a8:	98 8d       	ldd	r25, Y+24	; 0x18
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	3f ef       	ldi	r19, 0xFF	; 255
    31ae:	4f e7       	ldi	r20, 0x7F	; 127
    31b0:	57 e4       	ldi	r21, 0x47	; 71
    31b2:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    31b6:	18 16       	cp	r1, r24
    31b8:	4c f5       	brge	.+82     	; 0x320c <CLCD_voidInit+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ba:	69 8d       	ldd	r22, Y+25	; 0x19
    31bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	40 e2       	ldi	r20, 0x20	; 32
    31c8:	51 e4       	ldi	r21, 0x41	; 65
    31ca:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	bc 01       	movw	r22, r24
    31d4:	cd 01       	movw	r24, r26
    31d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	9c 8b       	std	Y+20, r25	; 0x14
    31e0:	8b 8b       	std	Y+19, r24	; 0x13
    31e2:	0f c0       	rjmp	.+30     	; 0x3202 <CLCD_voidInit+0x208>
    31e4:	88 ec       	ldi	r24, 0xC8	; 200
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	9a 8b       	std	Y+18, r25	; 0x12
    31ea:	89 8b       	std	Y+17, r24	; 0x11
    31ec:	89 89       	ldd	r24, Y+17	; 0x11
    31ee:	9a 89       	ldd	r25, Y+18	; 0x12
    31f0:	01 97       	sbiw	r24, 0x01	; 1
    31f2:	f1 f7       	brne	.-4      	; 0x31f0 <CLCD_voidInit+0x1f6>
    31f4:	9a 8b       	std	Y+18, r25	; 0x12
    31f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f8:	8b 89       	ldd	r24, Y+19	; 0x13
    31fa:	9c 89       	ldd	r25, Y+20	; 0x14
    31fc:	01 97       	sbiw	r24, 0x01	; 1
    31fe:	9c 8b       	std	Y+20, r25	; 0x14
    3200:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3202:	8b 89       	ldd	r24, Y+19	; 0x13
    3204:	9c 89       	ldd	r25, Y+20	; 0x14
    3206:	00 97       	sbiw	r24, 0x00	; 0
    3208:	69 f7       	brne	.-38     	; 0x31e4 <CLCD_voidInit+0x1ea>
    320a:	14 c0       	rjmp	.+40     	; 0x3234 <CLCD_voidInit+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    320c:	6d 89       	ldd	r22, Y+21	; 0x15
    320e:	7e 89       	ldd	r23, Y+22	; 0x16
    3210:	8f 89       	ldd	r24, Y+23	; 0x17
    3212:	98 8d       	ldd	r25, Y+24	; 0x18
    3214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	9c 8b       	std	Y+20, r25	; 0x14
    321e:	8b 8b       	std	Y+19, r24	; 0x13
    3220:	8b 89       	ldd	r24, Y+19	; 0x13
    3222:	9c 89       	ldd	r25, Y+20	; 0x14
    3224:	98 8b       	std	Y+16, r25	; 0x10
    3226:	8f 87       	std	Y+15, r24	; 0x0f
    3228:	8f 85       	ldd	r24, Y+15	; 0x0f
    322a:	98 89       	ldd	r25, Y+16	; 0x10
    322c:	01 97       	sbiw	r24, 0x01	; 1
    322e:	f1 f7       	brne	.-4      	; 0x322c <CLCD_voidInit+0x232>
    3230:	98 8b       	std	Y+16, r25	; 0x10
    3232:	8f 87       	std	Y+15, r24	; 0x0f

	/* wait more than 39 Ms*/
	_delay_ms(1);

	CLCD_voidSendCommand(CLCD_HOME);
    3234:	82 e0       	ldi	r24, 0x02	; 2
    3236:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <CLCD_voidSendCommand>

	/*Clear Display*/
	CLCD_voidSendCommand(CLCD_CLR);
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <CLCD_voidSendCommand>
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	a0 e0       	ldi	r26, 0x00	; 0
    3246:	b0 e4       	ldi	r27, 0x40	; 64
    3248:	8b 87       	std	Y+11, r24	; 0x0b
    324a:	9c 87       	std	Y+12, r25	; 0x0c
    324c:	ad 87       	std	Y+13, r26	; 0x0d
    324e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3250:	6b 85       	ldd	r22, Y+11	; 0x0b
    3252:	7c 85       	ldd	r23, Y+12	; 0x0c
    3254:	8d 85       	ldd	r24, Y+13	; 0x0d
    3256:	9e 85       	ldd	r25, Y+14	; 0x0e
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	4a ef       	ldi	r20, 0xFA	; 250
    325e:	54 e4       	ldi	r21, 0x44	; 68
    3260:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	8f 83       	std	Y+7, r24	; 0x07
    326a:	98 87       	std	Y+8, r25	; 0x08
    326c:	a9 87       	std	Y+9, r26	; 0x09
    326e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3270:	6f 81       	ldd	r22, Y+7	; 0x07
    3272:	78 85       	ldd	r23, Y+8	; 0x08
    3274:	89 85       	ldd	r24, Y+9	; 0x09
    3276:	9a 85       	ldd	r25, Y+10	; 0x0a
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	40 e8       	ldi	r20, 0x80	; 128
    327e:	5f e3       	ldi	r21, 0x3F	; 63
    3280:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    3284:	88 23       	and	r24, r24
    3286:	2c f4       	brge	.+10     	; 0x3292 <CLCD_voidInit+0x298>
		__ticks = 1;
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	9e 83       	std	Y+6, r25	; 0x06
    328e:	8d 83       	std	Y+5, r24	; 0x05
    3290:	3f c0       	rjmp	.+126    	; 0x3310 <CLCD_voidInit+0x316>
	else if (__tmp > 65535)
    3292:	6f 81       	ldd	r22, Y+7	; 0x07
    3294:	78 85       	ldd	r23, Y+8	; 0x08
    3296:	89 85       	ldd	r24, Y+9	; 0x09
    3298:	9a 85       	ldd	r25, Y+10	; 0x0a
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	3f ef       	ldi	r19, 0xFF	; 255
    329e:	4f e7       	ldi	r20, 0x7F	; 127
    32a0:	57 e4       	ldi	r21, 0x47	; 71
    32a2:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    32a6:	18 16       	cp	r1, r24
    32a8:	4c f5       	brge	.+82     	; 0x32fc <CLCD_voidInit+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    32b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	40 e2       	ldi	r20, 0x20	; 32
    32b8:	51 e4       	ldi	r21, 0x41	; 65
    32ba:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	bc 01       	movw	r22, r24
    32c4:	cd 01       	movw	r24, r26
    32c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	9e 83       	std	Y+6, r25	; 0x06
    32d0:	8d 83       	std	Y+5, r24	; 0x05
    32d2:	0f c0       	rjmp	.+30     	; 0x32f2 <CLCD_voidInit+0x2f8>
    32d4:	88 ec       	ldi	r24, 0xC8	; 200
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	9c 83       	std	Y+4, r25	; 0x04
    32da:	8b 83       	std	Y+3, r24	; 0x03
    32dc:	8b 81       	ldd	r24, Y+3	; 0x03
    32de:	9c 81       	ldd	r25, Y+4	; 0x04
    32e0:	01 97       	sbiw	r24, 0x01	; 1
    32e2:	f1 f7       	brne	.-4      	; 0x32e0 <CLCD_voidInit+0x2e6>
    32e4:	9c 83       	std	Y+4, r25	; 0x04
    32e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ea:	9e 81       	ldd	r25, Y+6	; 0x06
    32ec:	01 97       	sbiw	r24, 0x01	; 1
    32ee:	9e 83       	std	Y+6, r25	; 0x06
    32f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f2:	8d 81       	ldd	r24, Y+5	; 0x05
    32f4:	9e 81       	ldd	r25, Y+6	; 0x06
    32f6:	00 97       	sbiw	r24, 0x00	; 0
    32f8:	69 f7       	brne	.-38     	; 0x32d4 <CLCD_voidInit+0x2da>
    32fa:	14 c0       	rjmp	.+40     	; 0x3324 <CLCD_voidInit+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32fc:	6f 81       	ldd	r22, Y+7	; 0x07
    32fe:	78 85       	ldd	r23, Y+8	; 0x08
    3300:	89 85       	ldd	r24, Y+9	; 0x09
    3302:	9a 85       	ldd	r25, Y+10	; 0x0a
    3304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	9e 83       	std	Y+6, r25	; 0x06
    330e:	8d 83       	std	Y+5, r24	; 0x05
    3310:	8d 81       	ldd	r24, Y+5	; 0x05
    3312:	9e 81       	ldd	r25, Y+6	; 0x06
    3314:	9a 83       	std	Y+2, r25	; 0x02
    3316:	89 83       	std	Y+1, r24	; 0x01
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	9a 81       	ldd	r25, Y+2	; 0x02
    331c:	01 97       	sbiw	r24, 0x01	; 1
    331e:	f1 f7       	brne	.-4      	; 0x331c <CLCD_voidInit+0x322>
    3320:	9a 83       	std	Y+2, r25	; 0x02
    3322:	89 83       	std	Y+1, r24	; 0x01

	/* wait more than 1.53 Ms*/
	_delay_ms(2);

	CLCD_voidSendCommand(CLCD_ENTRYMODE);
    3324:	86 e0       	ldi	r24, 0x06	; 6
    3326:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <CLCD_voidSendCommand>

#else
#error ("You Chosed Wrong LCD Mode")

#endif
}
    332a:	aa 96       	adiw	r28, 0x2a	; 42
    332c:	0f b6       	in	r0, 0x3f	; 63
    332e:	f8 94       	cli
    3330:	de bf       	out	0x3e, r29	; 62
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	cd bf       	out	0x3d, r28	; 61
    3336:	cf 91       	pop	r28
    3338:	df 91       	pop	r29
    333a:	08 95       	ret

0000333c <CLCD_voidSendString>:


void CLCD_voidSendString(const char *Copy_pcString)
{
    333c:	df 93       	push	r29
    333e:	cf 93       	push	r28
    3340:	00 d0       	rcall	.+0      	; 0x3342 <CLCD_voidSendString+0x6>
    3342:	0f 92       	push	r0
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	9b 83       	std	Y+3, r25	; 0x03
    334a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    334c:	19 82       	std	Y+1, r1	; 0x01
    334e:	0e c0       	rjmp	.+28     	; 0x336c <CLCD_voidSendString+0x30>

	while(Copy_pcString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    3350:	89 81       	ldd	r24, Y+1	; 0x01
    3352:	28 2f       	mov	r18, r24
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	8a 81       	ldd	r24, Y+2	; 0x02
    3358:	9b 81       	ldd	r25, Y+3	; 0x03
    335a:	fc 01       	movw	r30, r24
    335c:	e2 0f       	add	r30, r18
    335e:	f3 1f       	adc	r31, r19
    3360:	80 81       	ld	r24, Z
    3362:	0e 94 7e 17 	call	0x2efc	; 0x2efc <CLCD_voidSendData>
		Local_u8Counter++;
    3366:	89 81       	ldd	r24, Y+1	; 0x01
    3368:	8f 5f       	subi	r24, 0xFF	; 255
    336a:	89 83       	std	Y+1, r24	; 0x01

void CLCD_voidSendString(const char *Copy_pcString)
{
	u8 Local_u8Counter=0;

	while(Copy_pcString[Local_u8Counter] != '\0')
    336c:	89 81       	ldd	r24, Y+1	; 0x01
    336e:	28 2f       	mov	r18, r24
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	8a 81       	ldd	r24, Y+2	; 0x02
    3374:	9b 81       	ldd	r25, Y+3	; 0x03
    3376:	fc 01       	movw	r30, r24
    3378:	e2 0f       	add	r30, r18
    337a:	f3 1f       	adc	r31, r19
    337c:	80 81       	ld	r24, Z
    337e:	88 23       	and	r24, r24
    3380:	39 f7       	brne	.-50     	; 0x3350 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    3382:	0f 90       	pop	r0
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	cf 91       	pop	r28
    338a:	df 91       	pop	r29
    338c:	08 95       	ret

0000338e <CLCD_voidSendStringIndex_16>:

void CLCD_voidSendStringIndex_16(const char *Copy_pcString)
{
    338e:	df 93       	push	r29
    3390:	cf 93       	push	r28
    3392:	00 d0       	rcall	.+0      	; 0x3394 <CLCD_voidSendStringIndex_16+0x6>
    3394:	0f 92       	push	r0
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
    339a:	9b 83       	std	Y+3, r25	; 0x03
    339c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    339e:	19 82       	std	Y+1, r1	; 0x01
    33a0:	20 c0       	rjmp	.+64     	; 0x33e2 <CLCD_voidSendStringIndex_16+0x54>

	while (Copy_pcString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	28 2f       	mov	r18, r24
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	8a 81       	ldd	r24, Y+2	; 0x02
    33aa:	9b 81       	ldd	r25, Y+3	; 0x03
    33ac:	fc 01       	movw	r30, r24
    33ae:	e2 0f       	add	r30, r18
    33b0:	f3 1f       	adc	r31, r19
    33b2:	80 81       	ld	r24, Z
    33b4:	0e 94 7e 17 	call	0x2efc	; 0x2efc <CLCD_voidSendData>
		Local_u8Counter++;
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	8f 5f       	subi	r24, 0xFF	; 255
    33bc:	89 83       	std	Y+1, r24	; 0x01
		if (Local_u8Counter == CLCD_COL_16 )
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	80 31       	cpi	r24, 0x10	; 16
    33c2:	79 f4       	brne	.+30     	; 0x33e2 <CLCD_voidSendStringIndex_16+0x54>
		{
			CLCD_voidGoToXY(CLCD_ROW_1,CLCD_COL_0);
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	60 e0       	ldi	r22, 0x00	; 0
    33c8:	0e 94 1b 1a 	call	0x3436	; 0x3436 <CLCD_voidGoToXY>
			CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	28 2f       	mov	r18, r24
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	8a 81       	ldd	r24, Y+2	; 0x02
    33d4:	9b 81       	ldd	r25, Y+3	; 0x03
    33d6:	fc 01       	movw	r30, r24
    33d8:	e2 0f       	add	r30, r18
    33da:	f3 1f       	adc	r31, r19
    33dc:	80 81       	ld	r24, Z
    33de:	0e 94 7e 17 	call	0x2efc	; 0x2efc <CLCD_voidSendData>

void CLCD_voidSendStringIndex_16(const char *Copy_pcString)
{
	u8 Local_u8Counter=0;

	while (Copy_pcString[Local_u8Counter] != '\0')
    33e2:	89 81       	ldd	r24, Y+1	; 0x01
    33e4:	28 2f       	mov	r18, r24
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ea:	9b 81       	ldd	r25, Y+3	; 0x03
    33ec:	fc 01       	movw	r30, r24
    33ee:	e2 0f       	add	r30, r18
    33f0:	f3 1f       	adc	r31, r19
    33f2:	80 81       	ld	r24, Z
    33f4:	88 23       	and	r24, r24
    33f6:	a9 f6       	brne	.-86     	; 0x33a2 <CLCD_voidSendStringIndex_16+0x14>
		{
			CLCD_voidGoToXY(CLCD_ROW_1,CLCD_COL_0);
			CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		}
	}
}
    33f8:	0f 90       	pop	r0
    33fa:	0f 90       	pop	r0
    33fc:	0f 90       	pop	r0
    33fe:	cf 91       	pop	r28
    3400:	df 91       	pop	r29
    3402:	08 95       	ret

00003404 <CLCD_voidSendStringPosition>:



void CLCD_voidSendStringPosition(const char * Copy_puString , u8 Copy_u8Xposition , u8 Copy_u8Yposition)
{
    3404:	df 93       	push	r29
    3406:	cf 93       	push	r28
    3408:	00 d0       	rcall	.+0      	; 0x340a <CLCD_voidSendStringPosition+0x6>
    340a:	00 d0       	rcall	.+0      	; 0x340c <CLCD_voidSendStringPosition+0x8>
    340c:	cd b7       	in	r28, 0x3d	; 61
    340e:	de b7       	in	r29, 0x3e	; 62
    3410:	9a 83       	std	Y+2, r25	; 0x02
    3412:	89 83       	std	Y+1, r24	; 0x01
    3414:	6b 83       	std	Y+3, r22	; 0x03
    3416:	4c 83       	std	Y+4, r20	; 0x04
	CLCD_voidGoToXY(Copy_u8Xposition,Copy_u8Yposition);
    3418:	8b 81       	ldd	r24, Y+3	; 0x03
    341a:	6c 81       	ldd	r22, Y+4	; 0x04
    341c:	0e 94 1b 1a 	call	0x3436	; 0x3436 <CLCD_voidGoToXY>
	CLCD_voidSendString(Copy_puString);
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	9a 81       	ldd	r25, Y+2	; 0x02
    3424:	0e 94 9e 19 	call	0x333c	; 0x333c <CLCD_voidSendString>
}
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	cf 91       	pop	r28
    3432:	df 91       	pop	r29
    3434:	08 95       	ret

00003436 <CLCD_voidGoToXY>:



void CLCD_voidGoToXY(u8 Copy_u8XPosition , u8 Copy_u8YPosition )
{
    3436:	df 93       	push	r29
    3438:	cf 93       	push	r28
    343a:	00 d0       	rcall	.+0      	; 0x343c <CLCD_voidGoToXY+0x6>
    343c:	0f 92       	push	r0
    343e:	cd b7       	in	r28, 0x3d	; 61
    3440:	de b7       	in	r29, 0x3e	; 62
    3442:	8a 83       	std	Y+2, r24	; 0x02
    3444:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;

	if (Copy_u8XPosition == CLCD_ROW_0)
    3446:	8a 81       	ldd	r24, Y+2	; 0x02
    3448:	88 23       	and	r24, r24
    344a:	19 f4       	brne	.+6      	; 0x3452 <CLCD_voidGoToXY+0x1c>
	{
		/*Location is at first line*/
		Local_u8Address = Copy_u8YPosition;
    344c:	8b 81       	ldd	r24, Y+3	; 0x03
    344e:	89 83       	std	Y+1, r24	; 0x01
    3450:	06 c0       	rjmp	.+12     	; 0x345e <CLCD_voidGoToXY+0x28>
	}

	else if( Copy_u8XPosition == CLCD_ROW_1)
    3452:	8a 81       	ldd	r24, Y+2	; 0x02
    3454:	81 30       	cpi	r24, 0x01	; 1
    3456:	19 f4       	brne	.+6      	; 0x345e <CLCD_voidGoToXY+0x28>
	{
		/*Location is at Second line*/
		Local_u8Address = Copy_u8YPosition + CLCD_SET_DDRAM_ROW1;
    3458:	8b 81       	ldd	r24, Y+3	; 0x03
    345a:	80 5c       	subi	r24, 0xC0	; 192
    345c:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Set bit number 7 (10000000) for set DDRAM Address Command than send the command  */
	CLCD_voidSendCommand(Local_u8Address + CLCD_SET_DDRAM_COMMAND);
    345e:	89 81       	ldd	r24, Y+1	; 0x01
    3460:	80 58       	subi	r24, 0x80	; 128
    3462:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <CLCD_voidSendCommand>
}
    3466:	0f 90       	pop	r0
    3468:	0f 90       	pop	r0
    346a:	0f 90       	pop	r0
    346c:	cf 91       	pop	r28
    346e:	df 91       	pop	r29
    3470:	08 95       	ret

00003472 <CLCD_voidSpecialCharacter>:



void CLCD_voidSpecialCharacter(u8* Copy_pu8Pattern ,u8 Copy_u8PatternNumber ,u8 Copy_u8XPosition,u8 Copy_u8YPosition)
{
    3472:	df 93       	push	r29
    3474:	cf 93       	push	r28
    3476:	cd b7       	in	r28, 0x3d	; 61
    3478:	de b7       	in	r29, 0x3e	; 62
    347a:	27 97       	sbiw	r28, 0x07	; 7
    347c:	0f b6       	in	r0, 0x3f	; 63
    347e:	f8 94       	cli
    3480:	de bf       	out	0x3e, r29	; 62
    3482:	0f be       	out	0x3f, r0	; 63
    3484:	cd bf       	out	0x3d, r28	; 61
    3486:	9c 83       	std	Y+4, r25	; 0x04
    3488:	8b 83       	std	Y+3, r24	; 0x03
    348a:	6d 83       	std	Y+5, r22	; 0x05
    348c:	4e 83       	std	Y+6, r20	; 0x06
    348e:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0;
    3490:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator;

	/*Calculate the CGRAM Address whose each block is 8 bytes*/
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
    3492:	8d 81       	ldd	r24, Y+5	; 0x05
    3494:	88 2f       	mov	r24, r24
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	88 0f       	add	r24, r24
    349a:	99 1f       	adc	r25, r25
    349c:	88 0f       	add	r24, r24
    349e:	99 1f       	adc	r25, r25
    34a0:	88 0f       	add	r24, r24
    34a2:	99 1f       	adc	r25, r25
    34a4:	8a 83       	std	Y+2, r24	; 0x02

	/*Send command i need write in  CGRAM address command to LCD , with set bit 6 , clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress + CLCD_SET_CGRAM_ADDRESS);
    34a6:	8a 81       	ldd	r24, Y+2	; 0x02
    34a8:	80 5c       	subi	r24, 0xC0	; 192
    34aa:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <CLCD_voidSendCommand>

	/*Write the pattern into CGRAM bit by bit in block 8bits */
	for (Local_u8Iterator=0 ; Local_u8Iterator <8 ; Local_u8Iterator++)
    34ae:	19 82       	std	Y+1, r1	; 0x01
    34b0:	0e c0       	rjmp	.+28     	; 0x34ce <CLCD_voidSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    34b2:	89 81       	ldd	r24, Y+1	; 0x01
    34b4:	28 2f       	mov	r18, r24
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ba:	9c 81       	ldd	r25, Y+4	; 0x04
    34bc:	fc 01       	movw	r30, r24
    34be:	e2 0f       	add	r30, r18
    34c0:	f3 1f       	adc	r31, r19
    34c2:	80 81       	ld	r24, Z
    34c4:	0e 94 7e 17 	call	0x2efc	; 0x2efc <CLCD_voidSendData>

	/*Send command i need write in  CGRAM address command to LCD , with set bit 6 , clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress + CLCD_SET_CGRAM_ADDRESS);

	/*Write the pattern into CGRAM bit by bit in block 8bits */
	for (Local_u8Iterator=0 ; Local_u8Iterator <8 ; Local_u8Iterator++)
    34c8:	89 81       	ldd	r24, Y+1	; 0x01
    34ca:	8f 5f       	subi	r24, 0xFF	; 255
    34cc:	89 83       	std	Y+1, r24	; 0x01
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	88 30       	cpi	r24, 0x08	; 8
    34d2:	78 f3       	brcs	.-34     	; 0x34b2 <CLCD_voidSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/*Go back to the DDRAM to Display the Pattern*/
	CLCD_voidGoToXY(Copy_u8XPosition,Copy_u8YPosition);
    34d4:	8e 81       	ldd	r24, Y+6	; 0x06
    34d6:	6f 81       	ldd	r22, Y+7	; 0x07
    34d8:	0e 94 1b 1a 	call	0x3436	; 0x3436 <CLCD_voidGoToXY>

	/*display the pattern written in the CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    34dc:	8d 81       	ldd	r24, Y+5	; 0x05
    34de:	0e 94 7e 17 	call	0x2efc	; 0x2efc <CLCD_voidSendData>
}
    34e2:	27 96       	adiw	r28, 0x07	; 7
    34e4:	0f b6       	in	r0, 0x3f	; 63
    34e6:	f8 94       	cli
    34e8:	de bf       	out	0x3e, r29	; 62
    34ea:	0f be       	out	0x3f, r0	; 63
    34ec:	cd bf       	out	0x3d, r28	; 61
    34ee:	cf 91       	pop	r28
    34f0:	df 91       	pop	r29
    34f2:	08 95       	ret

000034f4 <CLCD_voidPrintINTNumber>:


void CLCD_voidPrintINTNumber(u64 Copy_u16Number)
{
    34f4:	6f 92       	push	r6
    34f6:	7f 92       	push	r7
    34f8:	8f 92       	push	r8
    34fa:	9f 92       	push	r9
    34fc:	af 92       	push	r10
    34fe:	bf 92       	push	r11
    3500:	cf 92       	push	r12
    3502:	df 92       	push	r13
    3504:	ef 92       	push	r14
    3506:	ff 92       	push	r15
    3508:	0f 93       	push	r16
    350a:	1f 93       	push	r17
    350c:	df 93       	push	r29
    350e:	cf 93       	push	r28
    3510:	cd b7       	in	r28, 0x3d	; 61
    3512:	de b7       	in	r29, 0x3e	; 62
    3514:	e4 97       	sbiw	r28, 0x34	; 52
    3516:	0f b6       	in	r0, 0x3f	; 63
    3518:	f8 94       	cli
    351a:	de bf       	out	0x3e, r29	; 62
    351c:	0f be       	out	0x3f, r0	; 63
    351e:	cd bf       	out	0x3d, r28	; 61
    3520:	2d a7       	std	Y+45, r18	; 0x2d
    3522:	3e a7       	std	Y+46, r19	; 0x2e
    3524:	4f a7       	std	Y+47, r20	; 0x2f
    3526:	58 ab       	std	Y+48, r21	; 0x30
    3528:	69 ab       	std	Y+49, r22	; 0x31
    352a:	7a ab       	std	Y+50, r23	; 0x32
    352c:	8b ab       	std	Y+51, r24	; 0x33
    352e:	9c ab       	std	Y+52, r25	; 0x34

	u32 arr[10]={0}, Index_u8Array=10;
    3530:	88 e2       	ldi	r24, 0x28	; 40
    3532:	fe 01       	movw	r30, r28
    3534:	35 96       	adiw	r30, 0x05	; 5
    3536:	df 01       	movw	r26, r30
    3538:	98 2f       	mov	r25, r24
    353a:	1d 92       	st	X+, r1
    353c:	9a 95       	dec	r25
    353e:	e9 f7       	brne	.-6      	; 0x353a <CLCD_voidPrintINTNumber+0x46>
    3540:	8a e0       	ldi	r24, 0x0A	; 10
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	a0 e0       	ldi	r26, 0x00	; 0
    3546:	b0 e0       	ldi	r27, 0x00	; 0
    3548:	89 83       	std	Y+1, r24	; 0x01
    354a:	9a 83       	std	Y+2, r25	; 0x02
    354c:	ab 83       	std	Y+3, r26	; 0x03
    354e:	bc 83       	std	Y+4, r27	; 0x04

	if (Copy_u16Number == 0){ CLCD_voidSendData('0'); }
    3550:	8d a5       	ldd	r24, Y+45	; 0x2d
    3552:	9e a5       	ldd	r25, Y+46	; 0x2e
    3554:	89 2b       	or	r24, r25
    3556:	9f a5       	ldd	r25, Y+47	; 0x2f
    3558:	89 2b       	or	r24, r25
    355a:	98 a9       	ldd	r25, Y+48	; 0x30
    355c:	89 2b       	or	r24, r25
    355e:	99 a9       	ldd	r25, Y+49	; 0x31
    3560:	89 2b       	or	r24, r25
    3562:	9a a9       	ldd	r25, Y+50	; 0x32
    3564:	89 2b       	or	r24, r25
    3566:	9b a9       	ldd	r25, Y+51	; 0x33
    3568:	89 2b       	or	r24, r25
    356a:	9c a9       	ldd	r25, Y+52	; 0x34
    356c:	89 2b       	or	r24, r25
    356e:	88 23       	and	r24, r24
    3570:	09 f0       	breq	.+2      	; 0x3574 <CLCD_voidPrintINTNumber+0x80>
    3572:	8c c0       	rjmp	.+280    	; 0x368c <CLCD_voidPrintINTNumber+0x198>
    3574:	80 e3       	ldi	r24, 0x30	; 48
    3576:	0e 94 7e 17 	call	0x2efc	; 0x2efc <CLCD_voidSendData>
    357a:	c4 c0       	rjmp	.+392    	; 0x3704 <CLCD_voidPrintINTNumber+0x210>

	else{
		while (Copy_u16Number != 0)
		{
			arr[Index_u8Array-1]=(Copy_u16Number%10)+'0';
    357c:	89 81       	ldd	r24, Y+1	; 0x01
    357e:	9a 81       	ldd	r25, Y+2	; 0x02
    3580:	ab 81       	ldd	r26, Y+3	; 0x03
    3582:	bc 81       	ldd	r27, Y+4	; 0x04
    3584:	3c 01       	movw	r6, r24
    3586:	4d 01       	movw	r8, r26
    3588:	08 94       	sec
    358a:	61 08       	sbc	r6, r1
    358c:	71 08       	sbc	r7, r1
    358e:	81 08       	sbc	r8, r1
    3590:	91 08       	sbc	r9, r1
    3592:	ad a4       	ldd	r10, Y+45	; 0x2d
    3594:	be a4       	ldd	r11, Y+46	; 0x2e
    3596:	cf a4       	ldd	r12, Y+47	; 0x2f
    3598:	d8 a8       	ldd	r13, Y+48	; 0x30
    359a:	e9 a8       	ldd	r14, Y+49	; 0x31
    359c:	fa a8       	ldd	r15, Y+50	; 0x32
    359e:	0b a9       	ldd	r16, Y+51	; 0x33
    35a0:	1c a9       	ldd	r17, Y+52	; 0x34
    35a2:	2a 2d       	mov	r18, r10
    35a4:	3b 2d       	mov	r19, r11
    35a6:	4c 2d       	mov	r20, r12
    35a8:	5d 2d       	mov	r21, r13
    35aa:	6e 2d       	mov	r22, r14
    35ac:	7f 2d       	mov	r23, r15
    35ae:	80 2f       	mov	r24, r16
    35b0:	91 2f       	mov	r25, r17
    35b2:	0f 2e       	mov	r0, r31
    35b4:	fa e0       	ldi	r31, 0x0A	; 10
    35b6:	af 2e       	mov	r10, r31
    35b8:	f0 2d       	mov	r31, r0
    35ba:	bb 24       	eor	r11, r11
    35bc:	cc 24       	eor	r12, r12
    35be:	dd 24       	eor	r13, r13
    35c0:	ee 24       	eor	r14, r14
    35c2:	ff 24       	eor	r15, r15
    35c4:	00 e0       	ldi	r16, 0x00	; 0
    35c6:	10 e0       	ldi	r17, 0x00	; 0
    35c8:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__umoddi3>
    35cc:	a2 2e       	mov	r10, r18
    35ce:	b3 2e       	mov	r11, r19
    35d0:	c4 2e       	mov	r12, r20
    35d2:	d5 2e       	mov	r13, r21
    35d4:	e6 2e       	mov	r14, r22
    35d6:	f7 2e       	mov	r15, r23
    35d8:	08 2f       	mov	r16, r24
    35da:	19 2f       	mov	r17, r25
    35dc:	2a 2d       	mov	r18, r10
    35de:	3b 2d       	mov	r19, r11
    35e0:	4c 2d       	mov	r20, r12
    35e2:	5d 2d       	mov	r21, r13
    35e4:	6e 2d       	mov	r22, r14
    35e6:	7f 2d       	mov	r23, r15
    35e8:	80 2f       	mov	r24, r16
    35ea:	91 2f       	mov	r25, r17
    35ec:	da 01       	movw	r26, r20
    35ee:	c9 01       	movw	r24, r18
    35f0:	ac 01       	movw	r20, r24
    35f2:	bd 01       	movw	r22, r26
    35f4:	40 5d       	subi	r20, 0xD0	; 208
    35f6:	5f 4f       	sbci	r21, 0xFF	; 255
    35f8:	6f 4f       	sbci	r22, 0xFF	; 255
    35fa:	7f 4f       	sbci	r23, 0xFF	; 255
    35fc:	c3 01       	movw	r24, r6
    35fe:	9c 01       	movw	r18, r24
    3600:	22 0f       	add	r18, r18
    3602:	33 1f       	adc	r19, r19
    3604:	22 0f       	add	r18, r18
    3606:	33 1f       	adc	r19, r19
    3608:	ce 01       	movw	r24, r28
    360a:	01 96       	adiw	r24, 0x01	; 1
    360c:	82 0f       	add	r24, r18
    360e:	93 1f       	adc	r25, r19
    3610:	fc 01       	movw	r30, r24
    3612:	34 96       	adiw	r30, 0x04	; 4
    3614:	40 83       	st	Z, r20
    3616:	51 83       	std	Z+1, r21	; 0x01
    3618:	62 83       	std	Z+2, r22	; 0x02
    361a:	73 83       	std	Z+3, r23	; 0x03
			Copy_u16Number=Copy_u16Number/10;
    361c:	ad a4       	ldd	r10, Y+45	; 0x2d
    361e:	be a4       	ldd	r11, Y+46	; 0x2e
    3620:	cf a4       	ldd	r12, Y+47	; 0x2f
    3622:	d8 a8       	ldd	r13, Y+48	; 0x30
    3624:	e9 a8       	ldd	r14, Y+49	; 0x31
    3626:	fa a8       	ldd	r15, Y+50	; 0x32
    3628:	0b a9       	ldd	r16, Y+51	; 0x33
    362a:	1c a9       	ldd	r17, Y+52	; 0x34
    362c:	2a 2d       	mov	r18, r10
    362e:	3b 2d       	mov	r19, r11
    3630:	4c 2d       	mov	r20, r12
    3632:	5d 2d       	mov	r21, r13
    3634:	6e 2d       	mov	r22, r14
    3636:	7f 2d       	mov	r23, r15
    3638:	80 2f       	mov	r24, r16
    363a:	91 2f       	mov	r25, r17
    363c:	0f 2e       	mov	r0, r31
    363e:	fa e0       	ldi	r31, 0x0A	; 10
    3640:	af 2e       	mov	r10, r31
    3642:	f0 2d       	mov	r31, r0
    3644:	bb 24       	eor	r11, r11
    3646:	cc 24       	eor	r12, r12
    3648:	dd 24       	eor	r13, r13
    364a:	ee 24       	eor	r14, r14
    364c:	ff 24       	eor	r15, r15
    364e:	00 e0       	ldi	r16, 0x00	; 0
    3650:	10 e0       	ldi	r17, 0x00	; 0
    3652:	0e 94 75 00 	call	0xea	; 0xea <__udivdi3>
    3656:	a2 2e       	mov	r10, r18
    3658:	b3 2e       	mov	r11, r19
    365a:	c4 2e       	mov	r12, r20
    365c:	d5 2e       	mov	r13, r21
    365e:	e6 2e       	mov	r14, r22
    3660:	f7 2e       	mov	r15, r23
    3662:	08 2f       	mov	r16, r24
    3664:	19 2f       	mov	r17, r25
    3666:	ad a6       	std	Y+45, r10	; 0x2d
    3668:	be a6       	std	Y+46, r11	; 0x2e
    366a:	cf a6       	std	Y+47, r12	; 0x2f
    366c:	d8 aa       	std	Y+48, r13	; 0x30
    366e:	e9 aa       	std	Y+49, r14	; 0x31
    3670:	fa aa       	std	Y+50, r15	; 0x32
    3672:	0b ab       	std	Y+51, r16	; 0x33
    3674:	1c ab       	std	Y+52, r17	; 0x34
			Index_u8Array--;
    3676:	89 81       	ldd	r24, Y+1	; 0x01
    3678:	9a 81       	ldd	r25, Y+2	; 0x02
    367a:	ab 81       	ldd	r26, Y+3	; 0x03
    367c:	bc 81       	ldd	r27, Y+4	; 0x04
    367e:	01 97       	sbiw	r24, 0x01	; 1
    3680:	a1 09       	sbc	r26, r1
    3682:	b1 09       	sbc	r27, r1
    3684:	89 83       	std	Y+1, r24	; 0x01
    3686:	9a 83       	std	Y+2, r25	; 0x02
    3688:	ab 83       	std	Y+3, r26	; 0x03
    368a:	bc 83       	std	Y+4, r27	; 0x04
	u32 arr[10]={0}, Index_u8Array=10;

	if (Copy_u16Number == 0){ CLCD_voidSendData('0'); }

	else{
		while (Copy_u16Number != 0)
    368c:	8d a5       	ldd	r24, Y+45	; 0x2d
    368e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3690:	89 2b       	or	r24, r25
    3692:	9f a5       	ldd	r25, Y+47	; 0x2f
    3694:	89 2b       	or	r24, r25
    3696:	98 a9       	ldd	r25, Y+48	; 0x30
    3698:	89 2b       	or	r24, r25
    369a:	99 a9       	ldd	r25, Y+49	; 0x31
    369c:	89 2b       	or	r24, r25
    369e:	9a a9       	ldd	r25, Y+50	; 0x32
    36a0:	89 2b       	or	r24, r25
    36a2:	9b a9       	ldd	r25, Y+51	; 0x33
    36a4:	89 2b       	or	r24, r25
    36a6:	9c a9       	ldd	r25, Y+52	; 0x34
    36a8:	89 2b       	or	r24, r25
    36aa:	88 23       	and	r24, r24
    36ac:	09 f0       	breq	.+2      	; 0x36b0 <CLCD_voidPrintINTNumber+0x1bc>
    36ae:	66 cf       	rjmp	.-308    	; 0x357c <CLCD_voidPrintINTNumber+0x88>
    36b0:	20 c0       	rjmp	.+64     	; 0x36f2 <CLCD_voidPrintINTNumber+0x1fe>
			Copy_u16Number=Copy_u16Number/10;
			Index_u8Array--;
		}
		for (; Index_u8Array<=9 ; Index_u8Array++ )
		{
			CLCD_voidSendData(arr[Index_u8Array]);
    36b2:	89 81       	ldd	r24, Y+1	; 0x01
    36b4:	9a 81       	ldd	r25, Y+2	; 0x02
    36b6:	ab 81       	ldd	r26, Y+3	; 0x03
    36b8:	bc 81       	ldd	r27, Y+4	; 0x04
    36ba:	9c 01       	movw	r18, r24
    36bc:	22 0f       	add	r18, r18
    36be:	33 1f       	adc	r19, r19
    36c0:	22 0f       	add	r18, r18
    36c2:	33 1f       	adc	r19, r19
    36c4:	ce 01       	movw	r24, r28
    36c6:	01 96       	adiw	r24, 0x01	; 1
    36c8:	82 0f       	add	r24, r18
    36ca:	93 1f       	adc	r25, r19
    36cc:	fc 01       	movw	r30, r24
    36ce:	34 96       	adiw	r30, 0x04	; 4
    36d0:	80 81       	ld	r24, Z
    36d2:	91 81       	ldd	r25, Z+1	; 0x01
    36d4:	a2 81       	ldd	r26, Z+2	; 0x02
    36d6:	b3 81       	ldd	r27, Z+3	; 0x03
    36d8:	0e 94 7e 17 	call	0x2efc	; 0x2efc <CLCD_voidSendData>
		{
			arr[Index_u8Array-1]=(Copy_u16Number%10)+'0';
			Copy_u16Number=Copy_u16Number/10;
			Index_u8Array--;
		}
		for (; Index_u8Array<=9 ; Index_u8Array++ )
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	9a 81       	ldd	r25, Y+2	; 0x02
    36e0:	ab 81       	ldd	r26, Y+3	; 0x03
    36e2:	bc 81       	ldd	r27, Y+4	; 0x04
    36e4:	01 96       	adiw	r24, 0x01	; 1
    36e6:	a1 1d       	adc	r26, r1
    36e8:	b1 1d       	adc	r27, r1
    36ea:	89 83       	std	Y+1, r24	; 0x01
    36ec:	9a 83       	std	Y+2, r25	; 0x02
    36ee:	ab 83       	std	Y+3, r26	; 0x03
    36f0:	bc 83       	std	Y+4, r27	; 0x04
    36f2:	89 81       	ldd	r24, Y+1	; 0x01
    36f4:	9a 81       	ldd	r25, Y+2	; 0x02
    36f6:	ab 81       	ldd	r26, Y+3	; 0x03
    36f8:	bc 81       	ldd	r27, Y+4	; 0x04
    36fa:	8a 30       	cpi	r24, 0x0A	; 10
    36fc:	91 05       	cpc	r25, r1
    36fe:	a1 05       	cpc	r26, r1
    3700:	b1 05       	cpc	r27, r1
    3702:	b8 f2       	brcs	.-82     	; 0x36b2 <CLCD_voidPrintINTNumber+0x1be>
		{
			CLCD_voidSendData(arr[Index_u8Array]);
		}
	}
}
    3704:	e4 96       	adiw	r28, 0x34	; 52
    3706:	0f b6       	in	r0, 0x3f	; 63
    3708:	f8 94       	cli
    370a:	de bf       	out	0x3e, r29	; 62
    370c:	0f be       	out	0x3f, r0	; 63
    370e:	cd bf       	out	0x3d, r28	; 61
    3710:	cf 91       	pop	r28
    3712:	df 91       	pop	r29
    3714:	1f 91       	pop	r17
    3716:	0f 91       	pop	r16
    3718:	ff 90       	pop	r15
    371a:	ef 90       	pop	r14
    371c:	df 90       	pop	r13
    371e:	cf 90       	pop	r12
    3720:	bf 90       	pop	r11
    3722:	af 90       	pop	r10
    3724:	9f 90       	pop	r9
    3726:	8f 90       	pop	r8
    3728:	7f 90       	pop	r7
    372a:	6f 90       	pop	r6
    372c:	08 95       	ret

0000372e <CLCD_voidSendINTNumberPosition>:

void CLCD_voidSendINTNumberPosition(u32 Copy_u16Number , u8 Copy_u8Xposition , u8 Copy_u8Yposition)
{
    372e:	af 92       	push	r10
    3730:	bf 92       	push	r11
    3732:	cf 92       	push	r12
    3734:	df 92       	push	r13
    3736:	ef 92       	push	r14
    3738:	ff 92       	push	r15
    373a:	0f 93       	push	r16
    373c:	1f 93       	push	r17
    373e:	df 93       	push	r29
    3740:	cf 93       	push	r28
    3742:	00 d0       	rcall	.+0      	; 0x3744 <CLCD_voidSendINTNumberPosition+0x16>
    3744:	00 d0       	rcall	.+0      	; 0x3746 <CLCD_voidSendINTNumberPosition+0x18>
    3746:	00 d0       	rcall	.+0      	; 0x3748 <CLCD_voidSendINTNumberPosition+0x1a>
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
    374c:	69 83       	std	Y+1, r22	; 0x01
    374e:	7a 83       	std	Y+2, r23	; 0x02
    3750:	8b 83       	std	Y+3, r24	; 0x03
    3752:	9c 83       	std	Y+4, r25	; 0x04
    3754:	4d 83       	std	Y+5, r20	; 0x05
    3756:	2e 83       	std	Y+6, r18	; 0x06
	CLCD_voidGoToXY(Copy_u8Xposition,Copy_u8Yposition);
    3758:	8d 81       	ldd	r24, Y+5	; 0x05
    375a:	6e 81       	ldd	r22, Y+6	; 0x06
    375c:	0e 94 1b 1a 	call	0x3436	; 0x3436 <CLCD_voidGoToXY>
	CLCD_voidPrintINTNumber(Copy_u16Number);
    3760:	89 81       	ldd	r24, Y+1	; 0x01
    3762:	9a 81       	ldd	r25, Y+2	; 0x02
    3764:	ab 81       	ldd	r26, Y+3	; 0x03
    3766:	bc 81       	ldd	r27, Y+4	; 0x04
    3768:	5c 01       	movw	r10, r24
    376a:	6d 01       	movw	r12, r26
    376c:	ee 24       	eor	r14, r14
    376e:	ff 24       	eor	r15, r15
    3770:	87 01       	movw	r16, r14
    3772:	2a 2d       	mov	r18, r10
    3774:	3b 2d       	mov	r19, r11
    3776:	4c 2d       	mov	r20, r12
    3778:	5d 2d       	mov	r21, r13
    377a:	6e 2d       	mov	r22, r14
    377c:	7f 2d       	mov	r23, r15
    377e:	80 2f       	mov	r24, r16
    3780:	91 2f       	mov	r25, r17
    3782:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <CLCD_voidPrintINTNumber>
}
    3786:	26 96       	adiw	r28, 0x06	; 6
    3788:	0f b6       	in	r0, 0x3f	; 63
    378a:	f8 94       	cli
    378c:	de bf       	out	0x3e, r29	; 62
    378e:	0f be       	out	0x3f, r0	; 63
    3790:	cd bf       	out	0x3d, r28	; 61
    3792:	cf 91       	pop	r28
    3794:	df 91       	pop	r29
    3796:	1f 91       	pop	r17
    3798:	0f 91       	pop	r16
    379a:	ff 90       	pop	r15
    379c:	ef 90       	pop	r14
    379e:	df 90       	pop	r13
    37a0:	cf 90       	pop	r12
    37a2:	bf 90       	pop	r11
    37a4:	af 90       	pop	r10
    37a6:	08 95       	ret

000037a8 <CLCD_voidClearLCD>:




void CLCD_voidClearLCD(void)
{
    37a8:	df 93       	push	r29
    37aa:	cf 93       	push	r28
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
    37b0:	2e 97       	sbiw	r28, 0x0e	; 14
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	f8 94       	cli
    37b6:	de bf       	out	0x3e, r29	; 62
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(CLCD_CLR);
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <CLCD_voidSendCommand>
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	a0 e2       	ldi	r26, 0x20	; 32
    37c8:	b1 e4       	ldi	r27, 0x41	; 65
    37ca:	8b 87       	std	Y+11, r24	; 0x0b
    37cc:	9c 87       	std	Y+12, r25	; 0x0c
    37ce:	ad 87       	std	Y+13, r26	; 0x0d
    37d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	4a ef       	ldi	r20, 0xFA	; 250
    37e0:	54 e4       	ldi	r21, 0x44	; 68
    37e2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    37e6:	dc 01       	movw	r26, r24
    37e8:	cb 01       	movw	r24, r22
    37ea:	8f 83       	std	Y+7, r24	; 0x07
    37ec:	98 87       	std	Y+8, r25	; 0x08
    37ee:	a9 87       	std	Y+9, r26	; 0x09
    37f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37f2:	6f 81       	ldd	r22, Y+7	; 0x07
    37f4:	78 85       	ldd	r23, Y+8	; 0x08
    37f6:	89 85       	ldd	r24, Y+9	; 0x09
    37f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	40 e8       	ldi	r20, 0x80	; 128
    3800:	5f e3       	ldi	r21, 0x3F	; 63
    3802:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    3806:	88 23       	and	r24, r24
    3808:	2c f4       	brge	.+10     	; 0x3814 <CLCD_voidClearLCD+0x6c>
		__ticks = 1;
    380a:	81 e0       	ldi	r24, 0x01	; 1
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	9e 83       	std	Y+6, r25	; 0x06
    3810:	8d 83       	std	Y+5, r24	; 0x05
    3812:	3f c0       	rjmp	.+126    	; 0x3892 <CLCD_voidClearLCD+0xea>
	else if (__tmp > 65535)
    3814:	6f 81       	ldd	r22, Y+7	; 0x07
    3816:	78 85       	ldd	r23, Y+8	; 0x08
    3818:	89 85       	ldd	r24, Y+9	; 0x09
    381a:	9a 85       	ldd	r25, Y+10	; 0x0a
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	3f ef       	ldi	r19, 0xFF	; 255
    3820:	4f e7       	ldi	r20, 0x7F	; 127
    3822:	57 e4       	ldi	r21, 0x47	; 71
    3824:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    3828:	18 16       	cp	r1, r24
    382a:	4c f5       	brge	.+82     	; 0x387e <CLCD_voidClearLCD+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    382c:	6b 85       	ldd	r22, Y+11	; 0x0b
    382e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3830:	8d 85       	ldd	r24, Y+13	; 0x0d
    3832:	9e 85       	ldd	r25, Y+14	; 0x0e
    3834:	20 e0       	ldi	r18, 0x00	; 0
    3836:	30 e0       	ldi	r19, 0x00	; 0
    3838:	40 e2       	ldi	r20, 0x20	; 32
    383a:	51 e4       	ldi	r21, 0x41	; 65
    383c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3840:	dc 01       	movw	r26, r24
    3842:	cb 01       	movw	r24, r22
    3844:	bc 01       	movw	r22, r24
    3846:	cd 01       	movw	r24, r26
    3848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	9e 83       	std	Y+6, r25	; 0x06
    3852:	8d 83       	std	Y+5, r24	; 0x05
    3854:	0f c0       	rjmp	.+30     	; 0x3874 <CLCD_voidClearLCD+0xcc>
    3856:	88 ec       	ldi	r24, 0xC8	; 200
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	9c 83       	std	Y+4, r25	; 0x04
    385c:	8b 83       	std	Y+3, r24	; 0x03
    385e:	8b 81       	ldd	r24, Y+3	; 0x03
    3860:	9c 81       	ldd	r25, Y+4	; 0x04
    3862:	01 97       	sbiw	r24, 0x01	; 1
    3864:	f1 f7       	brne	.-4      	; 0x3862 <CLCD_voidClearLCD+0xba>
    3866:	9c 83       	std	Y+4, r25	; 0x04
    3868:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    386a:	8d 81       	ldd	r24, Y+5	; 0x05
    386c:	9e 81       	ldd	r25, Y+6	; 0x06
    386e:	01 97       	sbiw	r24, 0x01	; 1
    3870:	9e 83       	std	Y+6, r25	; 0x06
    3872:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3874:	8d 81       	ldd	r24, Y+5	; 0x05
    3876:	9e 81       	ldd	r25, Y+6	; 0x06
    3878:	00 97       	sbiw	r24, 0x00	; 0
    387a:	69 f7       	brne	.-38     	; 0x3856 <CLCD_voidClearLCD+0xae>
    387c:	14 c0       	rjmp	.+40     	; 0x38a6 <CLCD_voidClearLCD+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    387e:	6f 81       	ldd	r22, Y+7	; 0x07
    3880:	78 85       	ldd	r23, Y+8	; 0x08
    3882:	89 85       	ldd	r24, Y+9	; 0x09
    3884:	9a 85       	ldd	r25, Y+10	; 0x0a
    3886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388a:	dc 01       	movw	r26, r24
    388c:	cb 01       	movw	r24, r22
    388e:	9e 83       	std	Y+6, r25	; 0x06
    3890:	8d 83       	std	Y+5, r24	; 0x05
    3892:	8d 81       	ldd	r24, Y+5	; 0x05
    3894:	9e 81       	ldd	r25, Y+6	; 0x06
    3896:	9a 83       	std	Y+2, r25	; 0x02
    3898:	89 83       	std	Y+1, r24	; 0x01
    389a:	89 81       	ldd	r24, Y+1	; 0x01
    389c:	9a 81       	ldd	r25, Y+2	; 0x02
    389e:	01 97       	sbiw	r24, 0x01	; 1
    38a0:	f1 f7       	brne	.-4      	; 0x389e <CLCD_voidClearLCD+0xf6>
    38a2:	9a 83       	std	Y+2, r25	; 0x02
    38a4:	89 83       	std	Y+1, r24	; 0x01

	//wait more than 1.53 ms
	_delay_ms(10);

}
    38a6:	2e 96       	adiw	r28, 0x0e	; 14
    38a8:	0f b6       	in	r0, 0x3f	; 63
    38aa:	f8 94       	cli
    38ac:	de bf       	out	0x3e, r29	; 62
    38ae:	0f be       	out	0x3f, r0	; 63
    38b0:	cd bf       	out	0x3d, r28	; 61
    38b2:	cf 91       	pop	r28
    38b4:	df 91       	pop	r29
    38b6:	08 95       	ret

000038b8 <CLCD_voidClearLCDPosition>:

void CLCD_voidClearLCDPosition(u8 Copy_u8XPostion,u8 Copy_u8YPostion)
{
    38b8:	df 93       	push	r29
    38ba:	cf 93       	push	r28
    38bc:	00 d0       	rcall	.+0      	; 0x38be <CLCD_voidClearLCDPosition+0x6>
    38be:	cd b7       	in	r28, 0x3d	; 61
    38c0:	de b7       	in	r29, 0x3e	; 62
    38c2:	89 83       	std	Y+1, r24	; 0x01
    38c4:	6a 83       	std	Y+2, r22	; 0x02
	CLCD_voidGoToXY(Copy_u8XPostion,Copy_u8YPostion);
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	6a 81       	ldd	r22, Y+2	; 0x02
    38ca:	0e 94 1b 1a 	call	0x3436	; 0x3436 <CLCD_voidGoToXY>
	CLCD_voidSendData(' ');
    38ce:	80 e2       	ldi	r24, 0x20	; 32
    38d0:	0e 94 7e 17 	call	0x2efc	; 0x2efc <CLCD_voidSendData>
}
    38d4:	0f 90       	pop	r0
    38d6:	0f 90       	pop	r0
    38d8:	cf 91       	pop	r28
    38da:	df 91       	pop	r29
    38dc:	08 95       	ret

000038de <CLCD_voidCursorOff>:




void CLCD_voidCursorOff(void)
{
    38de:	df 93       	push	r29
    38e0:	cf 93       	push	r28
    38e2:	cd b7       	in	r28, 0x3d	; 61
    38e4:	de b7       	in	r29, 0x3e	; 62
    38e6:	2e 97       	sbiw	r28, 0x0e	; 14
    38e8:	0f b6       	in	r0, 0x3f	; 63
    38ea:	f8 94       	cli
    38ec:	de bf       	out	0x3e, r29	; 62
    38ee:	0f be       	out	0x3f, r0	; 63
    38f0:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(CLCD_DISPON_CURSOFF);
    38f2:	8c e0       	ldi	r24, 0x0C	; 12
    38f4:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <CLCD_voidSendCommand>
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	a0 e0       	ldi	r26, 0x00	; 0
    38fe:	b0 e4       	ldi	r27, 0x40	; 64
    3900:	8b 87       	std	Y+11, r24	; 0x0b
    3902:	9c 87       	std	Y+12, r25	; 0x0c
    3904:	ad 87       	std	Y+13, r26	; 0x0d
    3906:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3908:	6b 85       	ldd	r22, Y+11	; 0x0b
    390a:	7c 85       	ldd	r23, Y+12	; 0x0c
    390c:	8d 85       	ldd	r24, Y+13	; 0x0d
    390e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3910:	20 e0       	ldi	r18, 0x00	; 0
    3912:	30 e0       	ldi	r19, 0x00	; 0
    3914:	4a ef       	ldi	r20, 0xFA	; 250
    3916:	54 e4       	ldi	r21, 0x44	; 68
    3918:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	8f 83       	std	Y+7, r24	; 0x07
    3922:	98 87       	std	Y+8, r25	; 0x08
    3924:	a9 87       	std	Y+9, r26	; 0x09
    3926:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3928:	6f 81       	ldd	r22, Y+7	; 0x07
    392a:	78 85       	ldd	r23, Y+8	; 0x08
    392c:	89 85       	ldd	r24, Y+9	; 0x09
    392e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	40 e8       	ldi	r20, 0x80	; 128
    3936:	5f e3       	ldi	r21, 0x3F	; 63
    3938:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    393c:	88 23       	and	r24, r24
    393e:	2c f4       	brge	.+10     	; 0x394a <CLCD_voidCursorOff+0x6c>
		__ticks = 1;
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	9e 83       	std	Y+6, r25	; 0x06
    3946:	8d 83       	std	Y+5, r24	; 0x05
    3948:	3f c0       	rjmp	.+126    	; 0x39c8 <CLCD_voidCursorOff+0xea>
	else if (__tmp > 65535)
    394a:	6f 81       	ldd	r22, Y+7	; 0x07
    394c:	78 85       	ldd	r23, Y+8	; 0x08
    394e:	89 85       	ldd	r24, Y+9	; 0x09
    3950:	9a 85       	ldd	r25, Y+10	; 0x0a
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	3f ef       	ldi	r19, 0xFF	; 255
    3956:	4f e7       	ldi	r20, 0x7F	; 127
    3958:	57 e4       	ldi	r21, 0x47	; 71
    395a:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    395e:	18 16       	cp	r1, r24
    3960:	4c f5       	brge	.+82     	; 0x39b4 <CLCD_voidCursorOff+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3962:	6b 85       	ldd	r22, Y+11	; 0x0b
    3964:	7c 85       	ldd	r23, Y+12	; 0x0c
    3966:	8d 85       	ldd	r24, Y+13	; 0x0d
    3968:	9e 85       	ldd	r25, Y+14	; 0x0e
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	40 e2       	ldi	r20, 0x20	; 32
    3970:	51 e4       	ldi	r21, 0x41	; 65
    3972:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	bc 01       	movw	r22, r24
    397c:	cd 01       	movw	r24, r26
    397e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	9e 83       	std	Y+6, r25	; 0x06
    3988:	8d 83       	std	Y+5, r24	; 0x05
    398a:	0f c0       	rjmp	.+30     	; 0x39aa <CLCD_voidCursorOff+0xcc>
    398c:	88 ec       	ldi	r24, 0xC8	; 200
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	9c 83       	std	Y+4, r25	; 0x04
    3992:	8b 83       	std	Y+3, r24	; 0x03
    3994:	8b 81       	ldd	r24, Y+3	; 0x03
    3996:	9c 81       	ldd	r25, Y+4	; 0x04
    3998:	01 97       	sbiw	r24, 0x01	; 1
    399a:	f1 f7       	brne	.-4      	; 0x3998 <CLCD_voidCursorOff+0xba>
    399c:	9c 83       	std	Y+4, r25	; 0x04
    399e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a0:	8d 81       	ldd	r24, Y+5	; 0x05
    39a2:	9e 81       	ldd	r25, Y+6	; 0x06
    39a4:	01 97       	sbiw	r24, 0x01	; 1
    39a6:	9e 83       	std	Y+6, r25	; 0x06
    39a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39aa:	8d 81       	ldd	r24, Y+5	; 0x05
    39ac:	9e 81       	ldd	r25, Y+6	; 0x06
    39ae:	00 97       	sbiw	r24, 0x00	; 0
    39b0:	69 f7       	brne	.-38     	; 0x398c <CLCD_voidCursorOff+0xae>
    39b2:	14 c0       	rjmp	.+40     	; 0x39dc <CLCD_voidCursorOff+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b4:	6f 81       	ldd	r22, Y+7	; 0x07
    39b6:	78 85       	ldd	r23, Y+8	; 0x08
    39b8:	89 85       	ldd	r24, Y+9	; 0x09
    39ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    39bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	9e 83       	std	Y+6, r25	; 0x06
    39c6:	8d 83       	std	Y+5, r24	; 0x05
    39c8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ca:	9e 81       	ldd	r25, Y+6	; 0x06
    39cc:	9a 83       	std	Y+2, r25	; 0x02
    39ce:	89 83       	std	Y+1, r24	; 0x01
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	9a 81       	ldd	r25, Y+2	; 0x02
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	f1 f7       	brne	.-4      	; 0x39d4 <CLCD_voidCursorOff+0xf6>
    39d8:	9a 83       	std	Y+2, r25	; 0x02
    39da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    39dc:	2e 96       	adiw	r28, 0x0e	; 14
    39de:	0f b6       	in	r0, 0x3f	; 63
    39e0:	f8 94       	cli
    39e2:	de bf       	out	0x3e, r29	; 62
    39e4:	0f be       	out	0x3f, r0	; 63
    39e6:	cd bf       	out	0x3d, r28	; 61
    39e8:	cf 91       	pop	r28
    39ea:	df 91       	pop	r29
    39ec:	08 95       	ret

000039ee <CLCD_voidCursorOn>:

void CLCD_voidCursorOn(void)
{
    39ee:	df 93       	push	r29
    39f0:	cf 93       	push	r28
    39f2:	cd b7       	in	r28, 0x3d	; 61
    39f4:	de b7       	in	r29, 0x3e	; 62
    39f6:	2e 97       	sbiw	r28, 0x0e	; 14
    39f8:	0f b6       	in	r0, 0x3f	; 63
    39fa:	f8 94       	cli
    39fc:	de bf       	out	0x3e, r29	; 62
    39fe:	0f be       	out	0x3f, r0	; 63
    3a00:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(CLCD_DISPON_CURSON);
    3a02:	8e e0       	ldi	r24, 0x0E	; 14
    3a04:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <CLCD_voidSendCommand>
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	a0 e0       	ldi	r26, 0x00	; 0
    3a0e:	b0 e4       	ldi	r27, 0x40	; 64
    3a10:	8b 87       	std	Y+11, r24	; 0x0b
    3a12:	9c 87       	std	Y+12, r25	; 0x0c
    3a14:	ad 87       	std	Y+13, r26	; 0x0d
    3a16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	4a ef       	ldi	r20, 0xFA	; 250
    3a26:	54 e4       	ldi	r21, 0x44	; 68
    3a28:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	cb 01       	movw	r24, r22
    3a30:	8f 83       	std	Y+7, r24	; 0x07
    3a32:	98 87       	std	Y+8, r25	; 0x08
    3a34:	a9 87       	std	Y+9, r26	; 0x09
    3a36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a38:	6f 81       	ldd	r22, Y+7	; 0x07
    3a3a:	78 85       	ldd	r23, Y+8	; 0x08
    3a3c:	89 85       	ldd	r24, Y+9	; 0x09
    3a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	40 e8       	ldi	r20, 0x80	; 128
    3a46:	5f e3       	ldi	r21, 0x3F	; 63
    3a48:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    3a4c:	88 23       	and	r24, r24
    3a4e:	2c f4       	brge	.+10     	; 0x3a5a <CLCD_voidCursorOn+0x6c>
		__ticks = 1;
    3a50:	81 e0       	ldi	r24, 0x01	; 1
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	9e 83       	std	Y+6, r25	; 0x06
    3a56:	8d 83       	std	Y+5, r24	; 0x05
    3a58:	3f c0       	rjmp	.+126    	; 0x3ad8 <CLCD_voidCursorOn+0xea>
	else if (__tmp > 65535)
    3a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a5c:	78 85       	ldd	r23, Y+8	; 0x08
    3a5e:	89 85       	ldd	r24, Y+9	; 0x09
    3a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	3f ef       	ldi	r19, 0xFF	; 255
    3a66:	4f e7       	ldi	r20, 0x7F	; 127
    3a68:	57 e4       	ldi	r21, 0x47	; 71
    3a6a:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    3a6e:	18 16       	cp	r1, r24
    3a70:	4c f5       	brge	.+82     	; 0x3ac4 <CLCD_voidCursorOn+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a7a:	20 e0       	ldi	r18, 0x00	; 0
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	40 e2       	ldi	r20, 0x20	; 32
    3a80:	51 e4       	ldi	r21, 0x41	; 65
    3a82:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3a86:	dc 01       	movw	r26, r24
    3a88:	cb 01       	movw	r24, r22
    3a8a:	bc 01       	movw	r22, r24
    3a8c:	cd 01       	movw	r24, r26
    3a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a92:	dc 01       	movw	r26, r24
    3a94:	cb 01       	movw	r24, r22
    3a96:	9e 83       	std	Y+6, r25	; 0x06
    3a98:	8d 83       	std	Y+5, r24	; 0x05
    3a9a:	0f c0       	rjmp	.+30     	; 0x3aba <CLCD_voidCursorOn+0xcc>
    3a9c:	88 ec       	ldi	r24, 0xC8	; 200
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	9c 83       	std	Y+4, r25	; 0x04
    3aa2:	8b 83       	std	Y+3, r24	; 0x03
    3aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa8:	01 97       	sbiw	r24, 0x01	; 1
    3aaa:	f1 f7       	brne	.-4      	; 0x3aa8 <CLCD_voidCursorOn+0xba>
    3aac:	9c 83       	std	Y+4, r25	; 0x04
    3aae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab4:	01 97       	sbiw	r24, 0x01	; 1
    3ab6:	9e 83       	std	Y+6, r25	; 0x06
    3ab8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aba:	8d 81       	ldd	r24, Y+5	; 0x05
    3abc:	9e 81       	ldd	r25, Y+6	; 0x06
    3abe:	00 97       	sbiw	r24, 0x00	; 0
    3ac0:	69 f7       	brne	.-38     	; 0x3a9c <CLCD_voidCursorOn+0xae>
    3ac2:	14 c0       	rjmp	.+40     	; 0x3aec <CLCD_voidCursorOn+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac6:	78 85       	ldd	r23, Y+8	; 0x08
    3ac8:	89 85       	ldd	r24, Y+9	; 0x09
    3aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    3acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad0:	dc 01       	movw	r26, r24
    3ad2:	cb 01       	movw	r24, r22
    3ad4:	9e 83       	std	Y+6, r25	; 0x06
    3ad6:	8d 83       	std	Y+5, r24	; 0x05
    3ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    3ada:	9e 81       	ldd	r25, Y+6	; 0x06
    3adc:	9a 83       	std	Y+2, r25	; 0x02
    3ade:	89 83       	std	Y+1, r24	; 0x01
    3ae0:	89 81       	ldd	r24, Y+1	; 0x01
    3ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae4:	01 97       	sbiw	r24, 0x01	; 1
    3ae6:	f1 f7       	brne	.-4      	; 0x3ae4 <CLCD_voidCursorOn+0xf6>
    3ae8:	9a 83       	std	Y+2, r25	; 0x02
    3aea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3aec:	2e 96       	adiw	r28, 0x0e	; 14
    3aee:	0f b6       	in	r0, 0x3f	; 63
    3af0:	f8 94       	cli
    3af2:	de bf       	out	0x3e, r29	; 62
    3af4:	0f be       	out	0x3f, r0	; 63
    3af6:	cd bf       	out	0x3d, r28	; 61
    3af8:	cf 91       	pop	r28
    3afa:	df 91       	pop	r29
    3afc:	08 95       	ret

00003afe <CLCD_voidCursorBlink>:


void CLCD_voidCursorBlink(void)
{
    3afe:	df 93       	push	r29
    3b00:	cf 93       	push	r28
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
    3b06:	2e 97       	sbiw	r28, 0x0e	; 14
    3b08:	0f b6       	in	r0, 0x3f	; 63
    3b0a:	f8 94       	cli
    3b0c:	de bf       	out	0x3e, r29	; 62
    3b0e:	0f be       	out	0x3f, r0	; 63
    3b10:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(CLCD_DISPON_CURSBLINK);
    3b12:	8f e0       	ldi	r24, 0x0F	; 15
    3b14:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <CLCD_voidSendCommand>
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	a0 e0       	ldi	r26, 0x00	; 0
    3b1e:	b0 e4       	ldi	r27, 0x40	; 64
    3b20:	8b 87       	std	Y+11, r24	; 0x0b
    3b22:	9c 87       	std	Y+12, r25	; 0x0c
    3b24:	ad 87       	std	Y+13, r26	; 0x0d
    3b26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	4a ef       	ldi	r20, 0xFA	; 250
    3b36:	54 e4       	ldi	r21, 0x44	; 68
    3b38:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	8f 83       	std	Y+7, r24	; 0x07
    3b42:	98 87       	std	Y+8, r25	; 0x08
    3b44:	a9 87       	std	Y+9, r26	; 0x09
    3b46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b48:	6f 81       	ldd	r22, Y+7	; 0x07
    3b4a:	78 85       	ldd	r23, Y+8	; 0x08
    3b4c:	89 85       	ldd	r24, Y+9	; 0x09
    3b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	40 e8       	ldi	r20, 0x80	; 128
    3b56:	5f e3       	ldi	r21, 0x3F	; 63
    3b58:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    3b5c:	88 23       	and	r24, r24
    3b5e:	2c f4       	brge	.+10     	; 0x3b6a <CLCD_voidCursorBlink+0x6c>
		__ticks = 1;
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	9e 83       	std	Y+6, r25	; 0x06
    3b66:	8d 83       	std	Y+5, r24	; 0x05
    3b68:	3f c0       	rjmp	.+126    	; 0x3be8 <CLCD_voidCursorBlink+0xea>
	else if (__tmp > 65535)
    3b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b6c:	78 85       	ldd	r23, Y+8	; 0x08
    3b6e:	89 85       	ldd	r24, Y+9	; 0x09
    3b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b72:	20 e0       	ldi	r18, 0x00	; 0
    3b74:	3f ef       	ldi	r19, 0xFF	; 255
    3b76:	4f e7       	ldi	r20, 0x7F	; 127
    3b78:	57 e4       	ldi	r21, 0x47	; 71
    3b7a:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    3b7e:	18 16       	cp	r1, r24
    3b80:	4c f5       	brge	.+82     	; 0x3bd4 <CLCD_voidCursorBlink+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b82:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b84:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b88:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b8a:	20 e0       	ldi	r18, 0x00	; 0
    3b8c:	30 e0       	ldi	r19, 0x00	; 0
    3b8e:	40 e2       	ldi	r20, 0x20	; 32
    3b90:	51 e4       	ldi	r21, 0x41	; 65
    3b92:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3b96:	dc 01       	movw	r26, r24
    3b98:	cb 01       	movw	r24, r22
    3b9a:	bc 01       	movw	r22, r24
    3b9c:	cd 01       	movw	r24, r26
    3b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	9e 83       	std	Y+6, r25	; 0x06
    3ba8:	8d 83       	std	Y+5, r24	; 0x05
    3baa:	0f c0       	rjmp	.+30     	; 0x3bca <CLCD_voidCursorBlink+0xcc>
    3bac:	88 ec       	ldi	r24, 0xC8	; 200
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	9c 83       	std	Y+4, r25	; 0x04
    3bb2:	8b 83       	std	Y+3, r24	; 0x03
    3bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    3bb8:	01 97       	sbiw	r24, 0x01	; 1
    3bba:	f1 f7       	brne	.-4      	; 0x3bb8 <CLCD_voidCursorBlink+0xba>
    3bbc:	9c 83       	std	Y+4, r25	; 0x04
    3bbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc4:	01 97       	sbiw	r24, 0x01	; 1
    3bc6:	9e 83       	std	Y+6, r25	; 0x06
    3bc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bca:	8d 81       	ldd	r24, Y+5	; 0x05
    3bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bce:	00 97       	sbiw	r24, 0x00	; 0
    3bd0:	69 f7       	brne	.-38     	; 0x3bac <CLCD_voidCursorBlink+0xae>
    3bd2:	14 c0       	rjmp	.+40     	; 0x3bfc <CLCD_voidCursorBlink+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    3bd6:	78 85       	ldd	r23, Y+8	; 0x08
    3bd8:	89 85       	ldd	r24, Y+9	; 0x09
    3bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	9e 83       	std	Y+6, r25	; 0x06
    3be6:	8d 83       	std	Y+5, r24	; 0x05
    3be8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bea:	9e 81       	ldd	r25, Y+6	; 0x06
    3bec:	9a 83       	std	Y+2, r25	; 0x02
    3bee:	89 83       	std	Y+1, r24	; 0x01
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
    3bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf4:	01 97       	sbiw	r24, 0x01	; 1
    3bf6:	f1 f7       	brne	.-4      	; 0x3bf4 <CLCD_voidCursorBlink+0xf6>
    3bf8:	9a 83       	std	Y+2, r25	; 0x02
    3bfa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3bfc:	2e 96       	adiw	r28, 0x0e	; 14
    3bfe:	0f b6       	in	r0, 0x3f	; 63
    3c00:	f8 94       	cli
    3c02:	de bf       	out	0x3e, r29	; 62
    3c04:	0f be       	out	0x3f, r0	; 63
    3c06:	cd bf       	out	0x3d, r28	; 61
    3c08:	cf 91       	pop	r28
    3c0a:	df 91       	pop	r29
    3c0c:	08 95       	ret

00003c0e <CLCD_voidSendPuls>:


void CLCD_voidSendPuls(void)
{
    3c0e:	df 93       	push	r29
    3c10:	cf 93       	push	r28
    3c12:	cd b7       	in	r28, 0x3d	; 61
    3c14:	de b7       	in	r29, 0x3e	; 62
    3c16:	6c 97       	sbiw	r28, 0x1c	; 28
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	f8 94       	cli
    3c1c:	de bf       	out	0x3e, r29	; 62
    3c1e:	0f be       	out	0x3f, r0	; 63
    3c20:	cd bf       	out	0x3d, r28	; 61
	/*FallingEdge*/
	DIO_enumSetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    3c22:	81 e0       	ldi	r24, 0x01	; 1
    3c24:	62 e0       	ldi	r22, 0x02	; 2
    3c26:	41 e0       	ldi	r20, 0x01	; 1
    3c28:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	a0 e0       	ldi	r26, 0x00	; 0
    3c32:	b0 e4       	ldi	r27, 0x40	; 64
    3c34:	89 8f       	std	Y+25, r24	; 0x19
    3c36:	9a 8f       	std	Y+26, r25	; 0x1a
    3c38:	ab 8f       	std	Y+27, r26	; 0x1b
    3c3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c3c:	69 8d       	ldd	r22, Y+25	; 0x19
    3c3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	4a ef       	ldi	r20, 0xFA	; 250
    3c4a:	54 e4       	ldi	r21, 0x44	; 68
    3c4c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	8d 8b       	std	Y+21, r24	; 0x15
    3c56:	9e 8b       	std	Y+22, r25	; 0x16
    3c58:	af 8b       	std	Y+23, r26	; 0x17
    3c5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c5c:	6d 89       	ldd	r22, Y+21	; 0x15
    3c5e:	7e 89       	ldd	r23, Y+22	; 0x16
    3c60:	8f 89       	ldd	r24, Y+23	; 0x17
    3c62:	98 8d       	ldd	r25, Y+24	; 0x18
    3c64:	20 e0       	ldi	r18, 0x00	; 0
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	40 e8       	ldi	r20, 0x80	; 128
    3c6a:	5f e3       	ldi	r21, 0x3F	; 63
    3c6c:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    3c70:	88 23       	and	r24, r24
    3c72:	2c f4       	brge	.+10     	; 0x3c7e <CLCD_voidSendPuls+0x70>
		__ticks = 1;
    3c74:	81 e0       	ldi	r24, 0x01	; 1
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	9c 8b       	std	Y+20, r25	; 0x14
    3c7a:	8b 8b       	std	Y+19, r24	; 0x13
    3c7c:	3f c0       	rjmp	.+126    	; 0x3cfc <CLCD_voidSendPuls+0xee>
	else if (__tmp > 65535)
    3c7e:	6d 89       	ldd	r22, Y+21	; 0x15
    3c80:	7e 89       	ldd	r23, Y+22	; 0x16
    3c82:	8f 89       	ldd	r24, Y+23	; 0x17
    3c84:	98 8d       	ldd	r25, Y+24	; 0x18
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	3f ef       	ldi	r19, 0xFF	; 255
    3c8a:	4f e7       	ldi	r20, 0x7F	; 127
    3c8c:	57 e4       	ldi	r21, 0x47	; 71
    3c8e:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    3c92:	18 16       	cp	r1, r24
    3c94:	4c f5       	brge	.+82     	; 0x3ce8 <CLCD_voidSendPuls+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c96:	69 8d       	ldd	r22, Y+25	; 0x19
    3c98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	40 e2       	ldi	r20, 0x20	; 32
    3ca4:	51 e4       	ldi	r21, 0x41	; 65
    3ca6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	bc 01       	movw	r22, r24
    3cb0:	cd 01       	movw	r24, r26
    3cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb6:	dc 01       	movw	r26, r24
    3cb8:	cb 01       	movw	r24, r22
    3cba:	9c 8b       	std	Y+20, r25	; 0x14
    3cbc:	8b 8b       	std	Y+19, r24	; 0x13
    3cbe:	0f c0       	rjmp	.+30     	; 0x3cde <CLCD_voidSendPuls+0xd0>
    3cc0:	88 ec       	ldi	r24, 0xC8	; 200
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	9a 8b       	std	Y+18, r25	; 0x12
    3cc6:	89 8b       	std	Y+17, r24	; 0x11
    3cc8:	89 89       	ldd	r24, Y+17	; 0x11
    3cca:	9a 89       	ldd	r25, Y+18	; 0x12
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	f1 f7       	brne	.-4      	; 0x3ccc <CLCD_voidSendPuls+0xbe>
    3cd0:	9a 8b       	std	Y+18, r25	; 0x12
    3cd2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd4:	8b 89       	ldd	r24, Y+19	; 0x13
    3cd6:	9c 89       	ldd	r25, Y+20	; 0x14
    3cd8:	01 97       	sbiw	r24, 0x01	; 1
    3cda:	9c 8b       	std	Y+20, r25	; 0x14
    3cdc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cde:	8b 89       	ldd	r24, Y+19	; 0x13
    3ce0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ce2:	00 97       	sbiw	r24, 0x00	; 0
    3ce4:	69 f7       	brne	.-38     	; 0x3cc0 <CLCD_voidSendPuls+0xb2>
    3ce6:	14 c0       	rjmp	.+40     	; 0x3d10 <CLCD_voidSendPuls+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce8:	6d 89       	ldd	r22, Y+21	; 0x15
    3cea:	7e 89       	ldd	r23, Y+22	; 0x16
    3cec:	8f 89       	ldd	r24, Y+23	; 0x17
    3cee:	98 8d       	ldd	r25, Y+24	; 0x18
    3cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	9c 8b       	std	Y+20, r25	; 0x14
    3cfa:	8b 8b       	std	Y+19, r24	; 0x13
    3cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    3cfe:	9c 89       	ldd	r25, Y+20	; 0x14
    3d00:	98 8b       	std	Y+16, r25	; 0x10
    3d02:	8f 87       	std	Y+15, r24	; 0x0f
    3d04:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d06:	98 89       	ldd	r25, Y+16	; 0x10
    3d08:	01 97       	sbiw	r24, 0x01	; 1
    3d0a:	f1 f7       	brne	.-4      	; 0x3d08 <CLCD_voidSendPuls+0xfa>
    3d0c:	98 8b       	std	Y+16, r25	; 0x10
    3d0e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_enumSetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	62 e0       	ldi	r22, 0x02	; 2
    3d14:	40 e0       	ldi	r20, 0x00	; 0
    3d16:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	a0 e0       	ldi	r26, 0x00	; 0
    3d20:	b0 e4       	ldi	r27, 0x40	; 64
    3d22:	8b 87       	std	Y+11, r24	; 0x0b
    3d24:	9c 87       	std	Y+12, r25	; 0x0c
    3d26:	ad 87       	std	Y+13, r26	; 0x0d
    3d28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d32:	20 e0       	ldi	r18, 0x00	; 0
    3d34:	30 e0       	ldi	r19, 0x00	; 0
    3d36:	4a ef       	ldi	r20, 0xFA	; 250
    3d38:	54 e4       	ldi	r21, 0x44	; 68
    3d3a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	8f 83       	std	Y+7, r24	; 0x07
    3d44:	98 87       	std	Y+8, r25	; 0x08
    3d46:	a9 87       	std	Y+9, r26	; 0x09
    3d48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d4c:	78 85       	ldd	r23, Y+8	; 0x08
    3d4e:	89 85       	ldd	r24, Y+9	; 0x09
    3d50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	40 e8       	ldi	r20, 0x80	; 128
    3d58:	5f e3       	ldi	r21, 0x3F	; 63
    3d5a:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    3d5e:	88 23       	and	r24, r24
    3d60:	2c f4       	brge	.+10     	; 0x3d6c <CLCD_voidSendPuls+0x15e>
		__ticks = 1;
    3d62:	81 e0       	ldi	r24, 0x01	; 1
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	9e 83       	std	Y+6, r25	; 0x06
    3d68:	8d 83       	std	Y+5, r24	; 0x05
    3d6a:	3f c0       	rjmp	.+126    	; 0x3dea <CLCD_voidSendPuls+0x1dc>
	else if (__tmp > 65535)
    3d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d6e:	78 85       	ldd	r23, Y+8	; 0x08
    3d70:	89 85       	ldd	r24, Y+9	; 0x09
    3d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	3f ef       	ldi	r19, 0xFF	; 255
    3d78:	4f e7       	ldi	r20, 0x7F	; 127
    3d7a:	57 e4       	ldi	r21, 0x47	; 71
    3d7c:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    3d80:	18 16       	cp	r1, r24
    3d82:	4c f5       	brge	.+82     	; 0x3dd6 <CLCD_voidSendPuls+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	40 e2       	ldi	r20, 0x20	; 32
    3d92:	51 e4       	ldi	r21, 0x41	; 65
    3d94:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3d98:	dc 01       	movw	r26, r24
    3d9a:	cb 01       	movw	r24, r22
    3d9c:	bc 01       	movw	r22, r24
    3d9e:	cd 01       	movw	r24, r26
    3da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	9e 83       	std	Y+6, r25	; 0x06
    3daa:	8d 83       	std	Y+5, r24	; 0x05
    3dac:	0f c0       	rjmp	.+30     	; 0x3dcc <CLCD_voidSendPuls+0x1be>
    3dae:	88 ec       	ldi	r24, 0xC8	; 200
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	9c 83       	std	Y+4, r25	; 0x04
    3db4:	8b 83       	std	Y+3, r24	; 0x03
    3db6:	8b 81       	ldd	r24, Y+3	; 0x03
    3db8:	9c 81       	ldd	r25, Y+4	; 0x04
    3dba:	01 97       	sbiw	r24, 0x01	; 1
    3dbc:	f1 f7       	brne	.-4      	; 0x3dba <CLCD_voidSendPuls+0x1ac>
    3dbe:	9c 83       	std	Y+4, r25	; 0x04
    3dc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc6:	01 97       	sbiw	r24, 0x01	; 1
    3dc8:	9e 83       	std	Y+6, r25	; 0x06
    3dca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dce:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd0:	00 97       	sbiw	r24, 0x00	; 0
    3dd2:	69 f7       	brne	.-38     	; 0x3dae <CLCD_voidSendPuls+0x1a0>
    3dd4:	14 c0       	rjmp	.+40     	; 0x3dfe <CLCD_voidSendPuls+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dd6:	6f 81       	ldd	r22, Y+7	; 0x07
    3dd8:	78 85       	ldd	r23, Y+8	; 0x08
    3dda:	89 85       	ldd	r24, Y+9	; 0x09
    3ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de2:	dc 01       	movw	r26, r24
    3de4:	cb 01       	movw	r24, r22
    3de6:	9e 83       	std	Y+6, r25	; 0x06
    3de8:	8d 83       	std	Y+5, r24	; 0x05
    3dea:	8d 81       	ldd	r24, Y+5	; 0x05
    3dec:	9e 81       	ldd	r25, Y+6	; 0x06
    3dee:	9a 83       	std	Y+2, r25	; 0x02
    3df0:	89 83       	std	Y+1, r24	; 0x01
    3df2:	89 81       	ldd	r24, Y+1	; 0x01
    3df4:	9a 81       	ldd	r25, Y+2	; 0x02
    3df6:	01 97       	sbiw	r24, 0x01	; 1
    3df8:	f1 f7       	brne	.-4      	; 0x3df6 <CLCD_voidSendPuls+0x1e8>
    3dfa:	9a 83       	std	Y+2, r25	; 0x02
    3dfc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3dfe:	6c 96       	adiw	r28, 0x1c	; 28
    3e00:	0f b6       	in	r0, 0x3f	; 63
    3e02:	f8 94       	cli
    3e04:	de bf       	out	0x3e, r29	; 62
    3e06:	0f be       	out	0x3f, r0	; 63
    3e08:	cd bf       	out	0x3d, r28	; 61
    3e0a:	cf 91       	pop	r28
    3e0c:	df 91       	pop	r29
    3e0e:	08 95       	ret

00003e10 <DCMOTOR_voidInit>:

#include "DIO_interface.h"
#include "DC_Motor_interface.h"

void DCMOTOR_voidInit(DCMOTOR_CONFIG *DC_MOTOR_structConfig)
{
    3e10:	df 93       	push	r29
    3e12:	cf 93       	push	r28
    3e14:	00 d0       	rcall	.+0      	; 0x3e16 <DCMOTOR_voidInit+0x6>
    3e16:	cd b7       	in	r28, 0x3d	; 61
    3e18:	de b7       	in	r29, 0x3e	; 62
    3e1a:	9a 83       	std	Y+2, r25	; 0x02
    3e1c:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinDirection(DC_MOTOR_structConfig->DcMotorPort,DC_MOTOR_structConfig->DcMotorPinA,DCMOTOR_PIN_OUTPUT);
    3e1e:	e9 81       	ldd	r30, Y+1	; 0x01
    3e20:	fa 81       	ldd	r31, Y+2	; 0x02
    3e22:	80 81       	ld	r24, Z
    3e24:	e9 81       	ldd	r30, Y+1	; 0x01
    3e26:	fa 81       	ldd	r31, Y+2	; 0x02
    3e28:	91 81       	ldd	r25, Z+1	; 0x01
    3e2a:	69 2f       	mov	r22, r25
    3e2c:	41 e0       	ldi	r20, 0x01	; 1
    3e2e:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(DC_MOTOR_structConfig->DcMotorPort,DC_MOTOR_structConfig->DcMotorPinB,DCMOTOR_PIN_OUTPUT);
    3e32:	e9 81       	ldd	r30, Y+1	; 0x01
    3e34:	fa 81       	ldd	r31, Y+2	; 0x02
    3e36:	80 81       	ld	r24, Z
    3e38:	e9 81       	ldd	r30, Y+1	; 0x01
    3e3a:	fa 81       	ldd	r31, Y+2	; 0x02
    3e3c:	92 81       	ldd	r25, Z+2	; 0x02
    3e3e:	69 2f       	mov	r22, r25
    3e40:	41 e0       	ldi	r20, 0x01	; 1
    3e42:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
}
    3e46:	0f 90       	pop	r0
    3e48:	0f 90       	pop	r0
    3e4a:	cf 91       	pop	r28
    3e4c:	df 91       	pop	r29
    3e4e:	08 95       	ret

00003e50 <DCMOTOR_uint8ControlDirection>:

u8 DCMOTOR_uint8ControlDirection (DCMOTOR_CONFIG *DC_MOTOR_structConfig ,u8 Copy_u8Direction)
{
    3e50:	df 93       	push	r29
    3e52:	cf 93       	push	r28
    3e54:	00 d0       	rcall	.+0      	; 0x3e56 <DCMOTOR_uint8ControlDirection+0x6>
    3e56:	00 d0       	rcall	.+0      	; 0x3e58 <DCMOTOR_uint8ControlDirection+0x8>
    3e58:	00 d0       	rcall	.+0      	; 0x3e5a <DCMOTOR_uint8ControlDirection+0xa>
    3e5a:	cd b7       	in	r28, 0x3d	; 61
    3e5c:	de b7       	in	r29, 0x3e	; 62
    3e5e:	9b 83       	std	Y+3, r25	; 0x03
    3e60:	8a 83       	std	Y+2, r24	; 0x02
    3e62:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ReturnError = STD_TYPES_OK;
    3e64:	81 e0       	ldi	r24, 0x01	; 1
    3e66:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Direction)
    3e68:	8c 81       	ldd	r24, Y+4	; 0x04
    3e6a:	28 2f       	mov	r18, r24
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	3e 83       	std	Y+6, r19	; 0x06
    3e70:	2d 83       	std	Y+5, r18	; 0x05
    3e72:	8d 81       	ldd	r24, Y+5	; 0x05
    3e74:	9e 81       	ldd	r25, Y+6	; 0x06
    3e76:	81 30       	cpi	r24, 0x01	; 1
    3e78:	91 05       	cpc	r25, r1
    3e7a:	f9 f0       	breq	.+62     	; 0x3eba <DCMOTOR_uint8ControlDirection+0x6a>
    3e7c:	2d 81       	ldd	r18, Y+5	; 0x05
    3e7e:	3e 81       	ldd	r19, Y+6	; 0x06
    3e80:	22 30       	cpi	r18, 0x02	; 2
    3e82:	31 05       	cpc	r19, r1
    3e84:	79 f1       	breq	.+94     	; 0x3ee4 <DCMOTOR_uint8ControlDirection+0x94>
    3e86:	8d 81       	ldd	r24, Y+5	; 0x05
    3e88:	9e 81       	ldd	r25, Y+6	; 0x06
    3e8a:	00 97       	sbiw	r24, 0x00	; 0
    3e8c:	09 f0       	breq	.+2      	; 0x3e90 <DCMOTOR_uint8ControlDirection+0x40>
    3e8e:	3f c0       	rjmp	.+126    	; 0x3f0e <DCMOTOR_uint8ControlDirection+0xbe>
	{
	case DCMOTOR_CW :
	{
		/*Set the clockwise direction and start Pin is low to avoid the short circuit*/
		DIO_enumSetPinValue(DC_MOTOR_structConfig->DcMotorPort,DC_MOTOR_structConfig->DcMotorPinA,DCMOTOR_PIN_LOW);
    3e90:	ea 81       	ldd	r30, Y+2	; 0x02
    3e92:	fb 81       	ldd	r31, Y+3	; 0x03
    3e94:	80 81       	ld	r24, Z
    3e96:	ea 81       	ldd	r30, Y+2	; 0x02
    3e98:	fb 81       	ldd	r31, Y+3	; 0x03
    3e9a:	91 81       	ldd	r25, Z+1	; 0x01
    3e9c:	69 2f       	mov	r22, r25
    3e9e:	40 e0       	ldi	r20, 0x00	; 0
    3ea0:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
		DIO_enumSetPinValue(DC_MOTOR_structConfig->DcMotorPort,DC_MOTOR_structConfig->DcMotorPinB,DCMOTOR_PIN_HIGH);
    3ea4:	ea 81       	ldd	r30, Y+2	; 0x02
    3ea6:	fb 81       	ldd	r31, Y+3	; 0x03
    3ea8:	80 81       	ld	r24, Z
    3eaa:	ea 81       	ldd	r30, Y+2	; 0x02
    3eac:	fb 81       	ldd	r31, Y+3	; 0x03
    3eae:	92 81       	ldd	r25, Z+2	; 0x02
    3eb0:	69 2f       	mov	r22, r25
    3eb2:	41 e0       	ldi	r20, 0x01	; 1
    3eb4:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
    3eb8:	2b c0       	rjmp	.+86     	; 0x3f10 <DCMOTOR_uint8ControlDirection+0xc0>
		break;
	}
	case DCMOTOR_CCW :
	{
		/*Set the counter clockwise direction and start Pin is low to avoid the short circuit*/
		DIO_enumSetPinValue(DC_MOTOR_structConfig->DcMotorPort,DC_MOTOR_structConfig->DcMotorPinB,DCMOTOR_PIN_LOW);
    3eba:	ea 81       	ldd	r30, Y+2	; 0x02
    3ebc:	fb 81       	ldd	r31, Y+3	; 0x03
    3ebe:	80 81       	ld	r24, Z
    3ec0:	ea 81       	ldd	r30, Y+2	; 0x02
    3ec2:	fb 81       	ldd	r31, Y+3	; 0x03
    3ec4:	92 81       	ldd	r25, Z+2	; 0x02
    3ec6:	69 2f       	mov	r22, r25
    3ec8:	40 e0       	ldi	r20, 0x00	; 0
    3eca:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
		DIO_enumSetPinValue(DC_MOTOR_structConfig->DcMotorPort,DC_MOTOR_structConfig->DcMotorPinA,DCMOTOR_PIN_HIGH);
    3ece:	ea 81       	ldd	r30, Y+2	; 0x02
    3ed0:	fb 81       	ldd	r31, Y+3	; 0x03
    3ed2:	80 81       	ld	r24, Z
    3ed4:	ea 81       	ldd	r30, Y+2	; 0x02
    3ed6:	fb 81       	ldd	r31, Y+3	; 0x03
    3ed8:	91 81       	ldd	r25, Z+1	; 0x01
    3eda:	69 2f       	mov	r22, r25
    3edc:	41 e0       	ldi	r20, 0x01	; 1
    3ede:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
    3ee2:	16 c0       	rjmp	.+44     	; 0x3f10 <DCMOTOR_uint8ControlDirection+0xc0>
		break;
	}
	case DCMOTOR_STOP :
	{
		/*to stop the motor (break circuit)*/
		DIO_enumSetPinValue(DC_MOTOR_structConfig->DcMotorPort,DC_MOTOR_structConfig->DcMotorPinB,DCMOTOR_PIN_LOW);
    3ee4:	ea 81       	ldd	r30, Y+2	; 0x02
    3ee6:	fb 81       	ldd	r31, Y+3	; 0x03
    3ee8:	80 81       	ld	r24, Z
    3eea:	ea 81       	ldd	r30, Y+2	; 0x02
    3eec:	fb 81       	ldd	r31, Y+3	; 0x03
    3eee:	92 81       	ldd	r25, Z+2	; 0x02
    3ef0:	69 2f       	mov	r22, r25
    3ef2:	40 e0       	ldi	r20, 0x00	; 0
    3ef4:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
		DIO_enumSetPinValue(DC_MOTOR_structConfig->DcMotorPort,DC_MOTOR_structConfig->DcMotorPinA,DCMOTOR_PIN_LOW);
    3ef8:	ea 81       	ldd	r30, Y+2	; 0x02
    3efa:	fb 81       	ldd	r31, Y+3	; 0x03
    3efc:	80 81       	ld	r24, Z
    3efe:	ea 81       	ldd	r30, Y+2	; 0x02
    3f00:	fb 81       	ldd	r31, Y+3	; 0x03
    3f02:	91 81       	ldd	r25, Z+1	; 0x01
    3f04:	69 2f       	mov	r22, r25
    3f06:	40 e0       	ldi	r20, 0x00	; 0
    3f08:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
    3f0c:	01 c0       	rjmp	.+2      	; 0x3f10 <DCMOTOR_uint8ControlDirection+0xc0>
		break;
	}

	default : Local_u8ReturnError =STD_TYPES_NOK;
    3f0e:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ReturnError;
    3f10:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f12:	26 96       	adiw	r28, 0x06	; 6
    3f14:	0f b6       	in	r0, 0x3f	; 63
    3f16:	f8 94       	cli
    3f18:	de bf       	out	0x3e, r29	; 62
    3f1a:	0f be       	out	0x3f, r0	; 63
    3f1c:	cd bf       	out	0x3d, r28	; 61
    3f1e:	cf 91       	pop	r28
    3f20:	df 91       	pop	r29
    3f22:	08 95       	ret

00003f24 <DIO_enumSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_register.h"


DIO_ErrorStatus	DIO_enumSetPinDirection(u8 Copy_u8Port ,u8 Copy_u8Pin , u8 Copy_u8Direction )
{
    3f24:	df 93       	push	r29
    3f26:	cf 93       	push	r28
    3f28:	cd b7       	in	r28, 0x3d	; 61
    3f2a:	de b7       	in	r29, 0x3e	; 62
    3f2c:	28 97       	sbiw	r28, 0x08	; 8
    3f2e:	0f b6       	in	r0, 0x3f	; 63
    3f30:	f8 94       	cli
    3f32:	de bf       	out	0x3e, r29	; 62
    3f34:	0f be       	out	0x3f, r0	; 63
    3f36:	cd bf       	out	0x3d, r28	; 61
    3f38:	8a 83       	std	Y+2, r24	; 0x02
    3f3a:	6b 83       	std	Y+3, r22	; 0x03
    3f3c:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7 )
    3f42:	8a 81       	ldd	r24, Y+2	; 0x02
    3f44:	84 30       	cpi	r24, 0x04	; 4
    3f46:	08 f0       	brcs	.+2      	; 0x3f4a <DIO_enumSetPinDirection+0x26>
    3f48:	f1 c0       	rjmp	.+482    	; 0x412c <DIO_enumSetPinDirection+0x208>
    3f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4c:	88 30       	cpi	r24, 0x08	; 8
    3f4e:	08 f0       	brcs	.+2      	; 0x3f52 <DIO_enumSetPinDirection+0x2e>
    3f50:	ed c0       	rjmp	.+474    	; 0x412c <DIO_enumSetPinDirection+0x208>
	{
		if (Copy_u8Direction == DIO_OUTPUT)
    3f52:	8c 81       	ldd	r24, Y+4	; 0x04
    3f54:	81 30       	cpi	r24, 0x01	; 1
    3f56:	09 f0       	breq	.+2      	; 0x3f5a <DIO_enumSetPinDirection+0x36>
    3f58:	6f c0       	rjmp	.+222    	; 0x4038 <DIO_enumSetPinDirection+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    3f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5c:	28 2f       	mov	r18, r24
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	38 87       	std	Y+8, r19	; 0x08
    3f62:	2f 83       	std	Y+7, r18	; 0x07
    3f64:	8f 81       	ldd	r24, Y+7	; 0x07
    3f66:	98 85       	ldd	r25, Y+8	; 0x08
    3f68:	81 30       	cpi	r24, 0x01	; 1
    3f6a:	91 05       	cpc	r25, r1
    3f6c:	49 f1       	breq	.+82     	; 0x3fc0 <DIO_enumSetPinDirection+0x9c>
    3f6e:	2f 81       	ldd	r18, Y+7	; 0x07
    3f70:	38 85       	ldd	r19, Y+8	; 0x08
    3f72:	22 30       	cpi	r18, 0x02	; 2
    3f74:	31 05       	cpc	r19, r1
    3f76:	2c f4       	brge	.+10     	; 0x3f82 <DIO_enumSetPinDirection+0x5e>
    3f78:	8f 81       	ldd	r24, Y+7	; 0x07
    3f7a:	98 85       	ldd	r25, Y+8	; 0x08
    3f7c:	00 97       	sbiw	r24, 0x00	; 0
    3f7e:	61 f0       	breq	.+24     	; 0x3f98 <DIO_enumSetPinDirection+0x74>
    3f80:	d6 c0       	rjmp	.+428    	; 0x412e <DIO_enumSetPinDirection+0x20a>
    3f82:	2f 81       	ldd	r18, Y+7	; 0x07
    3f84:	38 85       	ldd	r19, Y+8	; 0x08
    3f86:	22 30       	cpi	r18, 0x02	; 2
    3f88:	31 05       	cpc	r19, r1
    3f8a:	71 f1       	breq	.+92     	; 0x3fe8 <DIO_enumSetPinDirection+0xc4>
    3f8c:	8f 81       	ldd	r24, Y+7	; 0x07
    3f8e:	98 85       	ldd	r25, Y+8	; 0x08
    3f90:	83 30       	cpi	r24, 0x03	; 3
    3f92:	91 05       	cpc	r25, r1
    3f94:	e9 f1       	breq	.+122    	; 0x4010 <DIO_enumSetPinDirection+0xec>
    3f96:	cb c0       	rjmp	.+406    	; 0x412e <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_REG,Copy_u8Pin); break ;
    3f98:	aa e3       	ldi	r26, 0x3A	; 58
    3f9a:	b0 e0       	ldi	r27, 0x00	; 0
    3f9c:	ea e3       	ldi	r30, 0x3A	; 58
    3f9e:	f0 e0       	ldi	r31, 0x00	; 0
    3fa0:	80 81       	ld	r24, Z
    3fa2:	48 2f       	mov	r20, r24
    3fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa6:	28 2f       	mov	r18, r24
    3fa8:	30 e0       	ldi	r19, 0x00	; 0
    3faa:	81 e0       	ldi	r24, 0x01	; 1
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	02 2e       	mov	r0, r18
    3fb0:	02 c0       	rjmp	.+4      	; 0x3fb6 <DIO_enumSetPinDirection+0x92>
    3fb2:	88 0f       	add	r24, r24
    3fb4:	99 1f       	adc	r25, r25
    3fb6:	0a 94       	dec	r0
    3fb8:	e2 f7       	brpl	.-8      	; 0x3fb2 <DIO_enumSetPinDirection+0x8e>
    3fba:	84 2b       	or	r24, r20
    3fbc:	8c 93       	st	X, r24
    3fbe:	b7 c0       	rjmp	.+366    	; 0x412e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_REG,Copy_u8Pin); break ;
    3fc0:	a7 e3       	ldi	r26, 0x37	; 55
    3fc2:	b0 e0       	ldi	r27, 0x00	; 0
    3fc4:	e7 e3       	ldi	r30, 0x37	; 55
    3fc6:	f0 e0       	ldi	r31, 0x00	; 0
    3fc8:	80 81       	ld	r24, Z
    3fca:	48 2f       	mov	r20, r24
    3fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fce:	28 2f       	mov	r18, r24
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	81 e0       	ldi	r24, 0x01	; 1
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	02 2e       	mov	r0, r18
    3fd8:	02 c0       	rjmp	.+4      	; 0x3fde <DIO_enumSetPinDirection+0xba>
    3fda:	88 0f       	add	r24, r24
    3fdc:	99 1f       	adc	r25, r25
    3fde:	0a 94       	dec	r0
    3fe0:	e2 f7       	brpl	.-8      	; 0x3fda <DIO_enumSetPinDirection+0xb6>
    3fe2:	84 2b       	or	r24, r20
    3fe4:	8c 93       	st	X, r24
    3fe6:	a3 c0       	rjmp	.+326    	; 0x412e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_REG,Copy_u8Pin); break ;
    3fe8:	a4 e3       	ldi	r26, 0x34	; 52
    3fea:	b0 e0       	ldi	r27, 0x00	; 0
    3fec:	e4 e3       	ldi	r30, 0x34	; 52
    3fee:	f0 e0       	ldi	r31, 0x00	; 0
    3ff0:	80 81       	ld	r24, Z
    3ff2:	48 2f       	mov	r20, r24
    3ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff6:	28 2f       	mov	r18, r24
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	81 e0       	ldi	r24, 0x01	; 1
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	02 2e       	mov	r0, r18
    4000:	02 c0       	rjmp	.+4      	; 0x4006 <DIO_enumSetPinDirection+0xe2>
    4002:	88 0f       	add	r24, r24
    4004:	99 1f       	adc	r25, r25
    4006:	0a 94       	dec	r0
    4008:	e2 f7       	brpl	.-8      	; 0x4002 <DIO_enumSetPinDirection+0xde>
    400a:	84 2b       	or	r24, r20
    400c:	8c 93       	st	X, r24
    400e:	8f c0       	rjmp	.+286    	; 0x412e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_REG,Copy_u8Pin); break ;
    4010:	a1 e3       	ldi	r26, 0x31	; 49
    4012:	b0 e0       	ldi	r27, 0x00	; 0
    4014:	e1 e3       	ldi	r30, 0x31	; 49
    4016:	f0 e0       	ldi	r31, 0x00	; 0
    4018:	80 81       	ld	r24, Z
    401a:	48 2f       	mov	r20, r24
    401c:	8b 81       	ldd	r24, Y+3	; 0x03
    401e:	28 2f       	mov	r18, r24
    4020:	30 e0       	ldi	r19, 0x00	; 0
    4022:	81 e0       	ldi	r24, 0x01	; 1
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	02 2e       	mov	r0, r18
    4028:	02 c0       	rjmp	.+4      	; 0x402e <DIO_enumSetPinDirection+0x10a>
    402a:	88 0f       	add	r24, r24
    402c:	99 1f       	adc	r25, r25
    402e:	0a 94       	dec	r0
    4030:	e2 f7       	brpl	.-8      	; 0x402a <DIO_enumSetPinDirection+0x106>
    4032:	84 2b       	or	r24, r20
    4034:	8c 93       	st	X, r24
    4036:	7b c0       	rjmp	.+246    	; 0x412e <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if (Copy_u8Direction == DIO_INPUT)
    4038:	8c 81       	ldd	r24, Y+4	; 0x04
    403a:	88 23       	and	r24, r24
    403c:	09 f0       	breq	.+2      	; 0x4040 <DIO_enumSetPinDirection+0x11c>
    403e:	74 c0       	rjmp	.+232    	; 0x4128 <DIO_enumSetPinDirection+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    4040:	8a 81       	ldd	r24, Y+2	; 0x02
    4042:	28 2f       	mov	r18, r24
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	3e 83       	std	Y+6, r19	; 0x06
    4048:	2d 83       	std	Y+5, r18	; 0x05
    404a:	8d 81       	ldd	r24, Y+5	; 0x05
    404c:	9e 81       	ldd	r25, Y+6	; 0x06
    404e:	81 30       	cpi	r24, 0x01	; 1
    4050:	91 05       	cpc	r25, r1
    4052:	59 f1       	breq	.+86     	; 0x40aa <DIO_enumSetPinDirection+0x186>
    4054:	2d 81       	ldd	r18, Y+5	; 0x05
    4056:	3e 81       	ldd	r19, Y+6	; 0x06
    4058:	22 30       	cpi	r18, 0x02	; 2
    405a:	31 05       	cpc	r19, r1
    405c:	2c f4       	brge	.+10     	; 0x4068 <DIO_enumSetPinDirection+0x144>
    405e:	8d 81       	ldd	r24, Y+5	; 0x05
    4060:	9e 81       	ldd	r25, Y+6	; 0x06
    4062:	00 97       	sbiw	r24, 0x00	; 0
    4064:	69 f0       	breq	.+26     	; 0x4080 <DIO_enumSetPinDirection+0x15c>
    4066:	63 c0       	rjmp	.+198    	; 0x412e <DIO_enumSetPinDirection+0x20a>
    4068:	2d 81       	ldd	r18, Y+5	; 0x05
    406a:	3e 81       	ldd	r19, Y+6	; 0x06
    406c:	22 30       	cpi	r18, 0x02	; 2
    406e:	31 05       	cpc	r19, r1
    4070:	89 f1       	breq	.+98     	; 0x40d4 <DIO_enumSetPinDirection+0x1b0>
    4072:	8d 81       	ldd	r24, Y+5	; 0x05
    4074:	9e 81       	ldd	r25, Y+6	; 0x06
    4076:	83 30       	cpi	r24, 0x03	; 3
    4078:	91 05       	cpc	r25, r1
    407a:	09 f4       	brne	.+2      	; 0x407e <DIO_enumSetPinDirection+0x15a>
    407c:	40 c0       	rjmp	.+128    	; 0x40fe <DIO_enumSetPinDirection+0x1da>
    407e:	57 c0       	rjmp	.+174    	; 0x412e <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_REG,Copy_u8Pin); break ;
    4080:	aa e3       	ldi	r26, 0x3A	; 58
    4082:	b0 e0       	ldi	r27, 0x00	; 0
    4084:	ea e3       	ldi	r30, 0x3A	; 58
    4086:	f0 e0       	ldi	r31, 0x00	; 0
    4088:	80 81       	ld	r24, Z
    408a:	48 2f       	mov	r20, r24
    408c:	8b 81       	ldd	r24, Y+3	; 0x03
    408e:	28 2f       	mov	r18, r24
    4090:	30 e0       	ldi	r19, 0x00	; 0
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	02 2e       	mov	r0, r18
    4098:	02 c0       	rjmp	.+4      	; 0x409e <DIO_enumSetPinDirection+0x17a>
    409a:	88 0f       	add	r24, r24
    409c:	99 1f       	adc	r25, r25
    409e:	0a 94       	dec	r0
    40a0:	e2 f7       	brpl	.-8      	; 0x409a <DIO_enumSetPinDirection+0x176>
    40a2:	80 95       	com	r24
    40a4:	84 23       	and	r24, r20
    40a6:	8c 93       	st	X, r24
    40a8:	42 c0       	rjmp	.+132    	; 0x412e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_REG,Copy_u8Pin); break ;
    40aa:	a7 e3       	ldi	r26, 0x37	; 55
    40ac:	b0 e0       	ldi	r27, 0x00	; 0
    40ae:	e7 e3       	ldi	r30, 0x37	; 55
    40b0:	f0 e0       	ldi	r31, 0x00	; 0
    40b2:	80 81       	ld	r24, Z
    40b4:	48 2f       	mov	r20, r24
    40b6:	8b 81       	ldd	r24, Y+3	; 0x03
    40b8:	28 2f       	mov	r18, r24
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	02 2e       	mov	r0, r18
    40c2:	02 c0       	rjmp	.+4      	; 0x40c8 <DIO_enumSetPinDirection+0x1a4>
    40c4:	88 0f       	add	r24, r24
    40c6:	99 1f       	adc	r25, r25
    40c8:	0a 94       	dec	r0
    40ca:	e2 f7       	brpl	.-8      	; 0x40c4 <DIO_enumSetPinDirection+0x1a0>
    40cc:	80 95       	com	r24
    40ce:	84 23       	and	r24, r20
    40d0:	8c 93       	st	X, r24
    40d2:	2d c0       	rjmp	.+90     	; 0x412e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_REG,Copy_u8Pin); break ;
    40d4:	a4 e3       	ldi	r26, 0x34	; 52
    40d6:	b0 e0       	ldi	r27, 0x00	; 0
    40d8:	e4 e3       	ldi	r30, 0x34	; 52
    40da:	f0 e0       	ldi	r31, 0x00	; 0
    40dc:	80 81       	ld	r24, Z
    40de:	48 2f       	mov	r20, r24
    40e0:	8b 81       	ldd	r24, Y+3	; 0x03
    40e2:	28 2f       	mov	r18, r24
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	81 e0       	ldi	r24, 0x01	; 1
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	02 2e       	mov	r0, r18
    40ec:	02 c0       	rjmp	.+4      	; 0x40f2 <DIO_enumSetPinDirection+0x1ce>
    40ee:	88 0f       	add	r24, r24
    40f0:	99 1f       	adc	r25, r25
    40f2:	0a 94       	dec	r0
    40f4:	e2 f7       	brpl	.-8      	; 0x40ee <DIO_enumSetPinDirection+0x1ca>
    40f6:	80 95       	com	r24
    40f8:	84 23       	and	r24, r20
    40fa:	8c 93       	st	X, r24
    40fc:	18 c0       	rjmp	.+48     	; 0x412e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_REG,Copy_u8Pin); break ;
    40fe:	a1 e3       	ldi	r26, 0x31	; 49
    4100:	b0 e0       	ldi	r27, 0x00	; 0
    4102:	e1 e3       	ldi	r30, 0x31	; 49
    4104:	f0 e0       	ldi	r31, 0x00	; 0
    4106:	80 81       	ld	r24, Z
    4108:	48 2f       	mov	r20, r24
    410a:	8b 81       	ldd	r24, Y+3	; 0x03
    410c:	28 2f       	mov	r18, r24
    410e:	30 e0       	ldi	r19, 0x00	; 0
    4110:	81 e0       	ldi	r24, 0x01	; 1
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	02 2e       	mov	r0, r18
    4116:	02 c0       	rjmp	.+4      	; 0x411c <DIO_enumSetPinDirection+0x1f8>
    4118:	88 0f       	add	r24, r24
    411a:	99 1f       	adc	r25, r25
    411c:	0a 94       	dec	r0
    411e:	e2 f7       	brpl	.-8      	; 0x4118 <DIO_enumSetPinDirection+0x1f4>
    4120:	80 95       	com	r24
    4122:	84 23       	and	r24, r20
    4124:	8c 93       	st	X, r24
    4126:	03 c0       	rjmp	.+6      	; 0x412e <DIO_enumSetPinDirection+0x20a>
			}
		}
		else
		{
			Local_enumErrorState = DIO_NOK;
    4128:	19 82       	std	Y+1, r1	; 0x01
    412a:	01 c0       	rjmp	.+2      	; 0x412e <DIO_enumSetPinDirection+0x20a>
		}
	}

	else
	{
		Local_enumErrorState = DIO_NOK;
    412c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enumErrorState;
    412e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4130:	28 96       	adiw	r28, 0x08	; 8
    4132:	0f b6       	in	r0, 0x3f	; 63
    4134:	f8 94       	cli
    4136:	de bf       	out	0x3e, r29	; 62
    4138:	0f be       	out	0x3f, r0	; 63
    413a:	cd bf       	out	0x3d, r28	; 61
    413c:	cf 91       	pop	r28
    413e:	df 91       	pop	r29
    4140:	08 95       	ret

00004142 <DIO_enumSetPinValue>:




DIO_ErrorStatus DIO_enumSetPinValue(u8  Copy_u8Port ,u8 Copy_u8Pin , u8 Copy_u8Value)
{
    4142:	df 93       	push	r29
    4144:	cf 93       	push	r28
    4146:	cd b7       	in	r28, 0x3d	; 61
    4148:	de b7       	in	r29, 0x3e	; 62
    414a:	28 97       	sbiw	r28, 0x08	; 8
    414c:	0f b6       	in	r0, 0x3f	; 63
    414e:	f8 94       	cli
    4150:	de bf       	out	0x3e, r29	; 62
    4152:	0f be       	out	0x3f, r0	; 63
    4154:	cd bf       	out	0x3d, r28	; 61
    4156:	8a 83       	std	Y+2, r24	; 0x02
    4158:	6b 83       	std	Y+3, r22	; 0x03
    415a:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    415c:	81 e0       	ldi	r24, 0x01	; 1
    415e:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port in the valid range */
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7 )
    4160:	8a 81       	ldd	r24, Y+2	; 0x02
    4162:	84 30       	cpi	r24, 0x04	; 4
    4164:	08 f0       	brcs	.+2      	; 0x4168 <DIO_enumSetPinValue+0x26>
    4166:	f1 c0       	rjmp	.+482    	; 0x434a <DIO_enumSetPinValue+0x208>
    4168:	8b 81       	ldd	r24, Y+3	; 0x03
    416a:	88 30       	cpi	r24, 0x08	; 8
    416c:	08 f0       	brcs	.+2      	; 0x4170 <DIO_enumSetPinValue+0x2e>
    416e:	ed c0       	rjmp	.+474    	; 0x434a <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_HIGH)
    4170:	8c 81       	ldd	r24, Y+4	; 0x04
    4172:	81 30       	cpi	r24, 0x01	; 1
    4174:	09 f0       	breq	.+2      	; 0x4178 <DIO_enumSetPinValue+0x36>
    4176:	6f c0       	rjmp	.+222    	; 0x4256 <DIO_enumSetPinValue+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    4178:	8a 81       	ldd	r24, Y+2	; 0x02
    417a:	28 2f       	mov	r18, r24
    417c:	30 e0       	ldi	r19, 0x00	; 0
    417e:	38 87       	std	Y+8, r19	; 0x08
    4180:	2f 83       	std	Y+7, r18	; 0x07
    4182:	8f 81       	ldd	r24, Y+7	; 0x07
    4184:	98 85       	ldd	r25, Y+8	; 0x08
    4186:	81 30       	cpi	r24, 0x01	; 1
    4188:	91 05       	cpc	r25, r1
    418a:	49 f1       	breq	.+82     	; 0x41de <DIO_enumSetPinValue+0x9c>
    418c:	2f 81       	ldd	r18, Y+7	; 0x07
    418e:	38 85       	ldd	r19, Y+8	; 0x08
    4190:	22 30       	cpi	r18, 0x02	; 2
    4192:	31 05       	cpc	r19, r1
    4194:	2c f4       	brge	.+10     	; 0x41a0 <DIO_enumSetPinValue+0x5e>
    4196:	8f 81       	ldd	r24, Y+7	; 0x07
    4198:	98 85       	ldd	r25, Y+8	; 0x08
    419a:	00 97       	sbiw	r24, 0x00	; 0
    419c:	61 f0       	breq	.+24     	; 0x41b6 <DIO_enumSetPinValue+0x74>
    419e:	d6 c0       	rjmp	.+428    	; 0x434c <DIO_enumSetPinValue+0x20a>
    41a0:	2f 81       	ldd	r18, Y+7	; 0x07
    41a2:	38 85       	ldd	r19, Y+8	; 0x08
    41a4:	22 30       	cpi	r18, 0x02	; 2
    41a6:	31 05       	cpc	r19, r1
    41a8:	71 f1       	breq	.+92     	; 0x4206 <DIO_enumSetPinValue+0xc4>
    41aa:	8f 81       	ldd	r24, Y+7	; 0x07
    41ac:	98 85       	ldd	r25, Y+8	; 0x08
    41ae:	83 30       	cpi	r24, 0x03	; 3
    41b0:	91 05       	cpc	r25, r1
    41b2:	e9 f1       	breq	.+122    	; 0x422e <DIO_enumSetPinValue+0xec>
    41b4:	cb c0       	rjmp	.+406    	; 0x434c <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: SET_BIT(PORTA_REG,Copy_u8Pin); break ;
    41b6:	ab e3       	ldi	r26, 0x3B	; 59
    41b8:	b0 e0       	ldi	r27, 0x00	; 0
    41ba:	eb e3       	ldi	r30, 0x3B	; 59
    41bc:	f0 e0       	ldi	r31, 0x00	; 0
    41be:	80 81       	ld	r24, Z
    41c0:	48 2f       	mov	r20, r24
    41c2:	8b 81       	ldd	r24, Y+3	; 0x03
    41c4:	28 2f       	mov	r18, r24
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	81 e0       	ldi	r24, 0x01	; 1
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	02 2e       	mov	r0, r18
    41ce:	02 c0       	rjmp	.+4      	; 0x41d4 <DIO_enumSetPinValue+0x92>
    41d0:	88 0f       	add	r24, r24
    41d2:	99 1f       	adc	r25, r25
    41d4:	0a 94       	dec	r0
    41d6:	e2 f7       	brpl	.-8      	; 0x41d0 <DIO_enumSetPinValue+0x8e>
    41d8:	84 2b       	or	r24, r20
    41da:	8c 93       	st	X, r24
    41dc:	b7 c0       	rjmp	.+366    	; 0x434c <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: SET_BIT(PORTB_REG,Copy_u8Pin); break ;
    41de:	a8 e3       	ldi	r26, 0x38	; 56
    41e0:	b0 e0       	ldi	r27, 0x00	; 0
    41e2:	e8 e3       	ldi	r30, 0x38	; 56
    41e4:	f0 e0       	ldi	r31, 0x00	; 0
    41e6:	80 81       	ld	r24, Z
    41e8:	48 2f       	mov	r20, r24
    41ea:	8b 81       	ldd	r24, Y+3	; 0x03
    41ec:	28 2f       	mov	r18, r24
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	81 e0       	ldi	r24, 0x01	; 1
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	02 2e       	mov	r0, r18
    41f6:	02 c0       	rjmp	.+4      	; 0x41fc <DIO_enumSetPinValue+0xba>
    41f8:	88 0f       	add	r24, r24
    41fa:	99 1f       	adc	r25, r25
    41fc:	0a 94       	dec	r0
    41fe:	e2 f7       	brpl	.-8      	; 0x41f8 <DIO_enumSetPinValue+0xb6>
    4200:	84 2b       	or	r24, r20
    4202:	8c 93       	st	X, r24
    4204:	a3 c0       	rjmp	.+326    	; 0x434c <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: SET_BIT(PORTC_REG,Copy_u8Pin); break ;
    4206:	a5 e3       	ldi	r26, 0x35	; 53
    4208:	b0 e0       	ldi	r27, 0x00	; 0
    420a:	e5 e3       	ldi	r30, 0x35	; 53
    420c:	f0 e0       	ldi	r31, 0x00	; 0
    420e:	80 81       	ld	r24, Z
    4210:	48 2f       	mov	r20, r24
    4212:	8b 81       	ldd	r24, Y+3	; 0x03
    4214:	28 2f       	mov	r18, r24
    4216:	30 e0       	ldi	r19, 0x00	; 0
    4218:	81 e0       	ldi	r24, 0x01	; 1
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	02 2e       	mov	r0, r18
    421e:	02 c0       	rjmp	.+4      	; 0x4224 <DIO_enumSetPinValue+0xe2>
    4220:	88 0f       	add	r24, r24
    4222:	99 1f       	adc	r25, r25
    4224:	0a 94       	dec	r0
    4226:	e2 f7       	brpl	.-8      	; 0x4220 <DIO_enumSetPinValue+0xde>
    4228:	84 2b       	or	r24, r20
    422a:	8c 93       	st	X, r24
    422c:	8f c0       	rjmp	.+286    	; 0x434c <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: SET_BIT(PORTD_REG,Copy_u8Pin); break ;
    422e:	a2 e3       	ldi	r26, 0x32	; 50
    4230:	b0 e0       	ldi	r27, 0x00	; 0
    4232:	e2 e3       	ldi	r30, 0x32	; 50
    4234:	f0 e0       	ldi	r31, 0x00	; 0
    4236:	80 81       	ld	r24, Z
    4238:	48 2f       	mov	r20, r24
    423a:	8b 81       	ldd	r24, Y+3	; 0x03
    423c:	28 2f       	mov	r18, r24
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	81 e0       	ldi	r24, 0x01	; 1
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	02 2e       	mov	r0, r18
    4246:	02 c0       	rjmp	.+4      	; 0x424c <DIO_enumSetPinValue+0x10a>
    4248:	88 0f       	add	r24, r24
    424a:	99 1f       	adc	r25, r25
    424c:	0a 94       	dec	r0
    424e:	e2 f7       	brpl	.-8      	; 0x4248 <DIO_enumSetPinValue+0x106>
    4250:	84 2b       	or	r24, r20
    4252:	8c 93       	st	X, r24
    4254:	7b c0       	rjmp	.+246    	; 0x434c <DIO_enumSetPinValue+0x20a>
			}
		}

		else if (Copy_u8Value == DIO_LOW)
    4256:	8c 81       	ldd	r24, Y+4	; 0x04
    4258:	88 23       	and	r24, r24
    425a:	09 f0       	breq	.+2      	; 0x425e <DIO_enumSetPinValue+0x11c>
    425c:	74 c0       	rjmp	.+232    	; 0x4346 <DIO_enumSetPinValue+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    425e:	8a 81       	ldd	r24, Y+2	; 0x02
    4260:	28 2f       	mov	r18, r24
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	3e 83       	std	Y+6, r19	; 0x06
    4266:	2d 83       	std	Y+5, r18	; 0x05
    4268:	8d 81       	ldd	r24, Y+5	; 0x05
    426a:	9e 81       	ldd	r25, Y+6	; 0x06
    426c:	81 30       	cpi	r24, 0x01	; 1
    426e:	91 05       	cpc	r25, r1
    4270:	59 f1       	breq	.+86     	; 0x42c8 <DIO_enumSetPinValue+0x186>
    4272:	2d 81       	ldd	r18, Y+5	; 0x05
    4274:	3e 81       	ldd	r19, Y+6	; 0x06
    4276:	22 30       	cpi	r18, 0x02	; 2
    4278:	31 05       	cpc	r19, r1
    427a:	2c f4       	brge	.+10     	; 0x4286 <DIO_enumSetPinValue+0x144>
    427c:	8d 81       	ldd	r24, Y+5	; 0x05
    427e:	9e 81       	ldd	r25, Y+6	; 0x06
    4280:	00 97       	sbiw	r24, 0x00	; 0
    4282:	69 f0       	breq	.+26     	; 0x429e <DIO_enumSetPinValue+0x15c>
    4284:	63 c0       	rjmp	.+198    	; 0x434c <DIO_enumSetPinValue+0x20a>
    4286:	2d 81       	ldd	r18, Y+5	; 0x05
    4288:	3e 81       	ldd	r19, Y+6	; 0x06
    428a:	22 30       	cpi	r18, 0x02	; 2
    428c:	31 05       	cpc	r19, r1
    428e:	89 f1       	breq	.+98     	; 0x42f2 <DIO_enumSetPinValue+0x1b0>
    4290:	8d 81       	ldd	r24, Y+5	; 0x05
    4292:	9e 81       	ldd	r25, Y+6	; 0x06
    4294:	83 30       	cpi	r24, 0x03	; 3
    4296:	91 05       	cpc	r25, r1
    4298:	09 f4       	brne	.+2      	; 0x429c <DIO_enumSetPinValue+0x15a>
    429a:	40 c0       	rjmp	.+128    	; 0x431c <DIO_enumSetPinValue+0x1da>
    429c:	57 c0       	rjmp	.+174    	; 0x434c <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: CLR_BIT(PORTA_REG,Copy_u8Pin); break ;
    429e:	ab e3       	ldi	r26, 0x3B	; 59
    42a0:	b0 e0       	ldi	r27, 0x00	; 0
    42a2:	eb e3       	ldi	r30, 0x3B	; 59
    42a4:	f0 e0       	ldi	r31, 0x00	; 0
    42a6:	80 81       	ld	r24, Z
    42a8:	48 2f       	mov	r20, r24
    42aa:	8b 81       	ldd	r24, Y+3	; 0x03
    42ac:	28 2f       	mov	r18, r24
    42ae:	30 e0       	ldi	r19, 0x00	; 0
    42b0:	81 e0       	ldi	r24, 0x01	; 1
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	02 2e       	mov	r0, r18
    42b6:	02 c0       	rjmp	.+4      	; 0x42bc <DIO_enumSetPinValue+0x17a>
    42b8:	88 0f       	add	r24, r24
    42ba:	99 1f       	adc	r25, r25
    42bc:	0a 94       	dec	r0
    42be:	e2 f7       	brpl	.-8      	; 0x42b8 <DIO_enumSetPinValue+0x176>
    42c0:	80 95       	com	r24
    42c2:	84 23       	and	r24, r20
    42c4:	8c 93       	st	X, r24
    42c6:	42 c0       	rjmp	.+132    	; 0x434c <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB_REG,Copy_u8Pin); break ;
    42c8:	a8 e3       	ldi	r26, 0x38	; 56
    42ca:	b0 e0       	ldi	r27, 0x00	; 0
    42cc:	e8 e3       	ldi	r30, 0x38	; 56
    42ce:	f0 e0       	ldi	r31, 0x00	; 0
    42d0:	80 81       	ld	r24, Z
    42d2:	48 2f       	mov	r20, r24
    42d4:	8b 81       	ldd	r24, Y+3	; 0x03
    42d6:	28 2f       	mov	r18, r24
    42d8:	30 e0       	ldi	r19, 0x00	; 0
    42da:	81 e0       	ldi	r24, 0x01	; 1
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	02 2e       	mov	r0, r18
    42e0:	02 c0       	rjmp	.+4      	; 0x42e6 <DIO_enumSetPinValue+0x1a4>
    42e2:	88 0f       	add	r24, r24
    42e4:	99 1f       	adc	r25, r25
    42e6:	0a 94       	dec	r0
    42e8:	e2 f7       	brpl	.-8      	; 0x42e2 <DIO_enumSetPinValue+0x1a0>
    42ea:	80 95       	com	r24
    42ec:	84 23       	and	r24, r20
    42ee:	8c 93       	st	X, r24
    42f0:	2d c0       	rjmp	.+90     	; 0x434c <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC_REG,Copy_u8Pin); break ;
    42f2:	a5 e3       	ldi	r26, 0x35	; 53
    42f4:	b0 e0       	ldi	r27, 0x00	; 0
    42f6:	e5 e3       	ldi	r30, 0x35	; 53
    42f8:	f0 e0       	ldi	r31, 0x00	; 0
    42fa:	80 81       	ld	r24, Z
    42fc:	48 2f       	mov	r20, r24
    42fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4300:	28 2f       	mov	r18, r24
    4302:	30 e0       	ldi	r19, 0x00	; 0
    4304:	81 e0       	ldi	r24, 0x01	; 1
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	02 2e       	mov	r0, r18
    430a:	02 c0       	rjmp	.+4      	; 0x4310 <DIO_enumSetPinValue+0x1ce>
    430c:	88 0f       	add	r24, r24
    430e:	99 1f       	adc	r25, r25
    4310:	0a 94       	dec	r0
    4312:	e2 f7       	brpl	.-8      	; 0x430c <DIO_enumSetPinValue+0x1ca>
    4314:	80 95       	com	r24
    4316:	84 23       	and	r24, r20
    4318:	8c 93       	st	X, r24
    431a:	18 c0       	rjmp	.+48     	; 0x434c <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD_REG,Copy_u8Pin); break ;
    431c:	a2 e3       	ldi	r26, 0x32	; 50
    431e:	b0 e0       	ldi	r27, 0x00	; 0
    4320:	e2 e3       	ldi	r30, 0x32	; 50
    4322:	f0 e0       	ldi	r31, 0x00	; 0
    4324:	80 81       	ld	r24, Z
    4326:	48 2f       	mov	r20, r24
    4328:	8b 81       	ldd	r24, Y+3	; 0x03
    432a:	28 2f       	mov	r18, r24
    432c:	30 e0       	ldi	r19, 0x00	; 0
    432e:	81 e0       	ldi	r24, 0x01	; 1
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	02 2e       	mov	r0, r18
    4334:	02 c0       	rjmp	.+4      	; 0x433a <DIO_enumSetPinValue+0x1f8>
    4336:	88 0f       	add	r24, r24
    4338:	99 1f       	adc	r25, r25
    433a:	0a 94       	dec	r0
    433c:	e2 f7       	brpl	.-8      	; 0x4336 <DIO_enumSetPinValue+0x1f4>
    433e:	80 95       	com	r24
    4340:	84 23       	and	r24, r20
    4342:	8c 93       	st	X, r24
    4344:	03 c0       	rjmp	.+6      	; 0x434c <DIO_enumSetPinValue+0x20a>
			}
		}
		else
		{
			Local_enumErrorState = DIO_NOK;
    4346:	19 82       	std	Y+1, r1	; 0x01
    4348:	01 c0       	rjmp	.+2      	; 0x434c <DIO_enumSetPinValue+0x20a>
		}
	}

	else
	{
		Local_enumErrorState = DIO_NOK;
    434a:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enumErrorState;
    434c:	89 81       	ldd	r24, Y+1	; 0x01

}
    434e:	28 96       	adiw	r28, 0x08	; 8
    4350:	0f b6       	in	r0, 0x3f	; 63
    4352:	f8 94       	cli
    4354:	de bf       	out	0x3e, r29	; 62
    4356:	0f be       	out	0x3f, r0	; 63
    4358:	cd bf       	out	0x3d, r28	; 61
    435a:	cf 91       	pop	r28
    435c:	df 91       	pop	r29
    435e:	08 95       	ret

00004360 <DIO_enumGetPinValue>:

DIO_ErrorStatus DIO_enumGetPinValue(u8  Copy_u8Port ,u8 Copy_u8Pin , u8* Copy_pu8Value)
{
    4360:	df 93       	push	r29
    4362:	cf 93       	push	r28
    4364:	cd b7       	in	r28, 0x3d	; 61
    4366:	de b7       	in	r29, 0x3e	; 62
    4368:	27 97       	sbiw	r28, 0x07	; 7
    436a:	0f b6       	in	r0, 0x3f	; 63
    436c:	f8 94       	cli
    436e:	de bf       	out	0x3e, r29	; 62
    4370:	0f be       	out	0x3f, r0	; 63
    4372:	cd bf       	out	0x3d, r28	; 61
    4374:	8a 83       	std	Y+2, r24	; 0x02
    4376:	6b 83       	std	Y+3, r22	; 0x03
    4378:	5d 83       	std	Y+5, r21	; 0x05
    437a:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    437c:	81 e0       	ldi	r24, 0x01	; 1
    437e:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7 )
    4380:	8a 81       	ldd	r24, Y+2	; 0x02
    4382:	84 30       	cpi	r24, 0x04	; 4
    4384:	08 f0       	brcs	.+2      	; 0x4388 <DIO_enumGetPinValue+0x28>
    4386:	75 c0       	rjmp	.+234    	; 0x4472 <DIO_enumGetPinValue+0x112>
    4388:	8b 81       	ldd	r24, Y+3	; 0x03
    438a:	88 30       	cpi	r24, 0x08	; 8
    438c:	08 f0       	brcs	.+2      	; 0x4390 <DIO_enumGetPinValue+0x30>
    438e:	71 c0       	rjmp	.+226    	; 0x4472 <DIO_enumGetPinValue+0x112>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8Port)
    4390:	8a 81       	ldd	r24, Y+2	; 0x02
    4392:	28 2f       	mov	r18, r24
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	3f 83       	std	Y+7, r19	; 0x07
    4398:	2e 83       	std	Y+6, r18	; 0x06
    439a:	4e 81       	ldd	r20, Y+6	; 0x06
    439c:	5f 81       	ldd	r21, Y+7	; 0x07
    439e:	41 30       	cpi	r20, 0x01	; 1
    43a0:	51 05       	cpc	r21, r1
    43a2:	59 f1       	breq	.+86     	; 0x43fa <DIO_enumGetPinValue+0x9a>
    43a4:	8e 81       	ldd	r24, Y+6	; 0x06
    43a6:	9f 81       	ldd	r25, Y+7	; 0x07
    43a8:	82 30       	cpi	r24, 0x02	; 2
    43aa:	91 05       	cpc	r25, r1
    43ac:	34 f4       	brge	.+12     	; 0x43ba <DIO_enumGetPinValue+0x5a>
    43ae:	2e 81       	ldd	r18, Y+6	; 0x06
    43b0:	3f 81       	ldd	r19, Y+7	; 0x07
    43b2:	21 15       	cp	r18, r1
    43b4:	31 05       	cpc	r19, r1
    43b6:	69 f0       	breq	.+26     	; 0x43d2 <DIO_enumGetPinValue+0x72>
    43b8:	5d c0       	rjmp	.+186    	; 0x4474 <DIO_enumGetPinValue+0x114>
    43ba:	4e 81       	ldd	r20, Y+6	; 0x06
    43bc:	5f 81       	ldd	r21, Y+7	; 0x07
    43be:	42 30       	cpi	r20, 0x02	; 2
    43c0:	51 05       	cpc	r21, r1
    43c2:	79 f1       	breq	.+94     	; 0x4422 <DIO_enumGetPinValue+0xc2>
    43c4:	8e 81       	ldd	r24, Y+6	; 0x06
    43c6:	9f 81       	ldd	r25, Y+7	; 0x07
    43c8:	83 30       	cpi	r24, 0x03	; 3
    43ca:	91 05       	cpc	r25, r1
    43cc:	09 f4       	brne	.+2      	; 0x43d0 <DIO_enumGetPinValue+0x70>
    43ce:	3d c0       	rjmp	.+122    	; 0x444a <DIO_enumGetPinValue+0xea>
    43d0:	51 c0       	rjmp	.+162    	; 0x4474 <DIO_enumGetPinValue+0x114>
		{
		case DIO_PORTA:  *Copy_pu8Value = GET_BIT(PINA_REG,Copy_u8Pin); break ;
    43d2:	e9 e3       	ldi	r30, 0x39	; 57
    43d4:	f0 e0       	ldi	r31, 0x00	; 0
    43d6:	80 81       	ld	r24, Z
    43d8:	28 2f       	mov	r18, r24
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	8b 81       	ldd	r24, Y+3	; 0x03
    43de:	88 2f       	mov	r24, r24
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	a9 01       	movw	r20, r18
    43e4:	02 c0       	rjmp	.+4      	; 0x43ea <DIO_enumGetPinValue+0x8a>
    43e6:	55 95       	asr	r21
    43e8:	47 95       	ror	r20
    43ea:	8a 95       	dec	r24
    43ec:	e2 f7       	brpl	.-8      	; 0x43e6 <DIO_enumGetPinValue+0x86>
    43ee:	ca 01       	movw	r24, r20
    43f0:	81 70       	andi	r24, 0x01	; 1
    43f2:	ec 81       	ldd	r30, Y+4	; 0x04
    43f4:	fd 81       	ldd	r31, Y+5	; 0x05
    43f6:	80 83       	st	Z, r24
    43f8:	3d c0       	rjmp	.+122    	; 0x4474 <DIO_enumGetPinValue+0x114>
		case DIO_PORTB:  *Copy_pu8Value = GET_BIT(PINB_REG,Copy_u8Pin); break ;
    43fa:	e6 e3       	ldi	r30, 0x36	; 54
    43fc:	f0 e0       	ldi	r31, 0x00	; 0
    43fe:	80 81       	ld	r24, Z
    4400:	28 2f       	mov	r18, r24
    4402:	30 e0       	ldi	r19, 0x00	; 0
    4404:	8b 81       	ldd	r24, Y+3	; 0x03
    4406:	88 2f       	mov	r24, r24
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	a9 01       	movw	r20, r18
    440c:	02 c0       	rjmp	.+4      	; 0x4412 <DIO_enumGetPinValue+0xb2>
    440e:	55 95       	asr	r21
    4410:	47 95       	ror	r20
    4412:	8a 95       	dec	r24
    4414:	e2 f7       	brpl	.-8      	; 0x440e <DIO_enumGetPinValue+0xae>
    4416:	ca 01       	movw	r24, r20
    4418:	81 70       	andi	r24, 0x01	; 1
    441a:	ec 81       	ldd	r30, Y+4	; 0x04
    441c:	fd 81       	ldd	r31, Y+5	; 0x05
    441e:	80 83       	st	Z, r24
    4420:	29 c0       	rjmp	.+82     	; 0x4474 <DIO_enumGetPinValue+0x114>
		case DIO_PORTC:  *Copy_pu8Value = GET_BIT(PINC_REG,Copy_u8Pin); break ;
    4422:	e3 e3       	ldi	r30, 0x33	; 51
    4424:	f0 e0       	ldi	r31, 0x00	; 0
    4426:	80 81       	ld	r24, Z
    4428:	28 2f       	mov	r18, r24
    442a:	30 e0       	ldi	r19, 0x00	; 0
    442c:	8b 81       	ldd	r24, Y+3	; 0x03
    442e:	88 2f       	mov	r24, r24
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	a9 01       	movw	r20, r18
    4434:	02 c0       	rjmp	.+4      	; 0x443a <DIO_enumGetPinValue+0xda>
    4436:	55 95       	asr	r21
    4438:	47 95       	ror	r20
    443a:	8a 95       	dec	r24
    443c:	e2 f7       	brpl	.-8      	; 0x4436 <DIO_enumGetPinValue+0xd6>
    443e:	ca 01       	movw	r24, r20
    4440:	81 70       	andi	r24, 0x01	; 1
    4442:	ec 81       	ldd	r30, Y+4	; 0x04
    4444:	fd 81       	ldd	r31, Y+5	; 0x05
    4446:	80 83       	st	Z, r24
    4448:	15 c0       	rjmp	.+42     	; 0x4474 <DIO_enumGetPinValue+0x114>
		case DIO_PORTD:  *Copy_pu8Value = GET_BIT(PIND_REG,Copy_u8Pin); break ;
    444a:	e0 e3       	ldi	r30, 0x30	; 48
    444c:	f0 e0       	ldi	r31, 0x00	; 0
    444e:	80 81       	ld	r24, Z
    4450:	28 2f       	mov	r18, r24
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	8b 81       	ldd	r24, Y+3	; 0x03
    4456:	88 2f       	mov	r24, r24
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	a9 01       	movw	r20, r18
    445c:	02 c0       	rjmp	.+4      	; 0x4462 <DIO_enumGetPinValue+0x102>
    445e:	55 95       	asr	r21
    4460:	47 95       	ror	r20
    4462:	8a 95       	dec	r24
    4464:	e2 f7       	brpl	.-8      	; 0x445e <DIO_enumGetPinValue+0xfe>
    4466:	ca 01       	movw	r24, r20
    4468:	81 70       	andi	r24, 0x01	; 1
    446a:	ec 81       	ldd	r30, Y+4	; 0x04
    446c:	fd 81       	ldd	r31, Y+5	; 0x05
    446e:	80 83       	st	Z, r24
    4470:	01 c0       	rjmp	.+2      	; 0x4474 <DIO_enumGetPinValue+0x114>
		}
	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		Local_enumErrorState = DIO_NOK ;
    4472:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enumErrorState;
    4474:	89 81       	ldd	r24, Y+1	; 0x01
}
    4476:	27 96       	adiw	r28, 0x07	; 7
    4478:	0f b6       	in	r0, 0x3f	; 63
    447a:	f8 94       	cli
    447c:	de bf       	out	0x3e, r29	; 62
    447e:	0f be       	out	0x3f, r0	; 63
    4480:	cd bf       	out	0x3d, r28	; 61
    4482:	cf 91       	pop	r28
    4484:	df 91       	pop	r29
    4486:	08 95       	ret

00004488 <DIO_enumTogglePinValue>:



DIO_ErrorStatus DIO_enumTogglePinValue( u8 Copy_u8Port, u8 Copy_u8Pin )
{
    4488:	df 93       	push	r29
    448a:	cf 93       	push	r28
    448c:	00 d0       	rcall	.+0      	; 0x448e <DIO_enumTogglePinValue+0x6>
    448e:	00 d0       	rcall	.+0      	; 0x4490 <DIO_enumTogglePinValue+0x8>
    4490:	0f 92       	push	r0
    4492:	cd b7       	in	r28, 0x3d	; 61
    4494:	de b7       	in	r29, 0x3e	; 62
    4496:	8a 83       	std	Y+2, r24	; 0x02
    4498:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    449a:	81 e0       	ldi	r24, 0x01	; 1
    449c:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7 )
    449e:	8a 81       	ldd	r24, Y+2	; 0x02
    44a0:	84 30       	cpi	r24, 0x04	; 4
    44a2:	08 f0       	brcs	.+2      	; 0x44a6 <DIO_enumTogglePinValue+0x1e>
    44a4:	73 c0       	rjmp	.+230    	; 0x458c <DIO_enumTogglePinValue+0x104>
    44a6:	8b 81       	ldd	r24, Y+3	; 0x03
    44a8:	88 30       	cpi	r24, 0x08	; 8
    44aa:	08 f0       	brcs	.+2      	; 0x44ae <DIO_enumTogglePinValue+0x26>
    44ac:	6f c0       	rjmp	.+222    	; 0x458c <DIO_enumTogglePinValue+0x104>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8Port)
    44ae:	8a 81       	ldd	r24, Y+2	; 0x02
    44b0:	28 2f       	mov	r18, r24
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	3d 83       	std	Y+5, r19	; 0x05
    44b6:	2c 83       	std	Y+4, r18	; 0x04
    44b8:	8c 81       	ldd	r24, Y+4	; 0x04
    44ba:	9d 81       	ldd	r25, Y+5	; 0x05
    44bc:	81 30       	cpi	r24, 0x01	; 1
    44be:	91 05       	cpc	r25, r1
    44c0:	49 f1       	breq	.+82     	; 0x4514 <DIO_enumTogglePinValue+0x8c>
    44c2:	2c 81       	ldd	r18, Y+4	; 0x04
    44c4:	3d 81       	ldd	r19, Y+5	; 0x05
    44c6:	22 30       	cpi	r18, 0x02	; 2
    44c8:	31 05       	cpc	r19, r1
    44ca:	2c f4       	brge	.+10     	; 0x44d6 <DIO_enumTogglePinValue+0x4e>
    44cc:	8c 81       	ldd	r24, Y+4	; 0x04
    44ce:	9d 81       	ldd	r25, Y+5	; 0x05
    44d0:	00 97       	sbiw	r24, 0x00	; 0
    44d2:	61 f0       	breq	.+24     	; 0x44ec <DIO_enumTogglePinValue+0x64>
    44d4:	5c c0       	rjmp	.+184    	; 0x458e <DIO_enumTogglePinValue+0x106>
    44d6:	2c 81       	ldd	r18, Y+4	; 0x04
    44d8:	3d 81       	ldd	r19, Y+5	; 0x05
    44da:	22 30       	cpi	r18, 0x02	; 2
    44dc:	31 05       	cpc	r19, r1
    44de:	71 f1       	breq	.+92     	; 0x453c <DIO_enumTogglePinValue+0xb4>
    44e0:	8c 81       	ldd	r24, Y+4	; 0x04
    44e2:	9d 81       	ldd	r25, Y+5	; 0x05
    44e4:	83 30       	cpi	r24, 0x03	; 3
    44e6:	91 05       	cpc	r25, r1
    44e8:	e9 f1       	breq	.+122    	; 0x4564 <DIO_enumTogglePinValue+0xdc>
    44ea:	51 c0       	rjmp	.+162    	; 0x458e <DIO_enumTogglePinValue+0x106>
		{
		case DIO_PORTA: TOGGLE_BIT(PORTA_REG,Copy_u8Pin); break ;
    44ec:	ab e3       	ldi	r26, 0x3B	; 59
    44ee:	b0 e0       	ldi	r27, 0x00	; 0
    44f0:	eb e3       	ldi	r30, 0x3B	; 59
    44f2:	f0 e0       	ldi	r31, 0x00	; 0
    44f4:	80 81       	ld	r24, Z
    44f6:	48 2f       	mov	r20, r24
    44f8:	8b 81       	ldd	r24, Y+3	; 0x03
    44fa:	28 2f       	mov	r18, r24
    44fc:	30 e0       	ldi	r19, 0x00	; 0
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	02 2e       	mov	r0, r18
    4504:	02 c0       	rjmp	.+4      	; 0x450a <DIO_enumTogglePinValue+0x82>
    4506:	88 0f       	add	r24, r24
    4508:	99 1f       	adc	r25, r25
    450a:	0a 94       	dec	r0
    450c:	e2 f7       	brpl	.-8      	; 0x4506 <DIO_enumTogglePinValue+0x7e>
    450e:	84 27       	eor	r24, r20
    4510:	8c 93       	st	X, r24
    4512:	3d c0       	rjmp	.+122    	; 0x458e <DIO_enumTogglePinValue+0x106>
		case DIO_PORTB: TOGGLE_BIT(PORTB_REG,Copy_u8Pin); break ;
    4514:	a8 e3       	ldi	r26, 0x38	; 56
    4516:	b0 e0       	ldi	r27, 0x00	; 0
    4518:	e8 e3       	ldi	r30, 0x38	; 56
    451a:	f0 e0       	ldi	r31, 0x00	; 0
    451c:	80 81       	ld	r24, Z
    451e:	48 2f       	mov	r20, r24
    4520:	8b 81       	ldd	r24, Y+3	; 0x03
    4522:	28 2f       	mov	r18, r24
    4524:	30 e0       	ldi	r19, 0x00	; 0
    4526:	81 e0       	ldi	r24, 0x01	; 1
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	02 2e       	mov	r0, r18
    452c:	02 c0       	rjmp	.+4      	; 0x4532 <DIO_enumTogglePinValue+0xaa>
    452e:	88 0f       	add	r24, r24
    4530:	99 1f       	adc	r25, r25
    4532:	0a 94       	dec	r0
    4534:	e2 f7       	brpl	.-8      	; 0x452e <DIO_enumTogglePinValue+0xa6>
    4536:	84 27       	eor	r24, r20
    4538:	8c 93       	st	X, r24
    453a:	29 c0       	rjmp	.+82     	; 0x458e <DIO_enumTogglePinValue+0x106>
		case DIO_PORTC: TOGGLE_BIT(PORTC_REG,Copy_u8Pin); break ;
    453c:	a5 e3       	ldi	r26, 0x35	; 53
    453e:	b0 e0       	ldi	r27, 0x00	; 0
    4540:	e5 e3       	ldi	r30, 0x35	; 53
    4542:	f0 e0       	ldi	r31, 0x00	; 0
    4544:	80 81       	ld	r24, Z
    4546:	48 2f       	mov	r20, r24
    4548:	8b 81       	ldd	r24, Y+3	; 0x03
    454a:	28 2f       	mov	r18, r24
    454c:	30 e0       	ldi	r19, 0x00	; 0
    454e:	81 e0       	ldi	r24, 0x01	; 1
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	02 2e       	mov	r0, r18
    4554:	02 c0       	rjmp	.+4      	; 0x455a <DIO_enumTogglePinValue+0xd2>
    4556:	88 0f       	add	r24, r24
    4558:	99 1f       	adc	r25, r25
    455a:	0a 94       	dec	r0
    455c:	e2 f7       	brpl	.-8      	; 0x4556 <DIO_enumTogglePinValue+0xce>
    455e:	84 27       	eor	r24, r20
    4560:	8c 93       	st	X, r24
    4562:	15 c0       	rjmp	.+42     	; 0x458e <DIO_enumTogglePinValue+0x106>
		case DIO_PORTD: TOGGLE_BIT(PORTD_REG,Copy_u8Pin); break ;
    4564:	a2 e3       	ldi	r26, 0x32	; 50
    4566:	b0 e0       	ldi	r27, 0x00	; 0
    4568:	e2 e3       	ldi	r30, 0x32	; 50
    456a:	f0 e0       	ldi	r31, 0x00	; 0
    456c:	80 81       	ld	r24, Z
    456e:	48 2f       	mov	r20, r24
    4570:	8b 81       	ldd	r24, Y+3	; 0x03
    4572:	28 2f       	mov	r18, r24
    4574:	30 e0       	ldi	r19, 0x00	; 0
    4576:	81 e0       	ldi	r24, 0x01	; 1
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	02 2e       	mov	r0, r18
    457c:	02 c0       	rjmp	.+4      	; 0x4582 <DIO_enumTogglePinValue+0xfa>
    457e:	88 0f       	add	r24, r24
    4580:	99 1f       	adc	r25, r25
    4582:	0a 94       	dec	r0
    4584:	e2 f7       	brpl	.-8      	; 0x457e <DIO_enumTogglePinValue+0xf6>
    4586:	84 27       	eor	r24, r20
    4588:	8c 93       	st	X, r24
    458a:	01 c0       	rjmp	.+2      	; 0x458e <DIO_enumTogglePinValue+0x106>
		}
	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		Local_enumErrorState = DIO_NOK ;
    458c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enumErrorState;
    458e:	89 81       	ldd	r24, Y+1	; 0x01

}
    4590:	0f 90       	pop	r0
    4592:	0f 90       	pop	r0
    4594:	0f 90       	pop	r0
    4596:	0f 90       	pop	r0
    4598:	0f 90       	pop	r0
    459a:	cf 91       	pop	r28
    459c:	df 91       	pop	r29
    459e:	08 95       	ret

000045a0 <DIO_enumSetPortDirection>:


DIO_ErrorStatus DIO_enumSetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
    45a0:	df 93       	push	r29
    45a2:	cf 93       	push	r28
    45a4:	cd b7       	in	r28, 0x3d	; 61
    45a6:	de b7       	in	r29, 0x3e	; 62
    45a8:	27 97       	sbiw	r28, 0x07	; 7
    45aa:	0f b6       	in	r0, 0x3f	; 63
    45ac:	f8 94       	cli
    45ae:	de bf       	out	0x3e, r29	; 62
    45b0:	0f be       	out	0x3f, r0	; 63
    45b2:	cd bf       	out	0x3d, r28	; 61
    45b4:	8a 83       	std	Y+2, r24	; 0x02
    45b6:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    45b8:	81 e0       	ldi	r24, 0x01	; 1
    45ba:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID  in the valid range */
	if (Copy_u8Port <= DIO_PORTD)
    45bc:	8a 81       	ldd	r24, Y+2	; 0x02
    45be:	84 30       	cpi	r24, 0x04	; 4
    45c0:	08 f0       	brcs	.+2      	; 0x45c4 <DIO_enumSetPortDirection+0x24>
    45c2:	6a c0       	rjmp	.+212    	; 0x4698 <DIO_enumSetPortDirection+0xf8>
	{
		if (Copy_u8Direction == DIO_PORT_OUTPUT)
    45c4:	8b 81       	ldd	r24, Y+3	; 0x03
    45c6:	8f 3f       	cpi	r24, 0xFF	; 255
    45c8:	99 f5       	brne	.+102    	; 0x4630 <DIO_enumSetPortDirection+0x90>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    45ca:	8a 81       	ldd	r24, Y+2	; 0x02
    45cc:	28 2f       	mov	r18, r24
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	3f 83       	std	Y+7, r19	; 0x07
    45d2:	2e 83       	std	Y+6, r18	; 0x06
    45d4:	8e 81       	ldd	r24, Y+6	; 0x06
    45d6:	9f 81       	ldd	r25, Y+7	; 0x07
    45d8:	81 30       	cpi	r24, 0x01	; 1
    45da:	91 05       	cpc	r25, r1
    45dc:	d1 f0       	breq	.+52     	; 0x4612 <DIO_enumSetPortDirection+0x72>
    45de:	2e 81       	ldd	r18, Y+6	; 0x06
    45e0:	3f 81       	ldd	r19, Y+7	; 0x07
    45e2:	22 30       	cpi	r18, 0x02	; 2
    45e4:	31 05       	cpc	r19, r1
    45e6:	2c f4       	brge	.+10     	; 0x45f2 <DIO_enumSetPortDirection+0x52>
    45e8:	8e 81       	ldd	r24, Y+6	; 0x06
    45ea:	9f 81       	ldd	r25, Y+7	; 0x07
    45ec:	00 97       	sbiw	r24, 0x00	; 0
    45ee:	61 f0       	breq	.+24     	; 0x4608 <DIO_enumSetPortDirection+0x68>
    45f0:	54 c0       	rjmp	.+168    	; 0x469a <DIO_enumSetPortDirection+0xfa>
    45f2:	2e 81       	ldd	r18, Y+6	; 0x06
    45f4:	3f 81       	ldd	r19, Y+7	; 0x07
    45f6:	22 30       	cpi	r18, 0x02	; 2
    45f8:	31 05       	cpc	r19, r1
    45fa:	81 f0       	breq	.+32     	; 0x461c <DIO_enumSetPortDirection+0x7c>
    45fc:	8e 81       	ldd	r24, Y+6	; 0x06
    45fe:	9f 81       	ldd	r25, Y+7	; 0x07
    4600:	83 30       	cpi	r24, 0x03	; 3
    4602:	91 05       	cpc	r25, r1
    4604:	81 f0       	breq	.+32     	; 0x4626 <DIO_enumSetPortDirection+0x86>
    4606:	49 c0       	rjmp	.+146    	; 0x469a <DIO_enumSetPortDirection+0xfa>
			{
			case DIO_PORTA: SET_REG(DDRA_REG); break ;
    4608:	ea e3       	ldi	r30, 0x3A	; 58
    460a:	f0 e0       	ldi	r31, 0x00	; 0
    460c:	8f ef       	ldi	r24, 0xFF	; 255
    460e:	80 83       	st	Z, r24
    4610:	44 c0       	rjmp	.+136    	; 0x469a <DIO_enumSetPortDirection+0xfa>
			case DIO_PORTB: SET_REG(DDRB_REG); break ;
    4612:	e7 e3       	ldi	r30, 0x37	; 55
    4614:	f0 e0       	ldi	r31, 0x00	; 0
    4616:	8f ef       	ldi	r24, 0xFF	; 255
    4618:	80 83       	st	Z, r24
    461a:	3f c0       	rjmp	.+126    	; 0x469a <DIO_enumSetPortDirection+0xfa>
			case DIO_PORTC: SET_REG(DDRC_REG); break ;
    461c:	e4 e3       	ldi	r30, 0x34	; 52
    461e:	f0 e0       	ldi	r31, 0x00	; 0
    4620:	8f ef       	ldi	r24, 0xFF	; 255
    4622:	80 83       	st	Z, r24
    4624:	3a c0       	rjmp	.+116    	; 0x469a <DIO_enumSetPortDirection+0xfa>
			case DIO_PORTD: SET_REG(DDRD_REG); break ;
    4626:	e1 e3       	ldi	r30, 0x31	; 49
    4628:	f0 e0       	ldi	r31, 0x00	; 0
    462a:	8f ef       	ldi	r24, 0xFF	; 255
    462c:	80 83       	st	Z, r24
    462e:	35 c0       	rjmp	.+106    	; 0x469a <DIO_enumSetPortDirection+0xfa>
			}
		}

		else if (Copy_u8Direction == DIO_PORT_INPUT)
    4630:	8b 81       	ldd	r24, Y+3	; 0x03
    4632:	88 23       	and	r24, r24
    4634:	79 f5       	brne	.+94     	; 0x4694 <DIO_enumSetPortDirection+0xf4>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    4636:	8a 81       	ldd	r24, Y+2	; 0x02
    4638:	28 2f       	mov	r18, r24
    463a:	30 e0       	ldi	r19, 0x00	; 0
    463c:	3d 83       	std	Y+5, r19	; 0x05
    463e:	2c 83       	std	Y+4, r18	; 0x04
    4640:	8c 81       	ldd	r24, Y+4	; 0x04
    4642:	9d 81       	ldd	r25, Y+5	; 0x05
    4644:	81 30       	cpi	r24, 0x01	; 1
    4646:	91 05       	cpc	r25, r1
    4648:	c9 f0       	breq	.+50     	; 0x467c <DIO_enumSetPortDirection+0xdc>
    464a:	2c 81       	ldd	r18, Y+4	; 0x04
    464c:	3d 81       	ldd	r19, Y+5	; 0x05
    464e:	22 30       	cpi	r18, 0x02	; 2
    4650:	31 05       	cpc	r19, r1
    4652:	2c f4       	brge	.+10     	; 0x465e <DIO_enumSetPortDirection+0xbe>
    4654:	8c 81       	ldd	r24, Y+4	; 0x04
    4656:	9d 81       	ldd	r25, Y+5	; 0x05
    4658:	00 97       	sbiw	r24, 0x00	; 0
    465a:	61 f0       	breq	.+24     	; 0x4674 <DIO_enumSetPortDirection+0xd4>
    465c:	1e c0       	rjmp	.+60     	; 0x469a <DIO_enumSetPortDirection+0xfa>
    465e:	2c 81       	ldd	r18, Y+4	; 0x04
    4660:	3d 81       	ldd	r19, Y+5	; 0x05
    4662:	22 30       	cpi	r18, 0x02	; 2
    4664:	31 05       	cpc	r19, r1
    4666:	71 f0       	breq	.+28     	; 0x4684 <DIO_enumSetPortDirection+0xe4>
    4668:	8c 81       	ldd	r24, Y+4	; 0x04
    466a:	9d 81       	ldd	r25, Y+5	; 0x05
    466c:	83 30       	cpi	r24, 0x03	; 3
    466e:	91 05       	cpc	r25, r1
    4670:	69 f0       	breq	.+26     	; 0x468c <DIO_enumSetPortDirection+0xec>
    4672:	13 c0       	rjmp	.+38     	; 0x469a <DIO_enumSetPortDirection+0xfa>
			{
			case DIO_PORTA: CLR_REG(DDRA_REG); break ;
    4674:	ea e3       	ldi	r30, 0x3A	; 58
    4676:	f0 e0       	ldi	r31, 0x00	; 0
    4678:	10 82       	st	Z, r1
    467a:	0f c0       	rjmp	.+30     	; 0x469a <DIO_enumSetPortDirection+0xfa>
			case DIO_PORTB: CLR_REG(DDRB_REG); break ;
    467c:	e7 e3       	ldi	r30, 0x37	; 55
    467e:	f0 e0       	ldi	r31, 0x00	; 0
    4680:	10 82       	st	Z, r1
    4682:	0b c0       	rjmp	.+22     	; 0x469a <DIO_enumSetPortDirection+0xfa>
			case DIO_PORTC: CLR_REG(DDRC_REG); break ;
    4684:	e4 e3       	ldi	r30, 0x34	; 52
    4686:	f0 e0       	ldi	r31, 0x00	; 0
    4688:	10 82       	st	Z, r1
    468a:	07 c0       	rjmp	.+14     	; 0x469a <DIO_enumSetPortDirection+0xfa>
			case DIO_PORTD: CLR_REG(DDRD_REG); break ;
    468c:	e1 e3       	ldi	r30, 0x31	; 49
    468e:	f0 e0       	ldi	r31, 0x00	; 0
    4690:	10 82       	st	Z, r1
    4692:	03 c0       	rjmp	.+6      	; 0x469a <DIO_enumSetPortDirection+0xfa>
			}
		}

		else
		{
			Local_enumErrorState = DIO_NOK;
    4694:	19 82       	std	Y+1, r1	; 0x01
    4696:	01 c0       	rjmp	.+2      	; 0x469a <DIO_enumSetPortDirection+0xfa>
		}

	}
	else
	{
		Local_enumErrorState = DIO_NOK;
    4698:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enumErrorState;
    469a:	89 81       	ldd	r24, Y+1	; 0x01
}
    469c:	27 96       	adiw	r28, 0x07	; 7
    469e:	0f b6       	in	r0, 0x3f	; 63
    46a0:	f8 94       	cli
    46a2:	de bf       	out	0x3e, r29	; 62
    46a4:	0f be       	out	0x3f, r0	; 63
    46a6:	cd bf       	out	0x3d, r28	; 61
    46a8:	cf 91       	pop	r28
    46aa:	df 91       	pop	r29
    46ac:	08 95       	ret

000046ae <DIO_enumSetPortValue>:


DIO_ErrorStatus DIO_enumSetPortValue(u8  Copy_u8Port , u8 Copy_u8Value)
{
    46ae:	df 93       	push	r29
    46b0:	cf 93       	push	r28
    46b2:	00 d0       	rcall	.+0      	; 0x46b4 <DIO_enumSetPortValue+0x6>
    46b4:	00 d0       	rcall	.+0      	; 0x46b6 <DIO_enumSetPortValue+0x8>
    46b6:	0f 92       	push	r0
    46b8:	cd b7       	in	r28, 0x3d	; 61
    46ba:	de b7       	in	r29, 0x3e	; 62
    46bc:	8a 83       	std	Y+2, r24	; 0x02
    46be:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    46c0:	81 e0       	ldi	r24, 0x01	; 1
    46c2:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8Port <= DIO_PORTD))
    46c4:	8a 81       	ldd	r24, Y+2	; 0x02
    46c6:	84 30       	cpi	r24, 0x04	; 4
    46c8:	98 f5       	brcc	.+102    	; 0x4730 <DIO_enumSetPortValue+0x82>
	{

		switch(Copy_u8Port)
    46ca:	8a 81       	ldd	r24, Y+2	; 0x02
    46cc:	28 2f       	mov	r18, r24
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	3d 83       	std	Y+5, r19	; 0x05
    46d2:	2c 83       	std	Y+4, r18	; 0x04
    46d4:	8c 81       	ldd	r24, Y+4	; 0x04
    46d6:	9d 81       	ldd	r25, Y+5	; 0x05
    46d8:	81 30       	cpi	r24, 0x01	; 1
    46da:	91 05       	cpc	r25, r1
    46dc:	d1 f0       	breq	.+52     	; 0x4712 <DIO_enumSetPortValue+0x64>
    46de:	2c 81       	ldd	r18, Y+4	; 0x04
    46e0:	3d 81       	ldd	r19, Y+5	; 0x05
    46e2:	22 30       	cpi	r18, 0x02	; 2
    46e4:	31 05       	cpc	r19, r1
    46e6:	2c f4       	brge	.+10     	; 0x46f2 <DIO_enumSetPortValue+0x44>
    46e8:	8c 81       	ldd	r24, Y+4	; 0x04
    46ea:	9d 81       	ldd	r25, Y+5	; 0x05
    46ec:	00 97       	sbiw	r24, 0x00	; 0
    46ee:	61 f0       	breq	.+24     	; 0x4708 <DIO_enumSetPortValue+0x5a>
    46f0:	20 c0       	rjmp	.+64     	; 0x4732 <DIO_enumSetPortValue+0x84>
    46f2:	2c 81       	ldd	r18, Y+4	; 0x04
    46f4:	3d 81       	ldd	r19, Y+5	; 0x05
    46f6:	22 30       	cpi	r18, 0x02	; 2
    46f8:	31 05       	cpc	r19, r1
    46fa:	81 f0       	breq	.+32     	; 0x471c <DIO_enumSetPortValue+0x6e>
    46fc:	8c 81       	ldd	r24, Y+4	; 0x04
    46fe:	9d 81       	ldd	r25, Y+5	; 0x05
    4700:	83 30       	cpi	r24, 0x03	; 3
    4702:	91 05       	cpc	r25, r1
    4704:	81 f0       	breq	.+32     	; 0x4726 <DIO_enumSetPortValue+0x78>
    4706:	15 c0       	rjmp	.+42     	; 0x4732 <DIO_enumSetPortValue+0x84>
		{
		case DIO_PORTA: PORTA_REG=Copy_u8Value; break;
    4708:	eb e3       	ldi	r30, 0x3B	; 59
    470a:	f0 e0       	ldi	r31, 0x00	; 0
    470c:	8b 81       	ldd	r24, Y+3	; 0x03
    470e:	80 83       	st	Z, r24
    4710:	10 c0       	rjmp	.+32     	; 0x4732 <DIO_enumSetPortValue+0x84>
		case DIO_PORTB: PORTB_REG=Copy_u8Value; break;
    4712:	e8 e3       	ldi	r30, 0x38	; 56
    4714:	f0 e0       	ldi	r31, 0x00	; 0
    4716:	8b 81       	ldd	r24, Y+3	; 0x03
    4718:	80 83       	st	Z, r24
    471a:	0b c0       	rjmp	.+22     	; 0x4732 <DIO_enumSetPortValue+0x84>
		case DIO_PORTC: PORTC_REG=Copy_u8Value; break;
    471c:	e5 e3       	ldi	r30, 0x35	; 53
    471e:	f0 e0       	ldi	r31, 0x00	; 0
    4720:	8b 81       	ldd	r24, Y+3	; 0x03
    4722:	80 83       	st	Z, r24
    4724:	06 c0       	rjmp	.+12     	; 0x4732 <DIO_enumSetPortValue+0x84>
		case DIO_PORTD: PORTD_REG=Copy_u8Value; break;
    4726:	e2 e3       	ldi	r30, 0x32	; 50
    4728:	f0 e0       	ldi	r31, 0x00	; 0
    472a:	8b 81       	ldd	r24, Y+3	; 0x03
    472c:	80 83       	st	Z, r24
    472e:	01 c0       	rjmp	.+2      	; 0x4732 <DIO_enumSetPortValue+0x84>
		}
	}
	else
	{
		Local_enumErrorState= DIO_NOK;
    4730:	19 82       	std	Y+1, r1	; 0x01
	}


	return Local_enumErrorState;
    4732:	89 81       	ldd	r24, Y+1	; 0x01
}
    4734:	0f 90       	pop	r0
    4736:	0f 90       	pop	r0
    4738:	0f 90       	pop	r0
    473a:	0f 90       	pop	r0
    473c:	0f 90       	pop	r0
    473e:	cf 91       	pop	r28
    4740:	df 91       	pop	r29
    4742:	08 95       	ret

00004744 <DIO_enumTogglePortValue>:


DIO_ErrorStatus DIO_enumTogglePortValue( u8 Copy_u8Port )
{
    4744:	df 93       	push	r29
    4746:	cf 93       	push	r28
    4748:	00 d0       	rcall	.+0      	; 0x474a <DIO_enumTogglePortValue+0x6>
    474a:	00 d0       	rcall	.+0      	; 0x474c <DIO_enumTogglePortValue+0x8>
    474c:	cd b7       	in	r28, 0x3d	; 61
    474e:	de b7       	in	r29, 0x3e	; 62
    4750:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    4752:	81 e0       	ldi	r24, 0x01	; 1
    4754:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Port <= DIO_PORTD)
    4756:	8a 81       	ldd	r24, Y+2	; 0x02
    4758:	84 30       	cpi	r24, 0x04	; 4
    475a:	08 f0       	brcs	.+2      	; 0x475e <DIO_enumTogglePortValue+0x1a>
    475c:	3f c0       	rjmp	.+126    	; 0x47dc <DIO_enumTogglePortValue+0x98>
	{
		switch(Copy_u8Port)
    475e:	8a 81       	ldd	r24, Y+2	; 0x02
    4760:	28 2f       	mov	r18, r24
    4762:	30 e0       	ldi	r19, 0x00	; 0
    4764:	3c 83       	std	Y+4, r19	; 0x04
    4766:	2b 83       	std	Y+3, r18	; 0x03
    4768:	8b 81       	ldd	r24, Y+3	; 0x03
    476a:	9c 81       	ldd	r25, Y+4	; 0x04
    476c:	81 30       	cpi	r24, 0x01	; 1
    476e:	91 05       	cpc	r25, r1
    4770:	e9 f0       	breq	.+58     	; 0x47ac <DIO_enumTogglePortValue+0x68>
    4772:	2b 81       	ldd	r18, Y+3	; 0x03
    4774:	3c 81       	ldd	r19, Y+4	; 0x04
    4776:	22 30       	cpi	r18, 0x02	; 2
    4778:	31 05       	cpc	r19, r1
    477a:	2c f4       	brge	.+10     	; 0x4786 <DIO_enumTogglePortValue+0x42>
    477c:	8b 81       	ldd	r24, Y+3	; 0x03
    477e:	9c 81       	ldd	r25, Y+4	; 0x04
    4780:	00 97       	sbiw	r24, 0x00	; 0
    4782:	61 f0       	breq	.+24     	; 0x479c <DIO_enumTogglePortValue+0x58>
    4784:	2c c0       	rjmp	.+88     	; 0x47de <DIO_enumTogglePortValue+0x9a>
    4786:	2b 81       	ldd	r18, Y+3	; 0x03
    4788:	3c 81       	ldd	r19, Y+4	; 0x04
    478a:	22 30       	cpi	r18, 0x02	; 2
    478c:	31 05       	cpc	r19, r1
    478e:	b1 f0       	breq	.+44     	; 0x47bc <DIO_enumTogglePortValue+0x78>
    4790:	8b 81       	ldd	r24, Y+3	; 0x03
    4792:	9c 81       	ldd	r25, Y+4	; 0x04
    4794:	83 30       	cpi	r24, 0x03	; 3
    4796:	91 05       	cpc	r25, r1
    4798:	c9 f0       	breq	.+50     	; 0x47cc <DIO_enumTogglePortValue+0x88>
    479a:	21 c0       	rjmp	.+66     	; 0x47de <DIO_enumTogglePortValue+0x9a>
		{
		case DIO_PORTA: TOGGLE_REG(PORTA_REG); break;
    479c:	ab e3       	ldi	r26, 0x3B	; 59
    479e:	b0 e0       	ldi	r27, 0x00	; 0
    47a0:	eb e3       	ldi	r30, 0x3B	; 59
    47a2:	f0 e0       	ldi	r31, 0x00	; 0
    47a4:	80 81       	ld	r24, Z
    47a6:	80 95       	com	r24
    47a8:	8c 93       	st	X, r24
    47aa:	19 c0       	rjmp	.+50     	; 0x47de <DIO_enumTogglePortValue+0x9a>
		case DIO_PORTB: TOGGLE_REG(PORTB_REG); break;
    47ac:	a8 e3       	ldi	r26, 0x38	; 56
    47ae:	b0 e0       	ldi	r27, 0x00	; 0
    47b0:	e8 e3       	ldi	r30, 0x38	; 56
    47b2:	f0 e0       	ldi	r31, 0x00	; 0
    47b4:	80 81       	ld	r24, Z
    47b6:	80 95       	com	r24
    47b8:	8c 93       	st	X, r24
    47ba:	11 c0       	rjmp	.+34     	; 0x47de <DIO_enumTogglePortValue+0x9a>
		case DIO_PORTC: TOGGLE_REG(PORTC_REG); break;
    47bc:	a5 e3       	ldi	r26, 0x35	; 53
    47be:	b0 e0       	ldi	r27, 0x00	; 0
    47c0:	e5 e3       	ldi	r30, 0x35	; 53
    47c2:	f0 e0       	ldi	r31, 0x00	; 0
    47c4:	80 81       	ld	r24, Z
    47c6:	80 95       	com	r24
    47c8:	8c 93       	st	X, r24
    47ca:	09 c0       	rjmp	.+18     	; 0x47de <DIO_enumTogglePortValue+0x9a>
		case DIO_PORTD: TOGGLE_REG(PORTD_REG); break;
    47cc:	a2 e3       	ldi	r26, 0x32	; 50
    47ce:	b0 e0       	ldi	r27, 0x00	; 0
    47d0:	e2 e3       	ldi	r30, 0x32	; 50
    47d2:	f0 e0       	ldi	r31, 0x00	; 0
    47d4:	80 81       	ld	r24, Z
    47d6:	80 95       	com	r24
    47d8:	8c 93       	st	X, r24
    47da:	01 c0       	rjmp	.+2      	; 0x47de <DIO_enumTogglePortValue+0x9a>
		}
	}

	else
	{
		Local_enumErrorState= DIO_NOK;
    47dc:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enumErrorState;
    47de:	89 81       	ldd	r24, Y+1	; 0x01

}
    47e0:	0f 90       	pop	r0
    47e2:	0f 90       	pop	r0
    47e4:	0f 90       	pop	r0
    47e6:	0f 90       	pop	r0
    47e8:	cf 91       	pop	r28
    47ea:	df 91       	pop	r29
    47ec:	08 95       	ret

000047ee <DIO_enumSetHighNibbleDirection>:

DIO_ErrorStatus DIO_enumSetHighNibbleDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
    47ee:	df 93       	push	r29
    47f0:	cf 93       	push	r28
    47f2:	cd b7       	in	r28, 0x3d	; 61
    47f4:	de b7       	in	r29, 0x3e	; 62
    47f6:	27 97       	sbiw	r28, 0x07	; 7
    47f8:	0f b6       	in	r0, 0x3f	; 63
    47fa:	f8 94       	cli
    47fc:	de bf       	out	0x3e, r29	; 62
    47fe:	0f be       	out	0x3f, r0	; 63
    4800:	cd bf       	out	0x3d, r28	; 61
    4802:	8a 83       	std	Y+2, r24	; 0x02
    4804:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    4806:	81 e0       	ldi	r24, 0x01	; 1
    4808:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Port <= DIO_PORTD)
    480a:	8a 81       	ldd	r24, Y+2	; 0x02
    480c:	84 30       	cpi	r24, 0x04	; 4
    480e:	08 f0       	brcs	.+2      	; 0x4812 <DIO_enumSetHighNibbleDirection+0x24>
    4810:	88 c0       	rjmp	.+272    	; 0x4922 <DIO_enumSetHighNibbleDirection+0x134>
	{
		if (Copy_u8Direction == DIO_PORT_OUTPUT)
    4812:	8b 81       	ldd	r24, Y+3	; 0x03
    4814:	8f 3f       	cpi	r24, 0xFF	; 255
    4816:	09 f0       	breq	.+2      	; 0x481a <DIO_enumSetHighNibbleDirection+0x2c>
    4818:	3f c0       	rjmp	.+126    	; 0x4898 <DIO_enumSetHighNibbleDirection+0xaa>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    481a:	8a 81       	ldd	r24, Y+2	; 0x02
    481c:	28 2f       	mov	r18, r24
    481e:	30 e0       	ldi	r19, 0x00	; 0
    4820:	3f 83       	std	Y+7, r19	; 0x07
    4822:	2e 83       	std	Y+6, r18	; 0x06
    4824:	8e 81       	ldd	r24, Y+6	; 0x06
    4826:	9f 81       	ldd	r25, Y+7	; 0x07
    4828:	81 30       	cpi	r24, 0x01	; 1
    482a:	91 05       	cpc	r25, r1
    482c:	e9 f0       	breq	.+58     	; 0x4868 <DIO_enumSetHighNibbleDirection+0x7a>
    482e:	2e 81       	ldd	r18, Y+6	; 0x06
    4830:	3f 81       	ldd	r19, Y+7	; 0x07
    4832:	22 30       	cpi	r18, 0x02	; 2
    4834:	31 05       	cpc	r19, r1
    4836:	2c f4       	brge	.+10     	; 0x4842 <DIO_enumSetHighNibbleDirection+0x54>
    4838:	8e 81       	ldd	r24, Y+6	; 0x06
    483a:	9f 81       	ldd	r25, Y+7	; 0x07
    483c:	00 97       	sbiw	r24, 0x00	; 0
    483e:	61 f0       	breq	.+24     	; 0x4858 <DIO_enumSetHighNibbleDirection+0x6a>
    4840:	71 c0       	rjmp	.+226    	; 0x4924 <DIO_enumSetHighNibbleDirection+0x136>
    4842:	2e 81       	ldd	r18, Y+6	; 0x06
    4844:	3f 81       	ldd	r19, Y+7	; 0x07
    4846:	22 30       	cpi	r18, 0x02	; 2
    4848:	31 05       	cpc	r19, r1
    484a:	b1 f0       	breq	.+44     	; 0x4878 <DIO_enumSetHighNibbleDirection+0x8a>
    484c:	8e 81       	ldd	r24, Y+6	; 0x06
    484e:	9f 81       	ldd	r25, Y+7	; 0x07
    4850:	83 30       	cpi	r24, 0x03	; 3
    4852:	91 05       	cpc	r25, r1
    4854:	c9 f0       	breq	.+50     	; 0x4888 <DIO_enumSetHighNibbleDirection+0x9a>
    4856:	66 c0       	rjmp	.+204    	; 0x4924 <DIO_enumSetHighNibbleDirection+0x136>
			{
			case DIO_PORTA: SET_HIGH_NIB(DDRA_REG); break ;
    4858:	aa e3       	ldi	r26, 0x3A	; 58
    485a:	b0 e0       	ldi	r27, 0x00	; 0
    485c:	ea e3       	ldi	r30, 0x3A	; 58
    485e:	f0 e0       	ldi	r31, 0x00	; 0
    4860:	80 81       	ld	r24, Z
    4862:	80 6f       	ori	r24, 0xF0	; 240
    4864:	8c 93       	st	X, r24
    4866:	5e c0       	rjmp	.+188    	; 0x4924 <DIO_enumSetHighNibbleDirection+0x136>
			case DIO_PORTB: SET_HIGH_NIB(DDRB_REG); break ;
    4868:	a7 e3       	ldi	r26, 0x37	; 55
    486a:	b0 e0       	ldi	r27, 0x00	; 0
    486c:	e7 e3       	ldi	r30, 0x37	; 55
    486e:	f0 e0       	ldi	r31, 0x00	; 0
    4870:	80 81       	ld	r24, Z
    4872:	80 6f       	ori	r24, 0xF0	; 240
    4874:	8c 93       	st	X, r24
    4876:	56 c0       	rjmp	.+172    	; 0x4924 <DIO_enumSetHighNibbleDirection+0x136>
			case DIO_PORTC: SET_HIGH_NIB(DDRC_REG); break ;
    4878:	a4 e3       	ldi	r26, 0x34	; 52
    487a:	b0 e0       	ldi	r27, 0x00	; 0
    487c:	e4 e3       	ldi	r30, 0x34	; 52
    487e:	f0 e0       	ldi	r31, 0x00	; 0
    4880:	80 81       	ld	r24, Z
    4882:	80 6f       	ori	r24, 0xF0	; 240
    4884:	8c 93       	st	X, r24
    4886:	4e c0       	rjmp	.+156    	; 0x4924 <DIO_enumSetHighNibbleDirection+0x136>
			case DIO_PORTD: SET_HIGH_NIB(DDRD_REG); break ;
    4888:	a1 e3       	ldi	r26, 0x31	; 49
    488a:	b0 e0       	ldi	r27, 0x00	; 0
    488c:	e1 e3       	ldi	r30, 0x31	; 49
    488e:	f0 e0       	ldi	r31, 0x00	; 0
    4890:	80 81       	ld	r24, Z
    4892:	80 6f       	ori	r24, 0xF0	; 240
    4894:	8c 93       	st	X, r24
    4896:	46 c0       	rjmp	.+140    	; 0x4924 <DIO_enumSetHighNibbleDirection+0x136>
			}


		}
		else if (Copy_u8Direction == DIO_PORT_INPUT)
    4898:	8b 81       	ldd	r24, Y+3	; 0x03
    489a:	88 23       	and	r24, r24
    489c:	09 f0       	breq	.+2      	; 0x48a0 <DIO_enumSetHighNibbleDirection+0xb2>
    489e:	3f c0       	rjmp	.+126    	; 0x491e <DIO_enumSetHighNibbleDirection+0x130>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    48a0:	8a 81       	ldd	r24, Y+2	; 0x02
    48a2:	28 2f       	mov	r18, r24
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	3d 83       	std	Y+5, r19	; 0x05
    48a8:	2c 83       	std	Y+4, r18	; 0x04
    48aa:	8c 81       	ldd	r24, Y+4	; 0x04
    48ac:	9d 81       	ldd	r25, Y+5	; 0x05
    48ae:	81 30       	cpi	r24, 0x01	; 1
    48b0:	91 05       	cpc	r25, r1
    48b2:	e9 f0       	breq	.+58     	; 0x48ee <DIO_enumSetHighNibbleDirection+0x100>
    48b4:	2c 81       	ldd	r18, Y+4	; 0x04
    48b6:	3d 81       	ldd	r19, Y+5	; 0x05
    48b8:	22 30       	cpi	r18, 0x02	; 2
    48ba:	31 05       	cpc	r19, r1
    48bc:	2c f4       	brge	.+10     	; 0x48c8 <DIO_enumSetHighNibbleDirection+0xda>
    48be:	8c 81       	ldd	r24, Y+4	; 0x04
    48c0:	9d 81       	ldd	r25, Y+5	; 0x05
    48c2:	00 97       	sbiw	r24, 0x00	; 0
    48c4:	61 f0       	breq	.+24     	; 0x48de <DIO_enumSetHighNibbleDirection+0xf0>
    48c6:	2e c0       	rjmp	.+92     	; 0x4924 <DIO_enumSetHighNibbleDirection+0x136>
    48c8:	2c 81       	ldd	r18, Y+4	; 0x04
    48ca:	3d 81       	ldd	r19, Y+5	; 0x05
    48cc:	22 30       	cpi	r18, 0x02	; 2
    48ce:	31 05       	cpc	r19, r1
    48d0:	b1 f0       	breq	.+44     	; 0x48fe <DIO_enumSetHighNibbleDirection+0x110>
    48d2:	8c 81       	ldd	r24, Y+4	; 0x04
    48d4:	9d 81       	ldd	r25, Y+5	; 0x05
    48d6:	83 30       	cpi	r24, 0x03	; 3
    48d8:	91 05       	cpc	r25, r1
    48da:	c9 f0       	breq	.+50     	; 0x490e <DIO_enumSetHighNibbleDirection+0x120>
    48dc:	23 c0       	rjmp	.+70     	; 0x4924 <DIO_enumSetHighNibbleDirection+0x136>
			{
			case DIO_PORTA: CLR_HIGH_NIB(DDRA_REG); break ;
    48de:	aa e3       	ldi	r26, 0x3A	; 58
    48e0:	b0 e0       	ldi	r27, 0x00	; 0
    48e2:	ea e3       	ldi	r30, 0x3A	; 58
    48e4:	f0 e0       	ldi	r31, 0x00	; 0
    48e6:	80 81       	ld	r24, Z
    48e8:	8f 70       	andi	r24, 0x0F	; 15
    48ea:	8c 93       	st	X, r24
    48ec:	1b c0       	rjmp	.+54     	; 0x4924 <DIO_enumSetHighNibbleDirection+0x136>
			case DIO_PORTB: CLR_HIGH_NIB(DDRB_REG); break ;
    48ee:	a7 e3       	ldi	r26, 0x37	; 55
    48f0:	b0 e0       	ldi	r27, 0x00	; 0
    48f2:	e7 e3       	ldi	r30, 0x37	; 55
    48f4:	f0 e0       	ldi	r31, 0x00	; 0
    48f6:	80 81       	ld	r24, Z
    48f8:	8f 70       	andi	r24, 0x0F	; 15
    48fa:	8c 93       	st	X, r24
    48fc:	13 c0       	rjmp	.+38     	; 0x4924 <DIO_enumSetHighNibbleDirection+0x136>
			case DIO_PORTC: CLR_HIGH_NIB(DDRC_REG); break ;
    48fe:	a4 e3       	ldi	r26, 0x34	; 52
    4900:	b0 e0       	ldi	r27, 0x00	; 0
    4902:	e4 e3       	ldi	r30, 0x34	; 52
    4904:	f0 e0       	ldi	r31, 0x00	; 0
    4906:	80 81       	ld	r24, Z
    4908:	8f 70       	andi	r24, 0x0F	; 15
    490a:	8c 93       	st	X, r24
    490c:	0b c0       	rjmp	.+22     	; 0x4924 <DIO_enumSetHighNibbleDirection+0x136>
			case DIO_PORTD: CLR_HIGH_NIB(DDRD_REG); break ;
    490e:	a1 e3       	ldi	r26, 0x31	; 49
    4910:	b0 e0       	ldi	r27, 0x00	; 0
    4912:	e1 e3       	ldi	r30, 0x31	; 49
    4914:	f0 e0       	ldi	r31, 0x00	; 0
    4916:	80 81       	ld	r24, Z
    4918:	8f 70       	andi	r24, 0x0F	; 15
    491a:	8c 93       	st	X, r24
    491c:	03 c0       	rjmp	.+6      	; 0x4924 <DIO_enumSetHighNibbleDirection+0x136>
			}
		}
		else
		{
			Local_enumErrorState= DIO_NOK;
    491e:	19 82       	std	Y+1, r1	; 0x01
    4920:	01 c0       	rjmp	.+2      	; 0x4924 <DIO_enumSetHighNibbleDirection+0x136>

	}

	else
	{
		Local_enumErrorState= DIO_NOK;
    4922:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enumErrorState;
    4924:	89 81       	ldd	r24, Y+1	; 0x01
}
    4926:	27 96       	adiw	r28, 0x07	; 7
    4928:	0f b6       	in	r0, 0x3f	; 63
    492a:	f8 94       	cli
    492c:	de bf       	out	0x3e, r29	; 62
    492e:	0f be       	out	0x3f, r0	; 63
    4930:	cd bf       	out	0x3d, r28	; 61
    4932:	cf 91       	pop	r28
    4934:	df 91       	pop	r29
    4936:	08 95       	ret

00004938 <DIO_enumSetHighNibbleValue>:



DIO_ErrorStatus DIO_enumSetHighNibbleValue(u8  Copy_u8Port  , u8 Copy_u8Value)
{
    4938:	df 93       	push	r29
    493a:	cf 93       	push	r28
    493c:	cd b7       	in	r28, 0x3d	; 61
    493e:	de b7       	in	r29, 0x3e	; 62
    4940:	27 97       	sbiw	r28, 0x07	; 7
    4942:	0f b6       	in	r0, 0x3f	; 63
    4944:	f8 94       	cli
    4946:	de bf       	out	0x3e, r29	; 62
    4948:	0f be       	out	0x3f, r0	; 63
    494a:	cd bf       	out	0x3d, r28	; 61
    494c:	8a 83       	std	Y+2, r24	; 0x02
    494e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    4950:	81 e0       	ldi	r24, 0x01	; 1
    4952:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Port <= DIO_PORTD)
    4954:	8a 81       	ldd	r24, Y+2	; 0x02
    4956:	84 30       	cpi	r24, 0x04	; 4
    4958:	08 f0       	brcs	.+2      	; 0x495c <DIO_enumSetHighNibbleValue+0x24>
    495a:	a8 c0       	rjmp	.+336    	; 0x4aac <DIO_enumSetHighNibbleValue+0x174>
	{

		if (Copy_u8Value == DIO_PORT_HIGH)
    495c:	8b 81       	ldd	r24, Y+3	; 0x03
    495e:	8f 3f       	cpi	r24, 0xFF	; 255
    4960:	09 f0       	breq	.+2      	; 0x4964 <DIO_enumSetHighNibbleValue+0x2c>
    4962:	4f c0       	rjmp	.+158    	; 0x4a02 <DIO_enumSetHighNibbleValue+0xca>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    4964:	8a 81       	ldd	r24, Y+2	; 0x02
    4966:	28 2f       	mov	r18, r24
    4968:	30 e0       	ldi	r19, 0x00	; 0
    496a:	3f 83       	std	Y+7, r19	; 0x07
    496c:	2e 83       	std	Y+6, r18	; 0x06
    496e:	8e 81       	ldd	r24, Y+6	; 0x06
    4970:	9f 81       	ldd	r25, Y+7	; 0x07
    4972:	81 30       	cpi	r24, 0x01	; 1
    4974:	91 05       	cpc	r25, r1
    4976:	09 f1       	breq	.+66     	; 0x49ba <DIO_enumSetHighNibbleValue+0x82>
    4978:	2e 81       	ldd	r18, Y+6	; 0x06
    497a:	3f 81       	ldd	r19, Y+7	; 0x07
    497c:	22 30       	cpi	r18, 0x02	; 2
    497e:	31 05       	cpc	r19, r1
    4980:	2c f4       	brge	.+10     	; 0x498c <DIO_enumSetHighNibbleValue+0x54>
    4982:	8e 81       	ldd	r24, Y+6	; 0x06
    4984:	9f 81       	ldd	r25, Y+7	; 0x07
    4986:	00 97       	sbiw	r24, 0x00	; 0
    4988:	61 f0       	breq	.+24     	; 0x49a2 <DIO_enumSetHighNibbleValue+0x6a>
    498a:	91 c0       	rjmp	.+290    	; 0x4aae <DIO_enumSetHighNibbleValue+0x176>
    498c:	2e 81       	ldd	r18, Y+6	; 0x06
    498e:	3f 81       	ldd	r19, Y+7	; 0x07
    4990:	22 30       	cpi	r18, 0x02	; 2
    4992:	31 05       	cpc	r19, r1
    4994:	f1 f0       	breq	.+60     	; 0x49d2 <DIO_enumSetHighNibbleValue+0x9a>
    4996:	8e 81       	ldd	r24, Y+6	; 0x06
    4998:	9f 81       	ldd	r25, Y+7	; 0x07
    499a:	83 30       	cpi	r24, 0x03	; 3
    499c:	91 05       	cpc	r25, r1
    499e:	29 f1       	breq	.+74     	; 0x49ea <DIO_enumSetHighNibbleValue+0xb2>
    49a0:	86 c0       	rjmp	.+268    	; 0x4aae <DIO_enumSetHighNibbleValue+0x176>
			{
			case DIO_PORTA: ASSIGN_HIGH_NIB(PORTA_REG,Copy_u8Value); break ;
    49a2:	ab e3       	ldi	r26, 0x3B	; 59
    49a4:	b0 e0       	ldi	r27, 0x00	; 0
    49a6:	eb e3       	ldi	r30, 0x3B	; 59
    49a8:	f0 e0       	ldi	r31, 0x00	; 0
    49aa:	80 81       	ld	r24, Z
    49ac:	98 2f       	mov	r25, r24
    49ae:	9f 70       	andi	r25, 0x0F	; 15
    49b0:	8b 81       	ldd	r24, Y+3	; 0x03
    49b2:	80 7f       	andi	r24, 0xF0	; 240
    49b4:	89 2b       	or	r24, r25
    49b6:	8c 93       	st	X, r24
    49b8:	7a c0       	rjmp	.+244    	; 0x4aae <DIO_enumSetHighNibbleValue+0x176>
			case DIO_PORTB: ASSIGN_HIGH_NIB(PORTB_REG,Copy_u8Value); break ;
    49ba:	a8 e3       	ldi	r26, 0x38	; 56
    49bc:	b0 e0       	ldi	r27, 0x00	; 0
    49be:	e8 e3       	ldi	r30, 0x38	; 56
    49c0:	f0 e0       	ldi	r31, 0x00	; 0
    49c2:	80 81       	ld	r24, Z
    49c4:	98 2f       	mov	r25, r24
    49c6:	9f 70       	andi	r25, 0x0F	; 15
    49c8:	8b 81       	ldd	r24, Y+3	; 0x03
    49ca:	80 7f       	andi	r24, 0xF0	; 240
    49cc:	89 2b       	or	r24, r25
    49ce:	8c 93       	st	X, r24
    49d0:	6e c0       	rjmp	.+220    	; 0x4aae <DIO_enumSetHighNibbleValue+0x176>
			case DIO_PORTC: ASSIGN_HIGH_NIB(PORTC_REG,Copy_u8Value); break ;
    49d2:	a5 e3       	ldi	r26, 0x35	; 53
    49d4:	b0 e0       	ldi	r27, 0x00	; 0
    49d6:	e5 e3       	ldi	r30, 0x35	; 53
    49d8:	f0 e0       	ldi	r31, 0x00	; 0
    49da:	80 81       	ld	r24, Z
    49dc:	98 2f       	mov	r25, r24
    49de:	9f 70       	andi	r25, 0x0F	; 15
    49e0:	8b 81       	ldd	r24, Y+3	; 0x03
    49e2:	80 7f       	andi	r24, 0xF0	; 240
    49e4:	89 2b       	or	r24, r25
    49e6:	8c 93       	st	X, r24
    49e8:	62 c0       	rjmp	.+196    	; 0x4aae <DIO_enumSetHighNibbleValue+0x176>
			case DIO_PORTD: ASSIGN_HIGH_NIB(PORTD_REG,Copy_u8Value); break ;
    49ea:	a2 e3       	ldi	r26, 0x32	; 50
    49ec:	b0 e0       	ldi	r27, 0x00	; 0
    49ee:	e2 e3       	ldi	r30, 0x32	; 50
    49f0:	f0 e0       	ldi	r31, 0x00	; 0
    49f2:	80 81       	ld	r24, Z
    49f4:	98 2f       	mov	r25, r24
    49f6:	9f 70       	andi	r25, 0x0F	; 15
    49f8:	8b 81       	ldd	r24, Y+3	; 0x03
    49fa:	80 7f       	andi	r24, 0xF0	; 240
    49fc:	89 2b       	or	r24, r25
    49fe:	8c 93       	st	X, r24
    4a00:	56 c0       	rjmp	.+172    	; 0x4aae <DIO_enumSetHighNibbleValue+0x176>
			}
		}

		else if (Copy_u8Value == DIO_PORT_LOW)
    4a02:	8b 81       	ldd	r24, Y+3	; 0x03
    4a04:	88 23       	and	r24, r24
    4a06:	09 f0       	breq	.+2      	; 0x4a0a <DIO_enumSetHighNibbleValue+0xd2>
    4a08:	4f c0       	rjmp	.+158    	; 0x4aa8 <DIO_enumSetHighNibbleValue+0x170>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    4a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a0c:	28 2f       	mov	r18, r24
    4a0e:	30 e0       	ldi	r19, 0x00	; 0
    4a10:	3d 83       	std	Y+5, r19	; 0x05
    4a12:	2c 83       	std	Y+4, r18	; 0x04
    4a14:	8c 81       	ldd	r24, Y+4	; 0x04
    4a16:	9d 81       	ldd	r25, Y+5	; 0x05
    4a18:	81 30       	cpi	r24, 0x01	; 1
    4a1a:	91 05       	cpc	r25, r1
    4a1c:	09 f1       	breq	.+66     	; 0x4a60 <DIO_enumSetHighNibbleValue+0x128>
    4a1e:	2c 81       	ldd	r18, Y+4	; 0x04
    4a20:	3d 81       	ldd	r19, Y+5	; 0x05
    4a22:	22 30       	cpi	r18, 0x02	; 2
    4a24:	31 05       	cpc	r19, r1
    4a26:	2c f4       	brge	.+10     	; 0x4a32 <DIO_enumSetHighNibbleValue+0xfa>
    4a28:	8c 81       	ldd	r24, Y+4	; 0x04
    4a2a:	9d 81       	ldd	r25, Y+5	; 0x05
    4a2c:	00 97       	sbiw	r24, 0x00	; 0
    4a2e:	61 f0       	breq	.+24     	; 0x4a48 <DIO_enumSetHighNibbleValue+0x110>
    4a30:	3e c0       	rjmp	.+124    	; 0x4aae <DIO_enumSetHighNibbleValue+0x176>
    4a32:	2c 81       	ldd	r18, Y+4	; 0x04
    4a34:	3d 81       	ldd	r19, Y+5	; 0x05
    4a36:	22 30       	cpi	r18, 0x02	; 2
    4a38:	31 05       	cpc	r19, r1
    4a3a:	f1 f0       	breq	.+60     	; 0x4a78 <DIO_enumSetHighNibbleValue+0x140>
    4a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    4a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    4a40:	83 30       	cpi	r24, 0x03	; 3
    4a42:	91 05       	cpc	r25, r1
    4a44:	29 f1       	breq	.+74     	; 0x4a90 <DIO_enumSetHighNibbleValue+0x158>
    4a46:	33 c0       	rjmp	.+102    	; 0x4aae <DIO_enumSetHighNibbleValue+0x176>
			{
			case DIO_PORTA: ASSIGN_HIGH_NIB(PORTA_REG,Copy_u8Value); break ;
    4a48:	ab e3       	ldi	r26, 0x3B	; 59
    4a4a:	b0 e0       	ldi	r27, 0x00	; 0
    4a4c:	eb e3       	ldi	r30, 0x3B	; 59
    4a4e:	f0 e0       	ldi	r31, 0x00	; 0
    4a50:	80 81       	ld	r24, Z
    4a52:	98 2f       	mov	r25, r24
    4a54:	9f 70       	andi	r25, 0x0F	; 15
    4a56:	8b 81       	ldd	r24, Y+3	; 0x03
    4a58:	80 7f       	andi	r24, 0xF0	; 240
    4a5a:	89 2b       	or	r24, r25
    4a5c:	8c 93       	st	X, r24
    4a5e:	27 c0       	rjmp	.+78     	; 0x4aae <DIO_enumSetHighNibbleValue+0x176>
			case DIO_PORTB: ASSIGN_HIGH_NIB(PORTB_REG,Copy_u8Value); break ;
    4a60:	a8 e3       	ldi	r26, 0x38	; 56
    4a62:	b0 e0       	ldi	r27, 0x00	; 0
    4a64:	e8 e3       	ldi	r30, 0x38	; 56
    4a66:	f0 e0       	ldi	r31, 0x00	; 0
    4a68:	80 81       	ld	r24, Z
    4a6a:	98 2f       	mov	r25, r24
    4a6c:	9f 70       	andi	r25, 0x0F	; 15
    4a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a70:	80 7f       	andi	r24, 0xF0	; 240
    4a72:	89 2b       	or	r24, r25
    4a74:	8c 93       	st	X, r24
    4a76:	1b c0       	rjmp	.+54     	; 0x4aae <DIO_enumSetHighNibbleValue+0x176>
			case DIO_PORTC: ASSIGN_HIGH_NIB(PORTC_REG,Copy_u8Value); break ;
    4a78:	a5 e3       	ldi	r26, 0x35	; 53
    4a7a:	b0 e0       	ldi	r27, 0x00	; 0
    4a7c:	e5 e3       	ldi	r30, 0x35	; 53
    4a7e:	f0 e0       	ldi	r31, 0x00	; 0
    4a80:	80 81       	ld	r24, Z
    4a82:	98 2f       	mov	r25, r24
    4a84:	9f 70       	andi	r25, 0x0F	; 15
    4a86:	8b 81       	ldd	r24, Y+3	; 0x03
    4a88:	80 7f       	andi	r24, 0xF0	; 240
    4a8a:	89 2b       	or	r24, r25
    4a8c:	8c 93       	st	X, r24
    4a8e:	0f c0       	rjmp	.+30     	; 0x4aae <DIO_enumSetHighNibbleValue+0x176>
			case DIO_PORTD: ASSIGN_HIGH_NIB(PORTD_REG,Copy_u8Value); break ;
    4a90:	a2 e3       	ldi	r26, 0x32	; 50
    4a92:	b0 e0       	ldi	r27, 0x00	; 0
    4a94:	e2 e3       	ldi	r30, 0x32	; 50
    4a96:	f0 e0       	ldi	r31, 0x00	; 0
    4a98:	80 81       	ld	r24, Z
    4a9a:	98 2f       	mov	r25, r24
    4a9c:	9f 70       	andi	r25, 0x0F	; 15
    4a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    4aa0:	80 7f       	andi	r24, 0xF0	; 240
    4aa2:	89 2b       	or	r24, r25
    4aa4:	8c 93       	st	X, r24
    4aa6:	03 c0       	rjmp	.+6      	; 0x4aae <DIO_enumSetHighNibbleValue+0x176>
			}
		}
		else
		{
			Local_enumErrorState = DIO_NOK;
    4aa8:	19 82       	std	Y+1, r1	; 0x01
    4aaa:	01 c0       	rjmp	.+2      	; 0x4aae <DIO_enumSetHighNibbleValue+0x176>
	}


	else
	{
		Local_enumErrorState= DIO_NOK;
    4aac:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enumErrorState;
    4aae:	89 81       	ldd	r24, Y+1	; 0x01
}
    4ab0:	27 96       	adiw	r28, 0x07	; 7
    4ab2:	0f b6       	in	r0, 0x3f	; 63
    4ab4:	f8 94       	cli
    4ab6:	de bf       	out	0x3e, r29	; 62
    4ab8:	0f be       	out	0x3f, r0	; 63
    4aba:	cd bf       	out	0x3d, r28	; 61
    4abc:	cf 91       	pop	r28
    4abe:	df 91       	pop	r29
    4ac0:	08 95       	ret

00004ac2 <DIO_enumSetLowNibbleDirection>:



DIO_ErrorStatus DIO_enumSetLowNibbleDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
    4ac2:	df 93       	push	r29
    4ac4:	cf 93       	push	r28
    4ac6:	cd b7       	in	r28, 0x3d	; 61
    4ac8:	de b7       	in	r29, 0x3e	; 62
    4aca:	27 97       	sbiw	r28, 0x07	; 7
    4acc:	0f b6       	in	r0, 0x3f	; 63
    4ace:	f8 94       	cli
    4ad0:	de bf       	out	0x3e, r29	; 62
    4ad2:	0f be       	out	0x3f, r0	; 63
    4ad4:	cd bf       	out	0x3d, r28	; 61
    4ad6:	8a 83       	std	Y+2, r24	; 0x02
    4ad8:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    4ada:	81 e0       	ldi	r24, 0x01	; 1
    4adc:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Port <= DIO_PORTD)
    4ade:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae0:	84 30       	cpi	r24, 0x04	; 4
    4ae2:	08 f0       	brcs	.+2      	; 0x4ae6 <DIO_enumSetLowNibbleDirection+0x24>
    4ae4:	88 c0       	rjmp	.+272    	; 0x4bf6 <DIO_enumSetLowNibbleDirection+0x134>
	{
		if (Copy_u8Direction == DIO_PORT_OUTPUT)
    4ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ae8:	8f 3f       	cpi	r24, 0xFF	; 255
    4aea:	09 f0       	breq	.+2      	; 0x4aee <DIO_enumSetLowNibbleDirection+0x2c>
    4aec:	3f c0       	rjmp	.+126    	; 0x4b6c <DIO_enumSetLowNibbleDirection+0xaa>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    4aee:	8a 81       	ldd	r24, Y+2	; 0x02
    4af0:	28 2f       	mov	r18, r24
    4af2:	30 e0       	ldi	r19, 0x00	; 0
    4af4:	3f 83       	std	Y+7, r19	; 0x07
    4af6:	2e 83       	std	Y+6, r18	; 0x06
    4af8:	8e 81       	ldd	r24, Y+6	; 0x06
    4afa:	9f 81       	ldd	r25, Y+7	; 0x07
    4afc:	81 30       	cpi	r24, 0x01	; 1
    4afe:	91 05       	cpc	r25, r1
    4b00:	e9 f0       	breq	.+58     	; 0x4b3c <DIO_enumSetLowNibbleDirection+0x7a>
    4b02:	2e 81       	ldd	r18, Y+6	; 0x06
    4b04:	3f 81       	ldd	r19, Y+7	; 0x07
    4b06:	22 30       	cpi	r18, 0x02	; 2
    4b08:	31 05       	cpc	r19, r1
    4b0a:	2c f4       	brge	.+10     	; 0x4b16 <DIO_enumSetLowNibbleDirection+0x54>
    4b0c:	8e 81       	ldd	r24, Y+6	; 0x06
    4b0e:	9f 81       	ldd	r25, Y+7	; 0x07
    4b10:	00 97       	sbiw	r24, 0x00	; 0
    4b12:	61 f0       	breq	.+24     	; 0x4b2c <DIO_enumSetLowNibbleDirection+0x6a>
    4b14:	71 c0       	rjmp	.+226    	; 0x4bf8 <DIO_enumSetLowNibbleDirection+0x136>
    4b16:	2e 81       	ldd	r18, Y+6	; 0x06
    4b18:	3f 81       	ldd	r19, Y+7	; 0x07
    4b1a:	22 30       	cpi	r18, 0x02	; 2
    4b1c:	31 05       	cpc	r19, r1
    4b1e:	b1 f0       	breq	.+44     	; 0x4b4c <DIO_enumSetLowNibbleDirection+0x8a>
    4b20:	8e 81       	ldd	r24, Y+6	; 0x06
    4b22:	9f 81       	ldd	r25, Y+7	; 0x07
    4b24:	83 30       	cpi	r24, 0x03	; 3
    4b26:	91 05       	cpc	r25, r1
    4b28:	c9 f0       	breq	.+50     	; 0x4b5c <DIO_enumSetLowNibbleDirection+0x9a>
    4b2a:	66 c0       	rjmp	.+204    	; 0x4bf8 <DIO_enumSetLowNibbleDirection+0x136>
			{
			case DIO_PORTA: SET_LOW_NIB(DDRA_REG); break ;
    4b2c:	aa e3       	ldi	r26, 0x3A	; 58
    4b2e:	b0 e0       	ldi	r27, 0x00	; 0
    4b30:	ea e3       	ldi	r30, 0x3A	; 58
    4b32:	f0 e0       	ldi	r31, 0x00	; 0
    4b34:	80 81       	ld	r24, Z
    4b36:	8f 60       	ori	r24, 0x0F	; 15
    4b38:	8c 93       	st	X, r24
    4b3a:	5e c0       	rjmp	.+188    	; 0x4bf8 <DIO_enumSetLowNibbleDirection+0x136>
			case DIO_PORTB: SET_LOW_NIB(DDRB_REG); break ;
    4b3c:	a7 e3       	ldi	r26, 0x37	; 55
    4b3e:	b0 e0       	ldi	r27, 0x00	; 0
    4b40:	e7 e3       	ldi	r30, 0x37	; 55
    4b42:	f0 e0       	ldi	r31, 0x00	; 0
    4b44:	80 81       	ld	r24, Z
    4b46:	8f 60       	ori	r24, 0x0F	; 15
    4b48:	8c 93       	st	X, r24
    4b4a:	56 c0       	rjmp	.+172    	; 0x4bf8 <DIO_enumSetLowNibbleDirection+0x136>
			case DIO_PORTC: SET_LOW_NIB(DDRC_REG); break ;
    4b4c:	a4 e3       	ldi	r26, 0x34	; 52
    4b4e:	b0 e0       	ldi	r27, 0x00	; 0
    4b50:	e4 e3       	ldi	r30, 0x34	; 52
    4b52:	f0 e0       	ldi	r31, 0x00	; 0
    4b54:	80 81       	ld	r24, Z
    4b56:	8f 60       	ori	r24, 0x0F	; 15
    4b58:	8c 93       	st	X, r24
    4b5a:	4e c0       	rjmp	.+156    	; 0x4bf8 <DIO_enumSetLowNibbleDirection+0x136>
			case DIO_PORTD: SET_LOW_NIB(DDRD_REG); break ;
    4b5c:	a1 e3       	ldi	r26, 0x31	; 49
    4b5e:	b0 e0       	ldi	r27, 0x00	; 0
    4b60:	e1 e3       	ldi	r30, 0x31	; 49
    4b62:	f0 e0       	ldi	r31, 0x00	; 0
    4b64:	80 81       	ld	r24, Z
    4b66:	8f 60       	ori	r24, 0x0F	; 15
    4b68:	8c 93       	st	X, r24
    4b6a:	46 c0       	rjmp	.+140    	; 0x4bf8 <DIO_enumSetLowNibbleDirection+0x136>
			}


		}
		else if (Copy_u8Direction == DIO_PORT_INPUT)
    4b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b6e:	88 23       	and	r24, r24
    4b70:	09 f0       	breq	.+2      	; 0x4b74 <DIO_enumSetLowNibbleDirection+0xb2>
    4b72:	3f c0       	rjmp	.+126    	; 0x4bf2 <DIO_enumSetLowNibbleDirection+0x130>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    4b74:	8a 81       	ldd	r24, Y+2	; 0x02
    4b76:	28 2f       	mov	r18, r24
    4b78:	30 e0       	ldi	r19, 0x00	; 0
    4b7a:	3d 83       	std	Y+5, r19	; 0x05
    4b7c:	2c 83       	std	Y+4, r18	; 0x04
    4b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    4b80:	9d 81       	ldd	r25, Y+5	; 0x05
    4b82:	81 30       	cpi	r24, 0x01	; 1
    4b84:	91 05       	cpc	r25, r1
    4b86:	e9 f0       	breq	.+58     	; 0x4bc2 <DIO_enumSetLowNibbleDirection+0x100>
    4b88:	2c 81       	ldd	r18, Y+4	; 0x04
    4b8a:	3d 81       	ldd	r19, Y+5	; 0x05
    4b8c:	22 30       	cpi	r18, 0x02	; 2
    4b8e:	31 05       	cpc	r19, r1
    4b90:	2c f4       	brge	.+10     	; 0x4b9c <DIO_enumSetLowNibbleDirection+0xda>
    4b92:	8c 81       	ldd	r24, Y+4	; 0x04
    4b94:	9d 81       	ldd	r25, Y+5	; 0x05
    4b96:	00 97       	sbiw	r24, 0x00	; 0
    4b98:	61 f0       	breq	.+24     	; 0x4bb2 <DIO_enumSetLowNibbleDirection+0xf0>
    4b9a:	2e c0       	rjmp	.+92     	; 0x4bf8 <DIO_enumSetLowNibbleDirection+0x136>
    4b9c:	2c 81       	ldd	r18, Y+4	; 0x04
    4b9e:	3d 81       	ldd	r19, Y+5	; 0x05
    4ba0:	22 30       	cpi	r18, 0x02	; 2
    4ba2:	31 05       	cpc	r19, r1
    4ba4:	b1 f0       	breq	.+44     	; 0x4bd2 <DIO_enumSetLowNibbleDirection+0x110>
    4ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    4ba8:	9d 81       	ldd	r25, Y+5	; 0x05
    4baa:	83 30       	cpi	r24, 0x03	; 3
    4bac:	91 05       	cpc	r25, r1
    4bae:	c9 f0       	breq	.+50     	; 0x4be2 <DIO_enumSetLowNibbleDirection+0x120>
    4bb0:	23 c0       	rjmp	.+70     	; 0x4bf8 <DIO_enumSetLowNibbleDirection+0x136>
			{
			case DIO_PORTA: CLR_LOW_NIB(DDRA_REG); break ;
    4bb2:	aa e3       	ldi	r26, 0x3A	; 58
    4bb4:	b0 e0       	ldi	r27, 0x00	; 0
    4bb6:	ea e3       	ldi	r30, 0x3A	; 58
    4bb8:	f0 e0       	ldi	r31, 0x00	; 0
    4bba:	80 81       	ld	r24, Z
    4bbc:	80 7f       	andi	r24, 0xF0	; 240
    4bbe:	8c 93       	st	X, r24
    4bc0:	1b c0       	rjmp	.+54     	; 0x4bf8 <DIO_enumSetLowNibbleDirection+0x136>
			case DIO_PORTB: CLR_LOW_NIB(DDRB_REG); break ;
    4bc2:	a7 e3       	ldi	r26, 0x37	; 55
    4bc4:	b0 e0       	ldi	r27, 0x00	; 0
    4bc6:	e7 e3       	ldi	r30, 0x37	; 55
    4bc8:	f0 e0       	ldi	r31, 0x00	; 0
    4bca:	80 81       	ld	r24, Z
    4bcc:	80 7f       	andi	r24, 0xF0	; 240
    4bce:	8c 93       	st	X, r24
    4bd0:	13 c0       	rjmp	.+38     	; 0x4bf8 <DIO_enumSetLowNibbleDirection+0x136>
			case DIO_PORTC: CLR_LOW_NIB(DDRC_REG); break ;
    4bd2:	a4 e3       	ldi	r26, 0x34	; 52
    4bd4:	b0 e0       	ldi	r27, 0x00	; 0
    4bd6:	e4 e3       	ldi	r30, 0x34	; 52
    4bd8:	f0 e0       	ldi	r31, 0x00	; 0
    4bda:	80 81       	ld	r24, Z
    4bdc:	80 7f       	andi	r24, 0xF0	; 240
    4bde:	8c 93       	st	X, r24
    4be0:	0b c0       	rjmp	.+22     	; 0x4bf8 <DIO_enumSetLowNibbleDirection+0x136>
			case DIO_PORTD: CLR_LOW_NIB(DDRD_REG); break ;
    4be2:	a1 e3       	ldi	r26, 0x31	; 49
    4be4:	b0 e0       	ldi	r27, 0x00	; 0
    4be6:	e1 e3       	ldi	r30, 0x31	; 49
    4be8:	f0 e0       	ldi	r31, 0x00	; 0
    4bea:	80 81       	ld	r24, Z
    4bec:	80 7f       	andi	r24, 0xF0	; 240
    4bee:	8c 93       	st	X, r24
    4bf0:	03 c0       	rjmp	.+6      	; 0x4bf8 <DIO_enumSetLowNibbleDirection+0x136>
			}
		}
		else
		{
			Local_enumErrorState= DIO_NOK;
    4bf2:	19 82       	std	Y+1, r1	; 0x01
    4bf4:	01 c0       	rjmp	.+2      	; 0x4bf8 <DIO_enumSetLowNibbleDirection+0x136>

	}

	else
	{
		Local_enumErrorState= DIO_NOK;
    4bf6:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enumErrorState;
    4bf8:	89 81       	ldd	r24, Y+1	; 0x01

}
    4bfa:	27 96       	adiw	r28, 0x07	; 7
    4bfc:	0f b6       	in	r0, 0x3f	; 63
    4bfe:	f8 94       	cli
    4c00:	de bf       	out	0x3e, r29	; 62
    4c02:	0f be       	out	0x3f, r0	; 63
    4c04:	cd bf       	out	0x3d, r28	; 61
    4c06:	cf 91       	pop	r28
    4c08:	df 91       	pop	r29
    4c0a:	08 95       	ret

00004c0c <DIO_enumSetLowNibbleValue>:


DIO_ErrorStatus DIO_enumSetLowNibbleValue(u8  Copy_u8Port , u8 Copy_u8Value)
{
    4c0c:	df 93       	push	r29
    4c0e:	cf 93       	push	r28
    4c10:	cd b7       	in	r28, 0x3d	; 61
    4c12:	de b7       	in	r29, 0x3e	; 62
    4c14:	27 97       	sbiw	r28, 0x07	; 7
    4c16:	0f b6       	in	r0, 0x3f	; 63
    4c18:	f8 94       	cli
    4c1a:	de bf       	out	0x3e, r29	; 62
    4c1c:	0f be       	out	0x3f, r0	; 63
    4c1e:	cd bf       	out	0x3d, r28	; 61
    4c20:	8a 83       	std	Y+2, r24	; 0x02
    4c22:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    4c24:	81 e0       	ldi	r24, 0x01	; 1
    4c26:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Port <= DIO_PORTD)
    4c28:	8a 81       	ldd	r24, Y+2	; 0x02
    4c2a:	84 30       	cpi	r24, 0x04	; 4
    4c2c:	08 f0       	brcs	.+2      	; 0x4c30 <DIO_enumSetLowNibbleValue+0x24>
    4c2e:	a8 c0       	rjmp	.+336    	; 0x4d80 <DIO_enumSetLowNibbleValue+0x174>
	{

		if (Copy_u8Value == DIO_PORT_HIGH)
    4c30:	8b 81       	ldd	r24, Y+3	; 0x03
    4c32:	8f 3f       	cpi	r24, 0xFF	; 255
    4c34:	09 f0       	breq	.+2      	; 0x4c38 <DIO_enumSetLowNibbleValue+0x2c>
    4c36:	4f c0       	rjmp	.+158    	; 0x4cd6 <DIO_enumSetLowNibbleValue+0xca>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    4c38:	8a 81       	ldd	r24, Y+2	; 0x02
    4c3a:	28 2f       	mov	r18, r24
    4c3c:	30 e0       	ldi	r19, 0x00	; 0
    4c3e:	3f 83       	std	Y+7, r19	; 0x07
    4c40:	2e 83       	std	Y+6, r18	; 0x06
    4c42:	8e 81       	ldd	r24, Y+6	; 0x06
    4c44:	9f 81       	ldd	r25, Y+7	; 0x07
    4c46:	81 30       	cpi	r24, 0x01	; 1
    4c48:	91 05       	cpc	r25, r1
    4c4a:	09 f1       	breq	.+66     	; 0x4c8e <DIO_enumSetLowNibbleValue+0x82>
    4c4c:	2e 81       	ldd	r18, Y+6	; 0x06
    4c4e:	3f 81       	ldd	r19, Y+7	; 0x07
    4c50:	22 30       	cpi	r18, 0x02	; 2
    4c52:	31 05       	cpc	r19, r1
    4c54:	2c f4       	brge	.+10     	; 0x4c60 <DIO_enumSetLowNibbleValue+0x54>
    4c56:	8e 81       	ldd	r24, Y+6	; 0x06
    4c58:	9f 81       	ldd	r25, Y+7	; 0x07
    4c5a:	00 97       	sbiw	r24, 0x00	; 0
    4c5c:	61 f0       	breq	.+24     	; 0x4c76 <DIO_enumSetLowNibbleValue+0x6a>
    4c5e:	91 c0       	rjmp	.+290    	; 0x4d82 <DIO_enumSetLowNibbleValue+0x176>
    4c60:	2e 81       	ldd	r18, Y+6	; 0x06
    4c62:	3f 81       	ldd	r19, Y+7	; 0x07
    4c64:	22 30       	cpi	r18, 0x02	; 2
    4c66:	31 05       	cpc	r19, r1
    4c68:	f1 f0       	breq	.+60     	; 0x4ca6 <DIO_enumSetLowNibbleValue+0x9a>
    4c6a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c6c:	9f 81       	ldd	r25, Y+7	; 0x07
    4c6e:	83 30       	cpi	r24, 0x03	; 3
    4c70:	91 05       	cpc	r25, r1
    4c72:	29 f1       	breq	.+74     	; 0x4cbe <DIO_enumSetLowNibbleValue+0xb2>
    4c74:	86 c0       	rjmp	.+268    	; 0x4d82 <DIO_enumSetLowNibbleValue+0x176>
			{
			case DIO_PORTA: ASSIGN_LOW_NIB(PORTA_REG,Copy_u8Value); break ;
    4c76:	ab e3       	ldi	r26, 0x3B	; 59
    4c78:	b0 e0       	ldi	r27, 0x00	; 0
    4c7a:	eb e3       	ldi	r30, 0x3B	; 59
    4c7c:	f0 e0       	ldi	r31, 0x00	; 0
    4c7e:	80 81       	ld	r24, Z
    4c80:	98 2f       	mov	r25, r24
    4c82:	90 7f       	andi	r25, 0xF0	; 240
    4c84:	8b 81       	ldd	r24, Y+3	; 0x03
    4c86:	8f 70       	andi	r24, 0x0F	; 15
    4c88:	89 2b       	or	r24, r25
    4c8a:	8c 93       	st	X, r24
    4c8c:	7a c0       	rjmp	.+244    	; 0x4d82 <DIO_enumSetLowNibbleValue+0x176>
			case DIO_PORTB: ASSIGN_LOW_NIB(PORTB_REG,Copy_u8Value); break ;
    4c8e:	a8 e3       	ldi	r26, 0x38	; 56
    4c90:	b0 e0       	ldi	r27, 0x00	; 0
    4c92:	e8 e3       	ldi	r30, 0x38	; 56
    4c94:	f0 e0       	ldi	r31, 0x00	; 0
    4c96:	80 81       	ld	r24, Z
    4c98:	98 2f       	mov	r25, r24
    4c9a:	90 7f       	andi	r25, 0xF0	; 240
    4c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c9e:	8f 70       	andi	r24, 0x0F	; 15
    4ca0:	89 2b       	or	r24, r25
    4ca2:	8c 93       	st	X, r24
    4ca4:	6e c0       	rjmp	.+220    	; 0x4d82 <DIO_enumSetLowNibbleValue+0x176>
			case DIO_PORTC: ASSIGN_LOW_NIB(PORTC_REG,Copy_u8Value); break ;
    4ca6:	a5 e3       	ldi	r26, 0x35	; 53
    4ca8:	b0 e0       	ldi	r27, 0x00	; 0
    4caa:	e5 e3       	ldi	r30, 0x35	; 53
    4cac:	f0 e0       	ldi	r31, 0x00	; 0
    4cae:	80 81       	ld	r24, Z
    4cb0:	98 2f       	mov	r25, r24
    4cb2:	90 7f       	andi	r25, 0xF0	; 240
    4cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    4cb6:	8f 70       	andi	r24, 0x0F	; 15
    4cb8:	89 2b       	or	r24, r25
    4cba:	8c 93       	st	X, r24
    4cbc:	62 c0       	rjmp	.+196    	; 0x4d82 <DIO_enumSetLowNibbleValue+0x176>
			case DIO_PORTD: ASSIGN_LOW_NIB(PORTD_REG,Copy_u8Value); break ;
    4cbe:	a2 e3       	ldi	r26, 0x32	; 50
    4cc0:	b0 e0       	ldi	r27, 0x00	; 0
    4cc2:	e2 e3       	ldi	r30, 0x32	; 50
    4cc4:	f0 e0       	ldi	r31, 0x00	; 0
    4cc6:	80 81       	ld	r24, Z
    4cc8:	98 2f       	mov	r25, r24
    4cca:	90 7f       	andi	r25, 0xF0	; 240
    4ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    4cce:	8f 70       	andi	r24, 0x0F	; 15
    4cd0:	89 2b       	or	r24, r25
    4cd2:	8c 93       	st	X, r24
    4cd4:	56 c0       	rjmp	.+172    	; 0x4d82 <DIO_enumSetLowNibbleValue+0x176>
			}
		}

		else if (Copy_u8Value == DIO_PORT_LOW)
    4cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    4cd8:	88 23       	and	r24, r24
    4cda:	09 f0       	breq	.+2      	; 0x4cde <DIO_enumSetLowNibbleValue+0xd2>
    4cdc:	4f c0       	rjmp	.+158    	; 0x4d7c <DIO_enumSetLowNibbleValue+0x170>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    4cde:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce0:	28 2f       	mov	r18, r24
    4ce2:	30 e0       	ldi	r19, 0x00	; 0
    4ce4:	3d 83       	std	Y+5, r19	; 0x05
    4ce6:	2c 83       	std	Y+4, r18	; 0x04
    4ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    4cea:	9d 81       	ldd	r25, Y+5	; 0x05
    4cec:	81 30       	cpi	r24, 0x01	; 1
    4cee:	91 05       	cpc	r25, r1
    4cf0:	09 f1       	breq	.+66     	; 0x4d34 <DIO_enumSetLowNibbleValue+0x128>
    4cf2:	2c 81       	ldd	r18, Y+4	; 0x04
    4cf4:	3d 81       	ldd	r19, Y+5	; 0x05
    4cf6:	22 30       	cpi	r18, 0x02	; 2
    4cf8:	31 05       	cpc	r19, r1
    4cfa:	2c f4       	brge	.+10     	; 0x4d06 <DIO_enumSetLowNibbleValue+0xfa>
    4cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    4cfe:	9d 81       	ldd	r25, Y+5	; 0x05
    4d00:	00 97       	sbiw	r24, 0x00	; 0
    4d02:	61 f0       	breq	.+24     	; 0x4d1c <DIO_enumSetLowNibbleValue+0x110>
    4d04:	3e c0       	rjmp	.+124    	; 0x4d82 <DIO_enumSetLowNibbleValue+0x176>
    4d06:	2c 81       	ldd	r18, Y+4	; 0x04
    4d08:	3d 81       	ldd	r19, Y+5	; 0x05
    4d0a:	22 30       	cpi	r18, 0x02	; 2
    4d0c:	31 05       	cpc	r19, r1
    4d0e:	f1 f0       	breq	.+60     	; 0x4d4c <DIO_enumSetLowNibbleValue+0x140>
    4d10:	8c 81       	ldd	r24, Y+4	; 0x04
    4d12:	9d 81       	ldd	r25, Y+5	; 0x05
    4d14:	83 30       	cpi	r24, 0x03	; 3
    4d16:	91 05       	cpc	r25, r1
    4d18:	29 f1       	breq	.+74     	; 0x4d64 <DIO_enumSetLowNibbleValue+0x158>
    4d1a:	33 c0       	rjmp	.+102    	; 0x4d82 <DIO_enumSetLowNibbleValue+0x176>
			{
			case DIO_PORTA: ASSIGN_LOW_NIB(PORTA_REG,Copy_u8Value); break ;
    4d1c:	ab e3       	ldi	r26, 0x3B	; 59
    4d1e:	b0 e0       	ldi	r27, 0x00	; 0
    4d20:	eb e3       	ldi	r30, 0x3B	; 59
    4d22:	f0 e0       	ldi	r31, 0x00	; 0
    4d24:	80 81       	ld	r24, Z
    4d26:	98 2f       	mov	r25, r24
    4d28:	90 7f       	andi	r25, 0xF0	; 240
    4d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d2c:	8f 70       	andi	r24, 0x0F	; 15
    4d2e:	89 2b       	or	r24, r25
    4d30:	8c 93       	st	X, r24
    4d32:	27 c0       	rjmp	.+78     	; 0x4d82 <DIO_enumSetLowNibbleValue+0x176>
			case DIO_PORTB: ASSIGN_LOW_NIB(PORTB_REG,Copy_u8Value); break ;
    4d34:	a8 e3       	ldi	r26, 0x38	; 56
    4d36:	b0 e0       	ldi	r27, 0x00	; 0
    4d38:	e8 e3       	ldi	r30, 0x38	; 56
    4d3a:	f0 e0       	ldi	r31, 0x00	; 0
    4d3c:	80 81       	ld	r24, Z
    4d3e:	98 2f       	mov	r25, r24
    4d40:	90 7f       	andi	r25, 0xF0	; 240
    4d42:	8b 81       	ldd	r24, Y+3	; 0x03
    4d44:	8f 70       	andi	r24, 0x0F	; 15
    4d46:	89 2b       	or	r24, r25
    4d48:	8c 93       	st	X, r24
    4d4a:	1b c0       	rjmp	.+54     	; 0x4d82 <DIO_enumSetLowNibbleValue+0x176>
			case DIO_PORTC: ASSIGN_LOW_NIB(PORTC_REG,Copy_u8Value); break ;
    4d4c:	a5 e3       	ldi	r26, 0x35	; 53
    4d4e:	b0 e0       	ldi	r27, 0x00	; 0
    4d50:	e5 e3       	ldi	r30, 0x35	; 53
    4d52:	f0 e0       	ldi	r31, 0x00	; 0
    4d54:	80 81       	ld	r24, Z
    4d56:	98 2f       	mov	r25, r24
    4d58:	90 7f       	andi	r25, 0xF0	; 240
    4d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d5c:	8f 70       	andi	r24, 0x0F	; 15
    4d5e:	89 2b       	or	r24, r25
    4d60:	8c 93       	st	X, r24
    4d62:	0f c0       	rjmp	.+30     	; 0x4d82 <DIO_enumSetLowNibbleValue+0x176>
			case DIO_PORTD: ASSIGN_LOW_NIB(PORTD_REG,Copy_u8Value); break ;
    4d64:	a2 e3       	ldi	r26, 0x32	; 50
    4d66:	b0 e0       	ldi	r27, 0x00	; 0
    4d68:	e2 e3       	ldi	r30, 0x32	; 50
    4d6a:	f0 e0       	ldi	r31, 0x00	; 0
    4d6c:	80 81       	ld	r24, Z
    4d6e:	98 2f       	mov	r25, r24
    4d70:	90 7f       	andi	r25, 0xF0	; 240
    4d72:	8b 81       	ldd	r24, Y+3	; 0x03
    4d74:	8f 70       	andi	r24, 0x0F	; 15
    4d76:	89 2b       	or	r24, r25
    4d78:	8c 93       	st	X, r24
    4d7a:	03 c0       	rjmp	.+6      	; 0x4d82 <DIO_enumSetLowNibbleValue+0x176>
			}
		}
		else
		{
			Local_enumErrorState = DIO_NOK;
    4d7c:	19 82       	std	Y+1, r1	; 0x01
    4d7e:	01 c0       	rjmp	.+2      	; 0x4d82 <DIO_enumSetLowNibbleValue+0x176>
	}


	else
	{
		Local_enumErrorState= DIO_NOK;
    4d80:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enumErrorState;
    4d82:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d84:	27 96       	adiw	r28, 0x07	; 7
    4d86:	0f b6       	in	r0, 0x3f	; 63
    4d88:	f8 94       	cli
    4d8a:	de bf       	out	0x3e, r29	; 62
    4d8c:	0f be       	out	0x3f, r0	; 63
    4d8e:	cd bf       	out	0x3d, r28	; 61
    4d90:	cf 91       	pop	r28
    4d92:	df 91       	pop	r29
    4d94:	08 95       	ret

00004d96 <EXTI_voidINT0Init>:
void (* EXTI_pvINT1PointerToFunc)(void) = NULL;
void (* EXTI_pvINT2PointerToFunc)(void) = NULL;


void EXTI_voidINT0Init (void)
{
    4d96:	df 93       	push	r29
    4d98:	cf 93       	push	r28
    4d9a:	cd b7       	in	r28, 0x3d	; 61
    4d9c:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_INT0_SENSE == EXTI_u8_ANY_LOGICAL_CHANGE
	CLR_BIT(MCUCR_REG,MCUCR_ISC01);
	SET_BIT(MCUCR_REG,MCUCR_ISC00);

#elif EXTI_INT0_SENSE == EXTI_u8_FALLING_EDGE
	SET_BIT(MCUCR_REG,MCUCR_ISC01);
    4d9e:	a5 e5       	ldi	r26, 0x55	; 85
    4da0:	b0 e0       	ldi	r27, 0x00	; 0
    4da2:	e5 e5       	ldi	r30, 0x55	; 85
    4da4:	f0 e0       	ldi	r31, 0x00	; 0
    4da6:	80 81       	ld	r24, Z
    4da8:	82 60       	ori	r24, 0x02	; 2
    4daa:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,MCUCR_ISC00);
    4dac:	a5 e5       	ldi	r26, 0x55	; 85
    4dae:	b0 e0       	ldi	r27, 0x00	; 0
    4db0:	e5 e5       	ldi	r30, 0x55	; 85
    4db2:	f0 e0       	ldi	r31, 0x00	; 0
    4db4:	80 81       	ld	r24, Z
    4db6:	8e 7f       	andi	r24, 0xFE	; 254
    4db8:	8c 93       	st	X, r24
#else
#error"Wrong EXTI_INT0_SENSE configuration is not option"
#endif

#if EXTI_INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR_REG,GICR_INT0);
    4dba:	ab e5       	ldi	r26, 0x5B	; 91
    4dbc:	b0 e0       	ldi	r27, 0x00	; 0
    4dbe:	eb e5       	ldi	r30, 0x5B	; 91
    4dc0:	f0 e0       	ldi	r31, 0x00	; 0
    4dc2:	80 81       	ld	r24, Z
    4dc4:	80 64       	ori	r24, 0x40	; 64
    4dc6:	8c 93       	st	X, r24
#elif EXTI_INT0_INITIAL_STATE == DISABLED
	CLR_BIT(GICR_REG,GICR_INT0);
#else
#error"Wrong EXTI_INT0_INITIAL_STATE configuration is not option"
#endif
}
    4dc8:	cf 91       	pop	r28
    4dca:	df 91       	pop	r29
    4dcc:	08 95       	ret

00004dce <EXTI_voidINT1Init>:



void EXTI_voidINT1Init (void)
{
    4dce:	df 93       	push	r29
    4dd0:	cf 93       	push	r28
    4dd2:	cd b7       	in	r28, 0x3d	; 61
    4dd4:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_INT1_SENSE == EXTI_u8_FALLING_EDGE
	SET_BIT(MCUCR_REG,MCUCR_ISC11);
	CLR_BIT(MCUCR_REG,MCUCR_ISC10);

#elif EXTI_INT1_SENSE == EXTI_u8_RISING_EDGE
	SET_BIT(MCUCR_REG,MCUCR_ISC11);
    4dd6:	a5 e5       	ldi	r26, 0x55	; 85
    4dd8:	b0 e0       	ldi	r27, 0x00	; 0
    4dda:	e5 e5       	ldi	r30, 0x55	; 85
    4ddc:	f0 e0       	ldi	r31, 0x00	; 0
    4dde:	80 81       	ld	r24, Z
    4de0:	88 60       	ori	r24, 0x08	; 8
    4de2:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG,MCUCR_ISC10);
    4de4:	a5 e5       	ldi	r26, 0x55	; 85
    4de6:	b0 e0       	ldi	r27, 0x00	; 0
    4de8:	e5 e5       	ldi	r30, 0x55	; 85
    4dea:	f0 e0       	ldi	r31, 0x00	; 0
    4dec:	80 81       	ld	r24, Z
    4dee:	84 60       	ori	r24, 0x04	; 4
    4df0:	8c 93       	st	X, r24
#else
#error"Wrong EXTI_INT1_SENSE configuration is not option"
#endif

#if EXTI_INT1_INITIAL_STATE == ENABLED
	SET_BIT(GICR_REG,GICR_INT1);
    4df2:	ab e5       	ldi	r26, 0x5B	; 91
    4df4:	b0 e0       	ldi	r27, 0x00	; 0
    4df6:	eb e5       	ldi	r30, 0x5B	; 91
    4df8:	f0 e0       	ldi	r31, 0x00	; 0
    4dfa:	80 81       	ld	r24, Z
    4dfc:	80 68       	ori	r24, 0x80	; 128
    4dfe:	8c 93       	st	X, r24
#elif EXTI_INT1_INITIAL_STATE == DISABLED
	CLR_BIT(GICR_REG,GICR_INT1);
#else
#error"Wrong EXTI_INT1_INITIAL_STATE configuration is not option"
#endif
}
    4e00:	cf 91       	pop	r28
    4e02:	df 91       	pop	r29
    4e04:	08 95       	ret

00004e06 <EXTI_voidINT2Init>:



void EXTI_voidINT2Init (void)
{
    4e06:	df 93       	push	r29
    4e08:	cf 93       	push	r28
    4e0a:	cd b7       	in	r28, 0x3d	; 61
    4e0c:	de b7       	in	r29, 0x3e	; 62

#if EXTI_INT2_SENSE == EXTI_u8_FALLING_EDGE
	CLR_BIT(MCUCSR_REG,MCUCSR_ISC2);
    4e0e:	a4 e5       	ldi	r26, 0x54	; 84
    4e10:	b0 e0       	ldi	r27, 0x00	; 0
    4e12:	e4 e5       	ldi	r30, 0x54	; 84
    4e14:	f0 e0       	ldi	r31, 0x00	; 0
    4e16:	80 81       	ld	r24, Z
    4e18:	8f 7b       	andi	r24, 0xBF	; 191
    4e1a:	8c 93       	st	X, r24

#if EXTI_INT2_INITIAL_STATE == ENABLED
	SET_BIT(GICR_REG,GICR_INT2);

#elif EXTI_INT2_INITIAL_STATE == DISABLED
	CLR_BIT(GICR_REG,GICR_INT2);
    4e1c:	ab e5       	ldi	r26, 0x5B	; 91
    4e1e:	b0 e0       	ldi	r27, 0x00	; 0
    4e20:	eb e5       	ldi	r30, 0x5B	; 91
    4e22:	f0 e0       	ldi	r31, 0x00	; 0
    4e24:	80 81       	ld	r24, Z
    4e26:	8f 7d       	andi	r24, 0xDF	; 223
    4e28:	8c 93       	st	X, r24
#else
#error"Wrong EXTI_INT2_INITIAL_STATE configuration is not option"
#endif
}
    4e2a:	cf 91       	pop	r28
    4e2c:	df 91       	pop	r29
    4e2e:	08 95       	ret

00004e30 <EXTI_u8ExtIEnable>:




u8 EXTI_u8ExtIEnable(u8 Copy_u8IntNum, u8 Copy_u8IntEdgeSrc)
{
    4e30:	df 93       	push	r29
    4e32:	cf 93       	push	r28
    4e34:	cd b7       	in	r28, 0x3d	; 61
    4e36:	de b7       	in	r29, 0x3e	; 62
    4e38:	2b 97       	sbiw	r28, 0x0b	; 11
    4e3a:	0f b6       	in	r0, 0x3f	; 63
    4e3c:	f8 94       	cli
    4e3e:	de bf       	out	0x3e, r29	; 62
    4e40:	0f be       	out	0x3f, r0	; 63
    4e42:	cd bf       	out	0x3d, r28	; 61
    4e44:	8a 83       	std	Y+2, r24	; 0x02
    4e46:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    4e48:	81 e0       	ldi	r24, 0x01	; 1
    4e4a:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntNum)
    4e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e4e:	28 2f       	mov	r18, r24
    4e50:	30 e0       	ldi	r19, 0x00	; 0
    4e52:	3b 87       	std	Y+11, r19	; 0x0b
    4e54:	2a 87       	std	Y+10, r18	; 0x0a
    4e56:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e58:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e5a:	81 30       	cpi	r24, 0x01	; 1
    4e5c:	91 05       	cpc	r25, r1
    4e5e:	09 f4       	brne	.+2      	; 0x4e62 <EXTI_u8ExtIEnable+0x32>
    4e60:	86 c0       	rjmp	.+268    	; 0x4f6e <EXTI_u8ExtIEnable+0x13e>
    4e62:	2a 85       	ldd	r18, Y+10	; 0x0a
    4e64:	3b 85       	ldd	r19, Y+11	; 0x0b
    4e66:	22 30       	cpi	r18, 0x02	; 2
    4e68:	31 05       	cpc	r19, r1
    4e6a:	09 f4       	brne	.+2      	; 0x4e6e <EXTI_u8ExtIEnable+0x3e>
    4e6c:	fb c0       	rjmp	.+502    	; 0x5064 <EXTI_u8ExtIEnable+0x234>
    4e6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e70:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e72:	00 97       	sbiw	r24, 0x00	; 0
    4e74:	09 f0       	breq	.+2      	; 0x4e78 <EXTI_u8ExtIEnable+0x48>
    4e76:	26 c1       	rjmp	.+588    	; 0x50c4 <EXTI_u8ExtIEnable+0x294>
	{
	case EXTI_u8_INT0 :
		switch(Copy_u8IntEdgeSrc)
    4e78:	8b 81       	ldd	r24, Y+3	; 0x03
    4e7a:	28 2f       	mov	r18, r24
    4e7c:	30 e0       	ldi	r19, 0x00	; 0
    4e7e:	39 87       	std	Y+9, r19	; 0x09
    4e80:	28 87       	std	Y+8, r18	; 0x08
    4e82:	88 85       	ldd	r24, Y+8	; 0x08
    4e84:	99 85       	ldd	r25, Y+9	; 0x09
    4e86:	82 30       	cpi	r24, 0x02	; 2
    4e88:	91 05       	cpc	r25, r1
    4e8a:	69 f1       	breq	.+90     	; 0x4ee6 <EXTI_u8ExtIEnable+0xb6>
    4e8c:	28 85       	ldd	r18, Y+8	; 0x08
    4e8e:	39 85       	ldd	r19, Y+9	; 0x09
    4e90:	23 30       	cpi	r18, 0x03	; 3
    4e92:	31 05       	cpc	r19, r1
    4e94:	34 f4       	brge	.+12     	; 0x4ea2 <EXTI_u8ExtIEnable+0x72>
    4e96:	88 85       	ldd	r24, Y+8	; 0x08
    4e98:	99 85       	ldd	r25, Y+9	; 0x09
    4e9a:	81 30       	cpi	r24, 0x01	; 1
    4e9c:	91 05       	cpc	r25, r1
    4e9e:	69 f0       	breq	.+26     	; 0x4eba <EXTI_u8ExtIEnable+0x8a>
    4ea0:	64 c0       	rjmp	.+200    	; 0x4f6a <EXTI_u8ExtIEnable+0x13a>
    4ea2:	28 85       	ldd	r18, Y+8	; 0x08
    4ea4:	39 85       	ldd	r19, Y+9	; 0x09
    4ea6:	23 30       	cpi	r18, 0x03	; 3
    4ea8:	31 05       	cpc	r19, r1
    4eaa:	99 f1       	breq	.+102    	; 0x4f12 <EXTI_u8ExtIEnable+0xe2>
    4eac:	88 85       	ldd	r24, Y+8	; 0x08
    4eae:	99 85       	ldd	r25, Y+9	; 0x09
    4eb0:	84 30       	cpi	r24, 0x04	; 4
    4eb2:	91 05       	cpc	r25, r1
    4eb4:	09 f4       	brne	.+2      	; 0x4eb8 <EXTI_u8ExtIEnable+0x88>
    4eb6:	43 c0       	rjmp	.+134    	; 0x4f3e <EXTI_u8ExtIEnable+0x10e>
    4eb8:	58 c0       	rjmp	.+176    	; 0x4f6a <EXTI_u8ExtIEnable+0x13a>
		{
		case EXTI_u8_FALLING_EDGE:
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    4eba:	a5 e5       	ldi	r26, 0x55	; 85
    4ebc:	b0 e0       	ldi	r27, 0x00	; 0
    4ebe:	e5 e5       	ldi	r30, 0x55	; 85
    4ec0:	f0 e0       	ldi	r31, 0x00	; 0
    4ec2:	80 81       	ld	r24, Z
    4ec4:	82 60       	ori	r24, 0x02	; 2
    4ec6:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG,MCUCR_ISC00);
    4ec8:	a5 e5       	ldi	r26, 0x55	; 85
    4eca:	b0 e0       	ldi	r27, 0x00	; 0
    4ecc:	e5 e5       	ldi	r30, 0x55	; 85
    4ece:	f0 e0       	ldi	r31, 0x00	; 0
    4ed0:	80 81       	ld	r24, Z
    4ed2:	8e 7f       	andi	r24, 0xFE	; 254
    4ed4:	8c 93       	st	X, r24
			SET_BIT(GICR_REG,GICR_INT0);
    4ed6:	ab e5       	ldi	r26, 0x5B	; 91
    4ed8:	b0 e0       	ldi	r27, 0x00	; 0
    4eda:	eb e5       	ldi	r30, 0x5B	; 91
    4edc:	f0 e0       	ldi	r31, 0x00	; 0
    4ede:	80 81       	ld	r24, Z
    4ee0:	80 64       	ori	r24, 0x40	; 64
    4ee2:	8c 93       	st	X, r24
    4ee4:	f0 c0       	rjmp	.+480    	; 0x50c6 <EXTI_u8ExtIEnable+0x296>

			break;
		case EXTI_u8_RISING_EDGE:
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    4ee6:	a5 e5       	ldi	r26, 0x55	; 85
    4ee8:	b0 e0       	ldi	r27, 0x00	; 0
    4eea:	e5 e5       	ldi	r30, 0x55	; 85
    4eec:	f0 e0       	ldi	r31, 0x00	; 0
    4eee:	80 81       	ld	r24, Z
    4ef0:	82 60       	ori	r24, 0x02	; 2
    4ef2:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC00);
    4ef4:	a5 e5       	ldi	r26, 0x55	; 85
    4ef6:	b0 e0       	ldi	r27, 0x00	; 0
    4ef8:	e5 e5       	ldi	r30, 0x55	; 85
    4efa:	f0 e0       	ldi	r31, 0x00	; 0
    4efc:	80 81       	ld	r24, Z
    4efe:	81 60       	ori	r24, 0x01	; 1
    4f00:	8c 93       	st	X, r24
			SET_BIT(GICR_REG,GICR_INT0);
    4f02:	ab e5       	ldi	r26, 0x5B	; 91
    4f04:	b0 e0       	ldi	r27, 0x00	; 0
    4f06:	eb e5       	ldi	r30, 0x5B	; 91
    4f08:	f0 e0       	ldi	r31, 0x00	; 0
    4f0a:	80 81       	ld	r24, Z
    4f0c:	80 64       	ori	r24, 0x40	; 64
    4f0e:	8c 93       	st	X, r24
    4f10:	da c0       	rjmp	.+436    	; 0x50c6 <EXTI_u8ExtIEnable+0x296>

			break;
		case EXTI_u8_ANY_LOGICAL_CHANGE:
			CLR_BIT(MCUCR_REG,MCUCR_ISC01);
    4f12:	a5 e5       	ldi	r26, 0x55	; 85
    4f14:	b0 e0       	ldi	r27, 0x00	; 0
    4f16:	e5 e5       	ldi	r30, 0x55	; 85
    4f18:	f0 e0       	ldi	r31, 0x00	; 0
    4f1a:	80 81       	ld	r24, Z
    4f1c:	8d 7f       	andi	r24, 0xFD	; 253
    4f1e:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC00);
    4f20:	a5 e5       	ldi	r26, 0x55	; 85
    4f22:	b0 e0       	ldi	r27, 0x00	; 0
    4f24:	e5 e5       	ldi	r30, 0x55	; 85
    4f26:	f0 e0       	ldi	r31, 0x00	; 0
    4f28:	80 81       	ld	r24, Z
    4f2a:	81 60       	ori	r24, 0x01	; 1
    4f2c:	8c 93       	st	X, r24
			SET_BIT(GICR_REG,GICR_INT0);
    4f2e:	ab e5       	ldi	r26, 0x5B	; 91
    4f30:	b0 e0       	ldi	r27, 0x00	; 0
    4f32:	eb e5       	ldi	r30, 0x5B	; 91
    4f34:	f0 e0       	ldi	r31, 0x00	; 0
    4f36:	80 81       	ld	r24, Z
    4f38:	80 64       	ori	r24, 0x40	; 64
    4f3a:	8c 93       	st	X, r24
    4f3c:	c4 c0       	rjmp	.+392    	; 0x50c6 <EXTI_u8ExtIEnable+0x296>

			break;
		case EXTI_u8_LOW_LEVEL:
			CLR_BIT(MCUCR_REG,MCUCR_ISC01);
    4f3e:	a5 e5       	ldi	r26, 0x55	; 85
    4f40:	b0 e0       	ldi	r27, 0x00	; 0
    4f42:	e5 e5       	ldi	r30, 0x55	; 85
    4f44:	f0 e0       	ldi	r31, 0x00	; 0
    4f46:	80 81       	ld	r24, Z
    4f48:	8d 7f       	andi	r24, 0xFD	; 253
    4f4a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG,MCUCR_ISC00);
    4f4c:	a5 e5       	ldi	r26, 0x55	; 85
    4f4e:	b0 e0       	ldi	r27, 0x00	; 0
    4f50:	e5 e5       	ldi	r30, 0x55	; 85
    4f52:	f0 e0       	ldi	r31, 0x00	; 0
    4f54:	80 81       	ld	r24, Z
    4f56:	8e 7f       	andi	r24, 0xFE	; 254
    4f58:	8c 93       	st	X, r24
			SET_BIT(GICR_REG,GICR_INT0);
    4f5a:	ab e5       	ldi	r26, 0x5B	; 91
    4f5c:	b0 e0       	ldi	r27, 0x00	; 0
    4f5e:	eb e5       	ldi	r30, 0x5B	; 91
    4f60:	f0 e0       	ldi	r31, 0x00	; 0
    4f62:	80 81       	ld	r24, Z
    4f64:	80 64       	ori	r24, 0x40	; 64
    4f66:	8c 93       	st	X, r24
    4f68:	ae c0       	rjmp	.+348    	; 0x50c6 <EXTI_u8ExtIEnable+0x296>

			break;
		default : Local_u8ErrorState = STD_TYPES_NOK;
    4f6a:	19 82       	std	Y+1, r1	; 0x01
    4f6c:	ac c0       	rjmp	.+344    	; 0x50c6 <EXTI_u8ExtIEnable+0x296>
		}
		break;

		case EXTI_u8_INT1 :
			switch(Copy_u8IntEdgeSrc)
    4f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f70:	28 2f       	mov	r18, r24
    4f72:	30 e0       	ldi	r19, 0x00	; 0
    4f74:	3f 83       	std	Y+7, r19	; 0x07
    4f76:	2e 83       	std	Y+6, r18	; 0x06
    4f78:	8e 81       	ldd	r24, Y+6	; 0x06
    4f7a:	9f 81       	ldd	r25, Y+7	; 0x07
    4f7c:	82 30       	cpi	r24, 0x02	; 2
    4f7e:	91 05       	cpc	r25, r1
    4f80:	69 f1       	breq	.+90     	; 0x4fdc <EXTI_u8ExtIEnable+0x1ac>
    4f82:	2e 81       	ldd	r18, Y+6	; 0x06
    4f84:	3f 81       	ldd	r19, Y+7	; 0x07
    4f86:	23 30       	cpi	r18, 0x03	; 3
    4f88:	31 05       	cpc	r19, r1
    4f8a:	34 f4       	brge	.+12     	; 0x4f98 <EXTI_u8ExtIEnable+0x168>
    4f8c:	8e 81       	ldd	r24, Y+6	; 0x06
    4f8e:	9f 81       	ldd	r25, Y+7	; 0x07
    4f90:	81 30       	cpi	r24, 0x01	; 1
    4f92:	91 05       	cpc	r25, r1
    4f94:	69 f0       	breq	.+26     	; 0x4fb0 <EXTI_u8ExtIEnable+0x180>
    4f96:	64 c0       	rjmp	.+200    	; 0x5060 <EXTI_u8ExtIEnable+0x230>
    4f98:	2e 81       	ldd	r18, Y+6	; 0x06
    4f9a:	3f 81       	ldd	r19, Y+7	; 0x07
    4f9c:	23 30       	cpi	r18, 0x03	; 3
    4f9e:	31 05       	cpc	r19, r1
    4fa0:	99 f1       	breq	.+102    	; 0x5008 <EXTI_u8ExtIEnable+0x1d8>
    4fa2:	8e 81       	ldd	r24, Y+6	; 0x06
    4fa4:	9f 81       	ldd	r25, Y+7	; 0x07
    4fa6:	84 30       	cpi	r24, 0x04	; 4
    4fa8:	91 05       	cpc	r25, r1
    4faa:	09 f4       	brne	.+2      	; 0x4fae <EXTI_u8ExtIEnable+0x17e>
    4fac:	43 c0       	rjmp	.+134    	; 0x5034 <EXTI_u8ExtIEnable+0x204>
    4fae:	58 c0       	rjmp	.+176    	; 0x5060 <EXTI_u8ExtIEnable+0x230>
			{
			case EXTI_u8_FALLING_EDGE:
				SET_BIT(MCUCR_REG,MCUCR_ISC11);
    4fb0:	a5 e5       	ldi	r26, 0x55	; 85
    4fb2:	b0 e0       	ldi	r27, 0x00	; 0
    4fb4:	e5 e5       	ldi	r30, 0x55	; 85
    4fb6:	f0 e0       	ldi	r31, 0x00	; 0
    4fb8:	80 81       	ld	r24, Z
    4fba:	88 60       	ori	r24, 0x08	; 8
    4fbc:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,MCUCR_ISC10);
    4fbe:	a5 e5       	ldi	r26, 0x55	; 85
    4fc0:	b0 e0       	ldi	r27, 0x00	; 0
    4fc2:	e5 e5       	ldi	r30, 0x55	; 85
    4fc4:	f0 e0       	ldi	r31, 0x00	; 0
    4fc6:	80 81       	ld	r24, Z
    4fc8:	8b 7f       	andi	r24, 0xFB	; 251
    4fca:	8c 93       	st	X, r24
				SET_BIT(GICR_REG,GICR_INT1);
    4fcc:	ab e5       	ldi	r26, 0x5B	; 91
    4fce:	b0 e0       	ldi	r27, 0x00	; 0
    4fd0:	eb e5       	ldi	r30, 0x5B	; 91
    4fd2:	f0 e0       	ldi	r31, 0x00	; 0
    4fd4:	80 81       	ld	r24, Z
    4fd6:	80 68       	ori	r24, 0x80	; 128
    4fd8:	8c 93       	st	X, r24
    4fda:	75 c0       	rjmp	.+234    	; 0x50c6 <EXTI_u8ExtIEnable+0x296>
				break;
			case EXTI_u8_RISING_EDGE:
				SET_BIT(MCUCR_REG,MCUCR_ISC11);
    4fdc:	a5 e5       	ldi	r26, 0x55	; 85
    4fde:	b0 e0       	ldi	r27, 0x00	; 0
    4fe0:	e5 e5       	ldi	r30, 0x55	; 85
    4fe2:	f0 e0       	ldi	r31, 0x00	; 0
    4fe4:	80 81       	ld	r24, Z
    4fe6:	88 60       	ori	r24, 0x08	; 8
    4fe8:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,MCUCR_ISC10);
    4fea:	a5 e5       	ldi	r26, 0x55	; 85
    4fec:	b0 e0       	ldi	r27, 0x00	; 0
    4fee:	e5 e5       	ldi	r30, 0x55	; 85
    4ff0:	f0 e0       	ldi	r31, 0x00	; 0
    4ff2:	80 81       	ld	r24, Z
    4ff4:	84 60       	ori	r24, 0x04	; 4
    4ff6:	8c 93       	st	X, r24
				SET_BIT(GICR_REG,GICR_INT1);
    4ff8:	ab e5       	ldi	r26, 0x5B	; 91
    4ffa:	b0 e0       	ldi	r27, 0x00	; 0
    4ffc:	eb e5       	ldi	r30, 0x5B	; 91
    4ffe:	f0 e0       	ldi	r31, 0x00	; 0
    5000:	80 81       	ld	r24, Z
    5002:	80 68       	ori	r24, 0x80	; 128
    5004:	8c 93       	st	X, r24
    5006:	5f c0       	rjmp	.+190    	; 0x50c6 <EXTI_u8ExtIEnable+0x296>
				break;
			case EXTI_u8_ANY_LOGICAL_CHANGE:
				CLR_BIT(MCUCR_REG,MCUCR_ISC11);
    5008:	a5 e5       	ldi	r26, 0x55	; 85
    500a:	b0 e0       	ldi	r27, 0x00	; 0
    500c:	e5 e5       	ldi	r30, 0x55	; 85
    500e:	f0 e0       	ldi	r31, 0x00	; 0
    5010:	80 81       	ld	r24, Z
    5012:	87 7f       	andi	r24, 0xF7	; 247
    5014:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,MCUCR_ISC10);
    5016:	a5 e5       	ldi	r26, 0x55	; 85
    5018:	b0 e0       	ldi	r27, 0x00	; 0
    501a:	e5 e5       	ldi	r30, 0x55	; 85
    501c:	f0 e0       	ldi	r31, 0x00	; 0
    501e:	80 81       	ld	r24, Z
    5020:	84 60       	ori	r24, 0x04	; 4
    5022:	8c 93       	st	X, r24
				SET_BIT(GICR_REG,GICR_INT1);
    5024:	ab e5       	ldi	r26, 0x5B	; 91
    5026:	b0 e0       	ldi	r27, 0x00	; 0
    5028:	eb e5       	ldi	r30, 0x5B	; 91
    502a:	f0 e0       	ldi	r31, 0x00	; 0
    502c:	80 81       	ld	r24, Z
    502e:	80 68       	ori	r24, 0x80	; 128
    5030:	8c 93       	st	X, r24
    5032:	49 c0       	rjmp	.+146    	; 0x50c6 <EXTI_u8ExtIEnable+0x296>
				break;
			case EXTI_u8_LOW_LEVEL:
				CLR_BIT(MCUCR_REG,MCUCR_ISC11);
    5034:	a5 e5       	ldi	r26, 0x55	; 85
    5036:	b0 e0       	ldi	r27, 0x00	; 0
    5038:	e5 e5       	ldi	r30, 0x55	; 85
    503a:	f0 e0       	ldi	r31, 0x00	; 0
    503c:	80 81       	ld	r24, Z
    503e:	87 7f       	andi	r24, 0xF7	; 247
    5040:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,MCUCR_ISC10);
    5042:	a5 e5       	ldi	r26, 0x55	; 85
    5044:	b0 e0       	ldi	r27, 0x00	; 0
    5046:	e5 e5       	ldi	r30, 0x55	; 85
    5048:	f0 e0       	ldi	r31, 0x00	; 0
    504a:	80 81       	ld	r24, Z
    504c:	8b 7f       	andi	r24, 0xFB	; 251
    504e:	8c 93       	st	X, r24
				SET_BIT(GICR_REG,GICR_INT1);
    5050:	ab e5       	ldi	r26, 0x5B	; 91
    5052:	b0 e0       	ldi	r27, 0x00	; 0
    5054:	eb e5       	ldi	r30, 0x5B	; 91
    5056:	f0 e0       	ldi	r31, 0x00	; 0
    5058:	80 81       	ld	r24, Z
    505a:	80 68       	ori	r24, 0x80	; 128
    505c:	8c 93       	st	X, r24
    505e:	33 c0       	rjmp	.+102    	; 0x50c6 <EXTI_u8ExtIEnable+0x296>
				break;
			default : Local_u8ErrorState = STD_TYPES_NOK;
    5060:	19 82       	std	Y+1, r1	; 0x01
    5062:	31 c0       	rjmp	.+98     	; 0x50c6 <EXTI_u8ExtIEnable+0x296>
			}
			break;

			case EXTI_u8_INT2 :
				switch(Copy_u8IntEdgeSrc)
    5064:	8b 81       	ldd	r24, Y+3	; 0x03
    5066:	28 2f       	mov	r18, r24
    5068:	30 e0       	ldi	r19, 0x00	; 0
    506a:	3d 83       	std	Y+5, r19	; 0x05
    506c:	2c 83       	std	Y+4, r18	; 0x04
    506e:	8c 81       	ldd	r24, Y+4	; 0x04
    5070:	9d 81       	ldd	r25, Y+5	; 0x05
    5072:	81 30       	cpi	r24, 0x01	; 1
    5074:	91 05       	cpc	r25, r1
    5076:	31 f0       	breq	.+12     	; 0x5084 <EXTI_u8ExtIEnable+0x254>
    5078:	2c 81       	ldd	r18, Y+4	; 0x04
    507a:	3d 81       	ldd	r19, Y+5	; 0x05
    507c:	22 30       	cpi	r18, 0x02	; 2
    507e:	31 05       	cpc	r19, r1
    5080:	81 f0       	breq	.+32     	; 0x50a2 <EXTI_u8ExtIEnable+0x272>
    5082:	1e c0       	rjmp	.+60     	; 0x50c0 <EXTI_u8ExtIEnable+0x290>
				{
				case EXTI_u8_FALLING_EDGE:
					CLR_BIT(MCUCSR_REG,MCUCSR_ISC2);
    5084:	a4 e5       	ldi	r26, 0x54	; 84
    5086:	b0 e0       	ldi	r27, 0x00	; 0
    5088:	e4 e5       	ldi	r30, 0x54	; 84
    508a:	f0 e0       	ldi	r31, 0x00	; 0
    508c:	80 81       	ld	r24, Z
    508e:	8f 7b       	andi	r24, 0xBF	; 191
    5090:	8c 93       	st	X, r24
					SET_BIT(GICR_REG,GICR_INT2);
    5092:	ab e5       	ldi	r26, 0x5B	; 91
    5094:	b0 e0       	ldi	r27, 0x00	; 0
    5096:	eb e5       	ldi	r30, 0x5B	; 91
    5098:	f0 e0       	ldi	r31, 0x00	; 0
    509a:	80 81       	ld	r24, Z
    509c:	80 62       	ori	r24, 0x20	; 32
    509e:	8c 93       	st	X, r24
    50a0:	12 c0       	rjmp	.+36     	; 0x50c6 <EXTI_u8ExtIEnable+0x296>
					break;
				case EXTI_u8_RISING_EDGE:
					SET_BIT(MCUCSR_REG,MCUCSR_ISC2);
    50a2:	a4 e5       	ldi	r26, 0x54	; 84
    50a4:	b0 e0       	ldi	r27, 0x00	; 0
    50a6:	e4 e5       	ldi	r30, 0x54	; 84
    50a8:	f0 e0       	ldi	r31, 0x00	; 0
    50aa:	80 81       	ld	r24, Z
    50ac:	80 64       	ori	r24, 0x40	; 64
    50ae:	8c 93       	st	X, r24
					SET_BIT(GICR_REG,GICR_INT2);
    50b0:	ab e5       	ldi	r26, 0x5B	; 91
    50b2:	b0 e0       	ldi	r27, 0x00	; 0
    50b4:	eb e5       	ldi	r30, 0x5B	; 91
    50b6:	f0 e0       	ldi	r31, 0x00	; 0
    50b8:	80 81       	ld	r24, Z
    50ba:	80 62       	ori	r24, 0x20	; 32
    50bc:	8c 93       	st	X, r24
    50be:	03 c0       	rjmp	.+6      	; 0x50c6 <EXTI_u8ExtIEnable+0x296>
					break;
				default : Local_u8ErrorState = STD_TYPES_NOK;
    50c0:	19 82       	std	Y+1, r1	; 0x01
    50c2:	01 c0       	rjmp	.+2      	; 0x50c6 <EXTI_u8ExtIEnable+0x296>
				}
				break;
				default : Local_u8ErrorState = STD_TYPES_NOK;
    50c4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    50c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    50c8:	2b 96       	adiw	r28, 0x0b	; 11
    50ca:	0f b6       	in	r0, 0x3f	; 63
    50cc:	f8 94       	cli
    50ce:	de bf       	out	0x3e, r29	; 62
    50d0:	0f be       	out	0x3f, r0	; 63
    50d2:	cd bf       	out	0x3d, r28	; 61
    50d4:	cf 91       	pop	r28
    50d6:	df 91       	pop	r29
    50d8:	08 95       	ret

000050da <EXTI_u8ExtIDisable>:


u8 EXTI_u8ExtIDisable(u8 Copy_u8IntNum)

{
    50da:	df 93       	push	r29
    50dc:	cf 93       	push	r28
    50de:	00 d0       	rcall	.+0      	; 0x50e0 <EXTI_u8ExtIDisable+0x6>
    50e0:	00 d0       	rcall	.+0      	; 0x50e2 <EXTI_u8ExtIDisable+0x8>
    50e2:	cd b7       	in	r28, 0x3d	; 61
    50e4:	de b7       	in	r29, 0x3e	; 62
    50e6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    50e8:	81 e0       	ldi	r24, 0x01	; 1
    50ea:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8IntNum)
    50ec:	8a 81       	ldd	r24, Y+2	; 0x02
    50ee:	28 2f       	mov	r18, r24
    50f0:	30 e0       	ldi	r19, 0x00	; 0
    50f2:	3c 83       	std	Y+4, r19	; 0x04
    50f4:	2b 83       	std	Y+3, r18	; 0x03
    50f6:	8b 81       	ldd	r24, Y+3	; 0x03
    50f8:	9c 81       	ldd	r25, Y+4	; 0x04
    50fa:	81 30       	cpi	r24, 0x01	; 1
    50fc:	91 05       	cpc	r25, r1
    50fe:	89 f0       	breq	.+34     	; 0x5122 <EXTI_u8ExtIDisable+0x48>
    5100:	2b 81       	ldd	r18, Y+3	; 0x03
    5102:	3c 81       	ldd	r19, Y+4	; 0x04
    5104:	22 30       	cpi	r18, 0x02	; 2
    5106:	31 05       	cpc	r19, r1
    5108:	a1 f0       	breq	.+40     	; 0x5132 <EXTI_u8ExtIDisable+0x58>
    510a:	8b 81       	ldd	r24, Y+3	; 0x03
    510c:	9c 81       	ldd	r25, Y+4	; 0x04
    510e:	00 97       	sbiw	r24, 0x00	; 0
    5110:	c1 f4       	brne	.+48     	; 0x5142 <EXTI_u8ExtIDisable+0x68>
	{
	case EXTI_u8_INT0 :
		CLR_BIT(GICR_REG,GICR_INT0);
    5112:	ab e5       	ldi	r26, 0x5B	; 91
    5114:	b0 e0       	ldi	r27, 0x00	; 0
    5116:	eb e5       	ldi	r30, 0x5B	; 91
    5118:	f0 e0       	ldi	r31, 0x00	; 0
    511a:	80 81       	ld	r24, Z
    511c:	8f 7b       	andi	r24, 0xBF	; 191
    511e:	8c 93       	st	X, r24
    5120:	11 c0       	rjmp	.+34     	; 0x5144 <EXTI_u8ExtIDisable+0x6a>
		break;
	case EXTI_u8_INT1 :
		CLR_BIT(GICR_REG,GICR_INT1);
    5122:	ab e5       	ldi	r26, 0x5B	; 91
    5124:	b0 e0       	ldi	r27, 0x00	; 0
    5126:	eb e5       	ldi	r30, 0x5B	; 91
    5128:	f0 e0       	ldi	r31, 0x00	; 0
    512a:	80 81       	ld	r24, Z
    512c:	8f 77       	andi	r24, 0x7F	; 127
    512e:	8c 93       	st	X, r24
    5130:	09 c0       	rjmp	.+18     	; 0x5144 <EXTI_u8ExtIDisable+0x6a>
		break;
	case EXTI_u8_INT2 :
		CLR_BIT(GICR_REG,GICR_INT2);
    5132:	ab e5       	ldi	r26, 0x5B	; 91
    5134:	b0 e0       	ldi	r27, 0x00	; 0
    5136:	eb e5       	ldi	r30, 0x5B	; 91
    5138:	f0 e0       	ldi	r31, 0x00	; 0
    513a:	80 81       	ld	r24, Z
    513c:	8f 7d       	andi	r24, 0xDF	; 223
    513e:	8c 93       	st	X, r24
    5140:	01 c0       	rjmp	.+2      	; 0x5144 <EXTI_u8ExtIDisable+0x6a>
		break;
	default:Local_u8ErrorState = STD_TYPES_NOK;
    5142:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    5144:	89 81       	ldd	r24, Y+1	; 0x01
}
    5146:	0f 90       	pop	r0
    5148:	0f 90       	pop	r0
    514a:	0f 90       	pop	r0
    514c:	0f 90       	pop	r0
    514e:	cf 91       	pop	r28
    5150:	df 91       	pop	r29
    5152:	08 95       	ret

00005154 <EXTI_u8ExtISetCallBackINT0>:



/*must be pass the Address the function callback (&Name_Func) or (Name_func) because name the function is address the function */
u8 EXTI_u8ExtISetCallBackINT0 (void (*Copy_pvInt0Func)(void))
{
    5154:	df 93       	push	r29
    5156:	cf 93       	push	r28
    5158:	00 d0       	rcall	.+0      	; 0x515a <EXTI_u8ExtISetCallBackINT0+0x6>
    515a:	0f 92       	push	r0
    515c:	cd b7       	in	r28, 0x3d	; 61
    515e:	de b7       	in	r29, 0x3e	; 62
    5160:	9b 83       	std	Y+3, r25	; 0x03
    5162:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=STD_TYPES_OK;
    5164:	81 e0       	ldi	r24, 0x01	; 1
    5166:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pvInt0Func != NULL)
    5168:	8a 81       	ldd	r24, Y+2	; 0x02
    516a:	9b 81       	ldd	r25, Y+3	; 0x03
    516c:	00 97       	sbiw	r24, 0x00	; 0
    516e:	39 f0       	breq	.+14     	; 0x517e <EXTI_u8ExtISetCallBackINT0+0x2a>
	{
		EXTI_pvINT0PointerToFunc = Copy_pvInt0Func;
    5170:	8a 81       	ldd	r24, Y+2	; 0x02
    5172:	9b 81       	ldd	r25, Y+3	; 0x03
    5174:	90 93 49 02 	sts	0x0249, r25
    5178:	80 93 48 02 	sts	0x0248, r24
    517c:	01 c0       	rjmp	.+2      	; 0x5180 <EXTI_u8ExtISetCallBackINT0+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    517e:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    5180:	89 81       	ldd	r24, Y+1	; 0x01

}
    5182:	0f 90       	pop	r0
    5184:	0f 90       	pop	r0
    5186:	0f 90       	pop	r0
    5188:	cf 91       	pop	r28
    518a:	df 91       	pop	r29
    518c:	08 95       	ret

0000518e <EXTI_u8ExtISetCallBackINT1>:


/*must be pass the Address the function callback (&Name_Func) or (Name_func) because name the function is address the function */
u8 EXTI_u8ExtISetCallBackINT1 (void (*Copy_pvInt1Func)(void))
{
    518e:	df 93       	push	r29
    5190:	cf 93       	push	r28
    5192:	00 d0       	rcall	.+0      	; 0x5194 <EXTI_u8ExtISetCallBackINT1+0x6>
    5194:	0f 92       	push	r0
    5196:	cd b7       	in	r28, 0x3d	; 61
    5198:	de b7       	in	r29, 0x3e	; 62
    519a:	9b 83       	std	Y+3, r25	; 0x03
    519c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=STD_TYPES_OK;
    519e:	81 e0       	ldi	r24, 0x01	; 1
    51a0:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pvInt1Func != NULL)
    51a2:	8a 81       	ldd	r24, Y+2	; 0x02
    51a4:	9b 81       	ldd	r25, Y+3	; 0x03
    51a6:	00 97       	sbiw	r24, 0x00	; 0
    51a8:	39 f0       	breq	.+14     	; 0x51b8 <EXTI_u8ExtISetCallBackINT1+0x2a>
	{
		EXTI_pvINT1PointerToFunc = Copy_pvInt1Func;
    51aa:	8a 81       	ldd	r24, Y+2	; 0x02
    51ac:	9b 81       	ldd	r25, Y+3	; 0x03
    51ae:	90 93 4b 02 	sts	0x024B, r25
    51b2:	80 93 4a 02 	sts	0x024A, r24
    51b6:	01 c0       	rjmp	.+2      	; 0x51ba <EXTI_u8ExtISetCallBackINT1+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    51b8:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    51ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    51bc:	0f 90       	pop	r0
    51be:	0f 90       	pop	r0
    51c0:	0f 90       	pop	r0
    51c2:	cf 91       	pop	r28
    51c4:	df 91       	pop	r29
    51c6:	08 95       	ret

000051c8 <EXTI_u8ExtISetCallBackINT2>:



/*must be pass the Address the function callback (&Name_Func) or (Name_func) because name the function is address the function */
u8 EXTI_u8ExtISetCallBackINT2 (void (*Copy_pvInt2Func)(void))
{
    51c8:	df 93       	push	r29
    51ca:	cf 93       	push	r28
    51cc:	00 d0       	rcall	.+0      	; 0x51ce <EXTI_u8ExtISetCallBackINT2+0x6>
    51ce:	0f 92       	push	r0
    51d0:	cd b7       	in	r28, 0x3d	; 61
    51d2:	de b7       	in	r29, 0x3e	; 62
    51d4:	9b 83       	std	Y+3, r25	; 0x03
    51d6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=STD_TYPES_OK;
    51d8:	81 e0       	ldi	r24, 0x01	; 1
    51da:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pvInt2Func != NULL)
    51dc:	8a 81       	ldd	r24, Y+2	; 0x02
    51de:	9b 81       	ldd	r25, Y+3	; 0x03
    51e0:	00 97       	sbiw	r24, 0x00	; 0
    51e2:	39 f0       	breq	.+14     	; 0x51f2 <EXTI_u8ExtISetCallBackINT2+0x2a>
	{
		EXTI_pvINT2PointerToFunc = Copy_pvInt2Func;
    51e4:	8a 81       	ldd	r24, Y+2	; 0x02
    51e6:	9b 81       	ldd	r25, Y+3	; 0x03
    51e8:	90 93 4d 02 	sts	0x024D, r25
    51ec:	80 93 4c 02 	sts	0x024C, r24
    51f0:	01 c0       	rjmp	.+2      	; 0x51f4 <EXTI_u8ExtISetCallBackINT2+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    51f2:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    51f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    51f6:	0f 90       	pop	r0
    51f8:	0f 90       	pop	r0
    51fa:	0f 90       	pop	r0
    51fc:	cf 91       	pop	r28
    51fe:	df 91       	pop	r29
    5200:	08 95       	ret

00005202 <__vector_1>:

/* ISR Of INT0 , INT1 and INT2 to calling the function Callback in main */

void __vector_1 (void)  __attribute__((signal));
void __vector_1 (void)
{
    5202:	1f 92       	push	r1
    5204:	0f 92       	push	r0
    5206:	0f b6       	in	r0, 0x3f	; 63
    5208:	0f 92       	push	r0
    520a:	11 24       	eor	r1, r1
    520c:	2f 93       	push	r18
    520e:	3f 93       	push	r19
    5210:	4f 93       	push	r20
    5212:	5f 93       	push	r21
    5214:	6f 93       	push	r22
    5216:	7f 93       	push	r23
    5218:	8f 93       	push	r24
    521a:	9f 93       	push	r25
    521c:	af 93       	push	r26
    521e:	bf 93       	push	r27
    5220:	ef 93       	push	r30
    5222:	ff 93       	push	r31
    5224:	df 93       	push	r29
    5226:	cf 93       	push	r28
    5228:	cd b7       	in	r28, 0x3d	; 61
    522a:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvINT0PointerToFunc != NULL)
    522c:	80 91 48 02 	lds	r24, 0x0248
    5230:	90 91 49 02 	lds	r25, 0x0249
    5234:	00 97       	sbiw	r24, 0x00	; 0
    5236:	29 f0       	breq	.+10     	; 0x5242 <__vector_1+0x40>
	{
		/*calling the function (Pointer to function)*/
		EXTI_pvINT0PointerToFunc();
    5238:	e0 91 48 02 	lds	r30, 0x0248
    523c:	f0 91 49 02 	lds	r31, 0x0249
    5240:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    5242:	cf 91       	pop	r28
    5244:	df 91       	pop	r29
    5246:	ff 91       	pop	r31
    5248:	ef 91       	pop	r30
    524a:	bf 91       	pop	r27
    524c:	af 91       	pop	r26
    524e:	9f 91       	pop	r25
    5250:	8f 91       	pop	r24
    5252:	7f 91       	pop	r23
    5254:	6f 91       	pop	r22
    5256:	5f 91       	pop	r21
    5258:	4f 91       	pop	r20
    525a:	3f 91       	pop	r19
    525c:	2f 91       	pop	r18
    525e:	0f 90       	pop	r0
    5260:	0f be       	out	0x3f, r0	; 63
    5262:	0f 90       	pop	r0
    5264:	1f 90       	pop	r1
    5266:	18 95       	reti

00005268 <__vector_2>:


void __vector_2 (void)  __attribute__((signal));
void __vector_2 (void)
{
    5268:	1f 92       	push	r1
    526a:	0f 92       	push	r0
    526c:	0f b6       	in	r0, 0x3f	; 63
    526e:	0f 92       	push	r0
    5270:	11 24       	eor	r1, r1
    5272:	2f 93       	push	r18
    5274:	3f 93       	push	r19
    5276:	4f 93       	push	r20
    5278:	5f 93       	push	r21
    527a:	6f 93       	push	r22
    527c:	7f 93       	push	r23
    527e:	8f 93       	push	r24
    5280:	9f 93       	push	r25
    5282:	af 93       	push	r26
    5284:	bf 93       	push	r27
    5286:	ef 93       	push	r30
    5288:	ff 93       	push	r31
    528a:	df 93       	push	r29
    528c:	cf 93       	push	r28
    528e:	cd b7       	in	r28, 0x3d	; 61
    5290:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvINT1PointerToFunc != NULL)
    5292:	80 91 4a 02 	lds	r24, 0x024A
    5296:	90 91 4b 02 	lds	r25, 0x024B
    529a:	00 97       	sbiw	r24, 0x00	; 0
    529c:	29 f0       	breq	.+10     	; 0x52a8 <__vector_2+0x40>
	{
		/*calling the function (Pointer to function)*/
		EXTI_pvINT1PointerToFunc();
    529e:	e0 91 4a 02 	lds	r30, 0x024A
    52a2:	f0 91 4b 02 	lds	r31, 0x024B
    52a6:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    52a8:	cf 91       	pop	r28
    52aa:	df 91       	pop	r29
    52ac:	ff 91       	pop	r31
    52ae:	ef 91       	pop	r30
    52b0:	bf 91       	pop	r27
    52b2:	af 91       	pop	r26
    52b4:	9f 91       	pop	r25
    52b6:	8f 91       	pop	r24
    52b8:	7f 91       	pop	r23
    52ba:	6f 91       	pop	r22
    52bc:	5f 91       	pop	r21
    52be:	4f 91       	pop	r20
    52c0:	3f 91       	pop	r19
    52c2:	2f 91       	pop	r18
    52c4:	0f 90       	pop	r0
    52c6:	0f be       	out	0x3f, r0	; 63
    52c8:	0f 90       	pop	r0
    52ca:	1f 90       	pop	r1
    52cc:	18 95       	reti

000052ce <__vector_3>:


void __vector_3 (void)  __attribute__((signal));
void __vector_3 (void)
{
    52ce:	1f 92       	push	r1
    52d0:	0f 92       	push	r0
    52d2:	0f b6       	in	r0, 0x3f	; 63
    52d4:	0f 92       	push	r0
    52d6:	11 24       	eor	r1, r1
    52d8:	2f 93       	push	r18
    52da:	3f 93       	push	r19
    52dc:	4f 93       	push	r20
    52de:	5f 93       	push	r21
    52e0:	6f 93       	push	r22
    52e2:	7f 93       	push	r23
    52e4:	8f 93       	push	r24
    52e6:	9f 93       	push	r25
    52e8:	af 93       	push	r26
    52ea:	bf 93       	push	r27
    52ec:	ef 93       	push	r30
    52ee:	ff 93       	push	r31
    52f0:	df 93       	push	r29
    52f2:	cf 93       	push	r28
    52f4:	cd b7       	in	r28, 0x3d	; 61
    52f6:	de b7       	in	r29, 0x3e	; 62
	/*check the Pointer */
	if (EXTI_pvINT2PointerToFunc != NULL)
    52f8:	80 91 4c 02 	lds	r24, 0x024C
    52fc:	90 91 4d 02 	lds	r25, 0x024D
    5300:	00 97       	sbiw	r24, 0x00	; 0
    5302:	29 f0       	breq	.+10     	; 0x530e <__vector_3+0x40>
	{
		/*calling the function (Pointer to function)*/
		EXTI_pvINT2PointerToFunc();
    5304:	e0 91 4c 02 	lds	r30, 0x024C
    5308:	f0 91 4d 02 	lds	r31, 0x024D
    530c:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    530e:	cf 91       	pop	r28
    5310:	df 91       	pop	r29
    5312:	ff 91       	pop	r31
    5314:	ef 91       	pop	r30
    5316:	bf 91       	pop	r27
    5318:	af 91       	pop	r26
    531a:	9f 91       	pop	r25
    531c:	8f 91       	pop	r24
    531e:	7f 91       	pop	r23
    5320:	6f 91       	pop	r22
    5322:	5f 91       	pop	r21
    5324:	4f 91       	pop	r20
    5326:	3f 91       	pop	r19
    5328:	2f 91       	pop	r18
    532a:	0f 90       	pop	r0
    532c:	0f be       	out	0x3f, r0	; 63
    532e:	0f 90       	pop	r0
    5330:	1f 90       	pop	r1
    5332:	18 95       	reti

00005334 <GIE_voidEnable>:
#include "GIE_interface.h"
#include "GIE_register.h"

/*Enable GIE (Global interrupt Enable)*/
void GIE_voidEnable (void)
{
    5334:	df 93       	push	r29
    5336:	cf 93       	push	r28
    5338:	cd b7       	in	r28, 0x3d	; 61
    533a:	de b7       	in	r29, 0x3e	; 62
SET_BIT(SREG_REG,SREG_I);
    533c:	af e5       	ldi	r26, 0x5F	; 95
    533e:	b0 e0       	ldi	r27, 0x00	; 0
    5340:	ef e5       	ldi	r30, 0x5F	; 95
    5342:	f0 e0       	ldi	r31, 0x00	; 0
    5344:	80 81       	ld	r24, Z
    5346:	80 68       	ori	r24, 0x80	; 128
    5348:	8c 93       	st	X, r24
}
    534a:	cf 91       	pop	r28
    534c:	df 91       	pop	r29
    534e:	08 95       	ret

00005350 <GIE_voidDisable>:

/*Disable GIE (Global interrupt Enable)*/
void GIE_voidDisable (void)
{
    5350:	df 93       	push	r29
    5352:	cf 93       	push	r28
    5354:	cd b7       	in	r28, 0x3d	; 61
    5356:	de b7       	in	r29, 0x3e	; 62
CLR_BIT(SREG_REG,SREG_I);
    5358:	af e5       	ldi	r26, 0x5F	; 95
    535a:	b0 e0       	ldi	r27, 0x00	; 0
    535c:	ef e5       	ldi	r30, 0x5F	; 95
    535e:	f0 e0       	ldi	r31, 0x00	; 0
    5360:	80 81       	ld	r24, Z
    5362:	8f 77       	andi	r24, 0x7F	; 127
    5364:	8c 93       	st	X, r24
}
    5366:	cf 91       	pop	r28
    5368:	df 91       	pop	r29
    536a:	08 95       	ret

0000536c <KPD_voidInit>:
#include "Keypad_config.h"
#include "Keypad_private.h"
#include "Keypad_interface.h"

void KPD_voidInit(void)
{
    536c:	df 93       	push	r29
    536e:	cf 93       	push	r28
    5370:	cd b7       	in	r28, 0x3d	; 61
    5372:	de b7       	in	r29, 0x3e	; 62
	/**********************************************************/
	/************** Row pins input and pull_up ****************/
	/**********************************************************/
	/**********************************************************/
	/*Define Row pins input */
	DIO_enumSetPinDirection(KPD_PORT,KPD_PIN_R0,DIO_INPUT);
    5374:	82 e0       	ldi	r24, 0x02	; 2
    5376:	60 e0       	ldi	r22, 0x00	; 0
    5378:	40 e0       	ldi	r20, 0x00	; 0
    537a:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(KPD_PORT,KPD_PIN_R1,DIO_INPUT);
    537e:	82 e0       	ldi	r24, 0x02	; 2
    5380:	61 e0       	ldi	r22, 0x01	; 1
    5382:	40 e0       	ldi	r20, 0x00	; 0
    5384:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(KPD_PORT,KPD_PIN_R2,DIO_INPUT);
    5388:	82 e0       	ldi	r24, 0x02	; 2
    538a:	62 e0       	ldi	r22, 0x02	; 2
    538c:	40 e0       	ldi	r20, 0x00	; 0
    538e:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(KPD_PORT,KPD_PIN_R3,DIO_INPUT);
    5392:	82 e0       	ldi	r24, 0x02	; 2
    5394:	63 e0       	ldi	r22, 0x03	; 3
    5396:	40 e0       	ldi	r20, 0x00	; 0
    5398:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>

	/*Configuration Row pins internal pull_up*/
	DIO_enumSetPinValue(KPD_PORT,KPD_PIN_R0,DIO_HIGH);
    539c:	82 e0       	ldi	r24, 0x02	; 2
    539e:	60 e0       	ldi	r22, 0x00	; 0
    53a0:	41 e0       	ldi	r20, 0x01	; 1
    53a2:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(KPD_PORT,KPD_PIN_R1,DIO_HIGH);
    53a6:	82 e0       	ldi	r24, 0x02	; 2
    53a8:	61 e0       	ldi	r22, 0x01	; 1
    53aa:	41 e0       	ldi	r20, 0x01	; 1
    53ac:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(KPD_PORT,KPD_PIN_R2,DIO_HIGH);
    53b0:	82 e0       	ldi	r24, 0x02	; 2
    53b2:	62 e0       	ldi	r22, 0x02	; 2
    53b4:	41 e0       	ldi	r20, 0x01	; 1
    53b6:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(KPD_PORT,KPD_PIN_R3,DIO_HIGH);
    53ba:	82 e0       	ldi	r24, 0x02	; 2
    53bc:	63 e0       	ldi	r22, 0x03	; 3
    53be:	41 e0       	ldi	r20, 0x01	; 1
    53c0:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	/**********************************************************/
	/************** Column pins output high *******************/
	/**********************************************************/
	/**********************************************************/
	/*Define Row pins input */
	DIO_enumSetPinDirection(KPD_PORT,KPD_PIN_C0,DIO_OUTPUT);
    53c4:	82 e0       	ldi	r24, 0x02	; 2
    53c6:	64 e0       	ldi	r22, 0x04	; 4
    53c8:	41 e0       	ldi	r20, 0x01	; 1
    53ca:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(KPD_PORT,KPD_PIN_C1,DIO_OUTPUT);
    53ce:	82 e0       	ldi	r24, 0x02	; 2
    53d0:	65 e0       	ldi	r22, 0x05	; 5
    53d2:	41 e0       	ldi	r20, 0x01	; 1
    53d4:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(KPD_PORT,KPD_PIN_C2,DIO_OUTPUT);
    53d8:	82 e0       	ldi	r24, 0x02	; 2
    53da:	66 e0       	ldi	r22, 0x06	; 6
    53dc:	41 e0       	ldi	r20, 0x01	; 1
    53de:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(KPD_PORT,KPD_PIN_C3,DIO_OUTPUT);
    53e2:	82 e0       	ldi	r24, 0x02	; 2
    53e4:	67 e0       	ldi	r22, 0x07	; 7
    53e6:	41 e0       	ldi	r20, 0x01	; 1
    53e8:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>

	/*Configuration column pins set High*/
	DIO_enumSetPinValue(KPD_PORT,KPD_PIN_C0,DIO_HIGH);
    53ec:	82 e0       	ldi	r24, 0x02	; 2
    53ee:	64 e0       	ldi	r22, 0x04	; 4
    53f0:	41 e0       	ldi	r20, 0x01	; 1
    53f2:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(KPD_PORT,KPD_PIN_C1,DIO_HIGH);
    53f6:	82 e0       	ldi	r24, 0x02	; 2
    53f8:	65 e0       	ldi	r22, 0x05	; 5
    53fa:	41 e0       	ldi	r20, 0x01	; 1
    53fc:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(KPD_PORT,KPD_PIN_C2,DIO_HIGH);
    5400:	82 e0       	ldi	r24, 0x02	; 2
    5402:	66 e0       	ldi	r22, 0x06	; 6
    5404:	41 e0       	ldi	r20, 0x01	; 1
    5406:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(KPD_PORT,KPD_PIN_C3,DIO_HIGH);
    540a:	82 e0       	ldi	r24, 0x02	; 2
    540c:	67 e0       	ldi	r22, 0x07	; 7
    540e:	41 e0       	ldi	r20, 0x01	; 1
    5410:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
}
    5414:	cf 91       	pop	r28
    5416:	df 91       	pop	r29
    5418:	08 95       	ret

0000541a <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void)
{
    541a:	df 93       	push	r29
    541c:	cf 93       	push	r28
    541e:	00 d0       	rcall	.+0      	; 0x5420 <KPD_u8GetPressedKey+0x6>
    5420:	cd b7       	in	r28, 0x3d	; 61
    5422:	de b7       	in	r29, 0x3e	; 62
	/*Return the function if not pressed the keypad*/
	u8 Local_u8PressedKey=KPD_NO_PRESSES_KEY;
    5424:	8f ef       	ldi	r24, 0xFF	; 255
    5426:	89 83       	std	Y+1, r24	; 0x01
	/*Array each column and row array Pins */
	static u8 Local_u8ColumnArr[COLUMN_NUM]={KPD_PIN_C0,KPD_PIN_C1,KPD_PIN_C2,KPD_PIN_C3};
	static u8 Local_u8RowArr[ROW_NUM]={KPD_PIN_R0,KPD_PIN_R1 ,KPD_PIN_R2 ,KPD_PIN_R3};

	/*Activate all columns high and low */
	for(Local_u8ColumnIndex = COLUMN_BEG ;Local_u8ColumnIndex < COLUMN_NUM ; Local_u8ColumnIndex++)
    5428:	10 92 50 02 	sts	0x0250, r1
    542c:	6a c0       	rjmp	.+212    	; 0x5502 <KPD_u8GetPressedKey+0xe8>
	{
		/*Activate Current Column*/
		DIO_enumSetPinValue(KPD_PORT, Local_u8ColumnArr[Local_u8ColumnIndex] , DIO_LOW);
    542e:	80 91 50 02 	lds	r24, 0x0250
    5432:	88 2f       	mov	r24, r24
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	fc 01       	movw	r30, r24
    5438:	e2 5e       	subi	r30, 0xE2	; 226
    543a:	fd 4f       	sbci	r31, 0xFD	; 253
    543c:	90 81       	ld	r25, Z
    543e:	82 e0       	ldi	r24, 0x02	; 2
    5440:	69 2f       	mov	r22, r25
    5442:	40 e0       	ldi	r20, 0x00	; 0
    5444:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>


		for(Local_u8RowIndex = ROW_BEG ; Local_u8RowIndex <ROW_NUM ; Local_u8RowIndex++ )
    5448:	10 92 4f 02 	sts	0x024F, r1
    544c:	43 c0       	rjmp	.+134    	; 0x54d4 <KPD_u8GetPressedKey+0xba>
		{
			/*Read the current Row*/
			DIO_enumGetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex] ,&Local_u8PinState );
    544e:	80 91 4f 02 	lds	r24, 0x024F
    5452:	88 2f       	mov	r24, r24
    5454:	90 e0       	ldi	r25, 0x00	; 0
    5456:	fc 01       	movw	r30, r24
    5458:	e6 5e       	subi	r30, 0xE6	; 230
    545a:	fd 4f       	sbci	r31, 0xFD	; 253
    545c:	90 81       	ld	r25, Z
    545e:	2e e4       	ldi	r18, 0x4E	; 78
    5460:	32 e0       	ldi	r19, 0x02	; 2
    5462:	82 e0       	ldi	r24, 0x02	; 2
    5464:	69 2f       	mov	r22, r25
    5466:	a9 01       	movw	r20, r18
    5468:	0e 94 b0 21 	call	0x4360	; 0x4360 <DIO_enumGetPinValue>

			/*Check if Switch is Pressed */
			if (DIO_LOW == Local_u8PinState)
    546c:	80 91 4e 02 	lds	r24, 0x024E
    5470:	88 23       	and	r24, r24
    5472:	59 f5       	brne	.+86     	; 0x54ca <KPD_u8GetPressedKey+0xb0>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    5474:	80 91 4f 02 	lds	r24, 0x024F
    5478:	48 2f       	mov	r20, r24
    547a:	50 e0       	ldi	r21, 0x00	; 0
    547c:	80 91 50 02 	lds	r24, 0x0250
    5480:	28 2f       	mov	r18, r24
    5482:	30 e0       	ldi	r19, 0x00	; 0
    5484:	ca 01       	movw	r24, r20
    5486:	88 0f       	add	r24, r24
    5488:	99 1f       	adc	r25, r25
    548a:	88 0f       	add	r24, r24
    548c:	99 1f       	adc	r25, r25
    548e:	82 0f       	add	r24, r18
    5490:	93 1f       	adc	r25, r19
    5492:	fc 01       	movw	r30, r24
    5494:	ee 5d       	subi	r30, 0xDE	; 222
    5496:	fd 4f       	sbci	r31, 0xFD	; 253
    5498:	80 81       	ld	r24, Z
    549a:	89 83       	std	Y+1, r24	; 0x01
    549c:	0f c0       	rjmp	.+30     	; 0x54bc <KPD_u8GetPressedKey+0xa2>

				/*Polling (busy waiting) until the Key is released*/
				/*stay here if the button is pressed, we could put delay 200 --> 250 ms instead of that*/
				while (DIO_LOW == Local_u8PinState)
				{
					DIO_enumGetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex] ,&Local_u8PinState );
    549e:	80 91 4f 02 	lds	r24, 0x024F
    54a2:	88 2f       	mov	r24, r24
    54a4:	90 e0       	ldi	r25, 0x00	; 0
    54a6:	fc 01       	movw	r30, r24
    54a8:	e6 5e       	subi	r30, 0xE6	; 230
    54aa:	fd 4f       	sbci	r31, 0xFD	; 253
    54ac:	90 81       	ld	r25, Z
    54ae:	2e e4       	ldi	r18, 0x4E	; 78
    54b0:	32 e0       	ldi	r19, 0x02	; 2
    54b2:	82 e0       	ldi	r24, 0x02	; 2
    54b4:	69 2f       	mov	r22, r25
    54b6:	a9 01       	movw	r20, r18
    54b8:	0e 94 b0 21 	call	0x4360	; 0x4360 <DIO_enumGetPinValue>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];

				/*Polling (busy waiting) until the Key is released*/
				/*stay here if the button is pressed, we could put delay 200 --> 250 ms instead of that*/
				while (DIO_LOW == Local_u8PinState)
    54bc:	80 91 4e 02 	lds	r24, 0x024E
    54c0:	88 23       	and	r24, r24
    54c2:	69 f3       	breq	.-38     	; 0x549e <KPD_u8GetPressedKey+0x84>
				{
					DIO_enumGetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex] ,&Local_u8PinState );
				}

				return Local_u8PressedKey;
    54c4:	89 81       	ldd	r24, Y+1	; 0x01
    54c6:	8a 83       	std	Y+2, r24	; 0x02
    54c8:	23 c0       	rjmp	.+70     	; 0x5510 <KPD_u8GetPressedKey+0xf6>
	{
		/*Activate Current Column*/
		DIO_enumSetPinValue(KPD_PORT, Local_u8ColumnArr[Local_u8ColumnIndex] , DIO_LOW);


		for(Local_u8RowIndex = ROW_BEG ; Local_u8RowIndex <ROW_NUM ; Local_u8RowIndex++ )
    54ca:	80 91 4f 02 	lds	r24, 0x024F
    54ce:	8f 5f       	subi	r24, 0xFF	; 255
    54d0:	80 93 4f 02 	sts	0x024F, r24
    54d4:	80 91 4f 02 	lds	r24, 0x024F
    54d8:	84 30       	cpi	r24, 0x04	; 4
    54da:	08 f4       	brcc	.+2      	; 0x54de <KPD_u8GetPressedKey+0xc4>
    54dc:	b8 cf       	rjmp	.-144    	; 0x544e <KPD_u8GetPressedKey+0x34>

				return Local_u8PressedKey;
			}
		}
		/*deactivate Current Column*/
		DIO_enumSetPinValue(KPD_PORT, Local_u8ColumnArr[Local_u8ColumnIndex] , DIO_HIGH);
    54de:	80 91 50 02 	lds	r24, 0x0250
    54e2:	88 2f       	mov	r24, r24
    54e4:	90 e0       	ldi	r25, 0x00	; 0
    54e6:	fc 01       	movw	r30, r24
    54e8:	e2 5e       	subi	r30, 0xE2	; 226
    54ea:	fd 4f       	sbci	r31, 0xFD	; 253
    54ec:	90 81       	ld	r25, Z
    54ee:	82 e0       	ldi	r24, 0x02	; 2
    54f0:	69 2f       	mov	r22, r25
    54f2:	41 e0       	ldi	r20, 0x01	; 1
    54f4:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	/*Array each column and row array Pins */
	static u8 Local_u8ColumnArr[COLUMN_NUM]={KPD_PIN_C0,KPD_PIN_C1,KPD_PIN_C2,KPD_PIN_C3};
	static u8 Local_u8RowArr[ROW_NUM]={KPD_PIN_R0,KPD_PIN_R1 ,KPD_PIN_R2 ,KPD_PIN_R3};

	/*Activate all columns high and low */
	for(Local_u8ColumnIndex = COLUMN_BEG ;Local_u8ColumnIndex < COLUMN_NUM ; Local_u8ColumnIndex++)
    54f8:	80 91 50 02 	lds	r24, 0x0250
    54fc:	8f 5f       	subi	r24, 0xFF	; 255
    54fe:	80 93 50 02 	sts	0x0250, r24
    5502:	80 91 50 02 	lds	r24, 0x0250
    5506:	84 30       	cpi	r24, 0x04	; 4
    5508:	08 f4       	brcc	.+2      	; 0x550c <KPD_u8GetPressedKey+0xf2>
    550a:	91 cf       	rjmp	.-222    	; 0x542e <KPD_u8GetPressedKey+0x14>
			}
		}
		/*deactivate Current Column*/
		DIO_enumSetPinValue(KPD_PORT, Local_u8ColumnArr[Local_u8ColumnIndex] , DIO_HIGH);
	}
	return Local_u8PressedKey;
    550c:	89 81       	ldd	r24, Y+1	; 0x01
    550e:	8a 83       	std	Y+2, r24	; 0x02
    5510:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5512:	0f 90       	pop	r0
    5514:	0f 90       	pop	r0
    5516:	cf 91       	pop	r28
    5518:	df 91       	pop	r29
    551a:	08 95       	ret

0000551c <LM35_voidInit>:




void LM35_voidInit(void)
{
    551c:	df 93       	push	r29
    551e:	cf 93       	push	r28
    5520:	cd b7       	in	r28, 0x3d	; 61
    5522:	de b7       	in	r29, 0x3e	; 62
	ADC_voidInit();
    5524:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <ADC_voidInit>

}
    5528:	cf 91       	pop	r28
    552a:	df 91       	pop	r29
    552c:	08 95       	ret

0000552e <LM35_u8GetTemperatureValue>:



/*The selection the Resolution please check the ADC_configration*/
u8 LM35_u8GetTemperatureValue(u8 Copy_Channel ,u8 Copy_u8ADCResolution)
{
    552e:	df 93       	push	r29
    5530:	cf 93       	push	r28
    5532:	00 d0       	rcall	.+0      	; 0x5534 <LM35_u8GetTemperatureValue+0x6>
    5534:	00 d0       	rcall	.+0      	; 0x5536 <LM35_u8GetTemperatureValue+0x8>
    5536:	00 d0       	rcall	.+0      	; 0x5538 <LM35_u8GetTemperatureValue+0xa>
    5538:	cd b7       	in	r28, 0x3d	; 61
    553a:	de b7       	in	r29, 0x3e	; 62
    553c:	8d 83       	std	Y+5, r24	; 0x05
    553e:	6e 83       	std	Y+6, r22	; 0x06
	u16 Local_u16ADCResult ;
	u16 Local_u16AnalogValue ;

	ADC_u16StartConversionSynch(Copy_Channel, &Local_u16ADCResult);
    5540:	9e 01       	movw	r18, r28
    5542:	2d 5f       	subi	r18, 0xFD	; 253
    5544:	3f 4f       	sbci	r19, 0xFF	; 255
    5546:	8d 81       	ldd	r24, Y+5	; 0x05
    5548:	b9 01       	movw	r22, r18
    554a:	0e 94 99 14 	call	0x2932	; 0x2932 <ADC_u16StartConversionSynch>

	if ( Copy_u8ADCResolution == LM35_RESOLUTION_10 )
    554e:	8e 81       	ldd	r24, Y+6	; 0x06
    5550:	8a 30       	cpi	r24, 0x0A	; 10
    5552:	d9 f4       	brne	.+54     	; 0x558a <LM35_u8GetTemperatureValue+0x5c>
	{
		Local_u16AnalogValue = (u16)(((u32)Local_u16ADCResult * 5000UL )/1024UL);
    5554:	8b 81       	ldd	r24, Y+3	; 0x03
    5556:	9c 81       	ldd	r25, Y+4	; 0x04
    5558:	cc 01       	movw	r24, r24
    555a:	a0 e0       	ldi	r26, 0x00	; 0
    555c:	b0 e0       	ldi	r27, 0x00	; 0
    555e:	28 e8       	ldi	r18, 0x88	; 136
    5560:	33 e1       	ldi	r19, 0x13	; 19
    5562:	40 e0       	ldi	r20, 0x00	; 0
    5564:	50 e0       	ldi	r21, 0x00	; 0
    5566:	bc 01       	movw	r22, r24
    5568:	cd 01       	movw	r24, r26
    556a:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
    556e:	dc 01       	movw	r26, r24
    5570:	cb 01       	movw	r24, r22
    5572:	07 2e       	mov	r0, r23
    5574:	7a e0       	ldi	r23, 0x0A	; 10
    5576:	b6 95       	lsr	r27
    5578:	a7 95       	ror	r26
    557a:	97 95       	ror	r25
    557c:	87 95       	ror	r24
    557e:	7a 95       	dec	r23
    5580:	d1 f7       	brne	.-12     	; 0x5576 <LM35_u8GetTemperatureValue+0x48>
    5582:	70 2d       	mov	r23, r0
    5584:	9a 83       	std	Y+2, r25	; 0x02
    5586:	89 83       	std	Y+1, r24	; 0x01
    5588:	18 c0       	rjmp	.+48     	; 0x55ba <LM35_u8GetTemperatureValue+0x8c>
	}

	else if (Copy_u8ADCResolution == LM35_RESOLUTION_8)
    558a:	8e 81       	ldd	r24, Y+6	; 0x06
    558c:	88 30       	cpi	r24, 0x08	; 8
    558e:	a9 f4       	brne	.+42     	; 0x55ba <LM35_u8GetTemperatureValue+0x8c>
	{
		Local_u16AnalogValue = (u16)(((u32)Local_u16ADCResult * 5000UL )/256UL);
    5590:	8b 81       	ldd	r24, Y+3	; 0x03
    5592:	9c 81       	ldd	r25, Y+4	; 0x04
    5594:	cc 01       	movw	r24, r24
    5596:	a0 e0       	ldi	r26, 0x00	; 0
    5598:	b0 e0       	ldi	r27, 0x00	; 0
    559a:	28 e8       	ldi	r18, 0x88	; 136
    559c:	33 e1       	ldi	r19, 0x13	; 19
    559e:	40 e0       	ldi	r20, 0x00	; 0
    55a0:	50 e0       	ldi	r21, 0x00	; 0
    55a2:	bc 01       	movw	r22, r24
    55a4:	cd 01       	movw	r24, r26
    55a6:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__mulsi3>
    55aa:	dc 01       	movw	r26, r24
    55ac:	cb 01       	movw	r24, r22
    55ae:	89 2f       	mov	r24, r25
    55b0:	9a 2f       	mov	r25, r26
    55b2:	ab 2f       	mov	r26, r27
    55b4:	bb 27       	eor	r27, r27
    55b6:	9a 83       	std	Y+2, r25	; 0x02
    55b8:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Convert ( mv --> Temp ) */
	 return (Local_u16AnalogValue / 10) ;
    55ba:	89 81       	ldd	r24, Y+1	; 0x01
    55bc:	9a 81       	ldd	r25, Y+2	; 0x02
    55be:	2a e0       	ldi	r18, 0x0A	; 10
    55c0:	30 e0       	ldi	r19, 0x00	; 0
    55c2:	b9 01       	movw	r22, r18
    55c4:	0e 94 03 4c 	call	0x9806	; 0x9806 <__udivmodhi4>
    55c8:	cb 01       	movw	r24, r22
}
    55ca:	26 96       	adiw	r28, 0x06	; 6
    55cc:	0f b6       	in	r0, 0x3f	; 63
    55ce:	f8 94       	cli
    55d0:	de bf       	out	0x3e, r29	; 62
    55d2:	0f be       	out	0x3f, r0	; 63
    55d4:	cd bf       	out	0x3d, r28	; 61
    55d6:	cf 91       	pop	r28
    55d8:	df 91       	pop	r29
    55da:	08 95       	ret

000055dc <LED_voidPinInit>:
/*****************************************************************/
/******************* Public Function for Pin LED *****************/
/*****************************************************************/

void LED_voidPinInit( LED_T *LED_Configuration )
{
    55dc:	df 93       	push	r29
    55de:	cf 93       	push	r28
    55e0:	00 d0       	rcall	.+0      	; 0x55e2 <LED_voidPinInit+0x6>
    55e2:	cd b7       	in	r28, 0x3d	; 61
    55e4:	de b7       	in	r29, 0x3e	; 62
    55e6:	9a 83       	std	Y+2, r25	; 0x02
    55e8:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinDirection(LED_Configuration->Port,LED_Configuration->Pin,LED_OUTPUT);
    55ea:	e9 81       	ldd	r30, Y+1	; 0x01
    55ec:	fa 81       	ldd	r31, Y+2	; 0x02
    55ee:	80 81       	ld	r24, Z
    55f0:	e9 81       	ldd	r30, Y+1	; 0x01
    55f2:	fa 81       	ldd	r31, Y+2	; 0x02
    55f4:	91 81       	ldd	r25, Z+1	; 0x01
    55f6:	69 2f       	mov	r22, r25
    55f8:	41 e0       	ldi	r20, 0x01	; 1
    55fa:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
}
    55fe:	0f 90       	pop	r0
    5600:	0f 90       	pop	r0
    5602:	cf 91       	pop	r28
    5604:	df 91       	pop	r29
    5606:	08 95       	ret

00005608 <LED_voidPinTurnOn>:

void LED_voidPinTurnOn( LED_T *LED_Configuration )
{
    5608:	df 93       	push	r29
    560a:	cf 93       	push	r28
    560c:	00 d0       	rcall	.+0      	; 0x560e <LED_voidPinTurnOn+0x6>
    560e:	cd b7       	in	r28, 0x3d	; 61
    5610:	de b7       	in	r29, 0x3e	; 62
    5612:	9a 83       	std	Y+2, r25	; 0x02
    5614:	89 83       	std	Y+1, r24	; 0x01
	if (LED_Configuration->Conn_T == LED_SOURCE)
    5616:	e9 81       	ldd	r30, Y+1	; 0x01
    5618:	fa 81       	ldd	r31, Y+2	; 0x02
    561a:	82 81       	ldd	r24, Z+2	; 0x02
    561c:	81 30       	cpi	r24, 0x01	; 1
    561e:	59 f4       	brne	.+22     	; 0x5636 <LED_voidPinTurnOn+0x2e>
	{
		DIO_enumSetPinValue(LED_Configuration->Port,LED_Configuration->Pin,LED_HIGH);
    5620:	e9 81       	ldd	r30, Y+1	; 0x01
    5622:	fa 81       	ldd	r31, Y+2	; 0x02
    5624:	80 81       	ld	r24, Z
    5626:	e9 81       	ldd	r30, Y+1	; 0x01
    5628:	fa 81       	ldd	r31, Y+2	; 0x02
    562a:	91 81       	ldd	r25, Z+1	; 0x01
    562c:	69 2f       	mov	r22, r25
    562e:	41 e0       	ldi	r20, 0x01	; 1
    5630:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
    5634:	0f c0       	rjmp	.+30     	; 0x5654 <LED_voidPinTurnOn+0x4c>
	}
	else if (LED_Configuration->Conn_T == LED_SINK)
    5636:	e9 81       	ldd	r30, Y+1	; 0x01
    5638:	fa 81       	ldd	r31, Y+2	; 0x02
    563a:	82 81       	ldd	r24, Z+2	; 0x02
    563c:	88 23       	and	r24, r24
    563e:	51 f4       	brne	.+20     	; 0x5654 <LED_voidPinTurnOn+0x4c>
	{
		DIO_enumSetPinValue(LED_Configuration->Port,LED_Configuration->Pin,LED_LOW);
    5640:	e9 81       	ldd	r30, Y+1	; 0x01
    5642:	fa 81       	ldd	r31, Y+2	; 0x02
    5644:	80 81       	ld	r24, Z
    5646:	e9 81       	ldd	r30, Y+1	; 0x01
    5648:	fa 81       	ldd	r31, Y+2	; 0x02
    564a:	91 81       	ldd	r25, Z+1	; 0x01
    564c:	69 2f       	mov	r22, r25
    564e:	40 e0       	ldi	r20, 0x00	; 0
    5650:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	}
}
    5654:	0f 90       	pop	r0
    5656:	0f 90       	pop	r0
    5658:	cf 91       	pop	r28
    565a:	df 91       	pop	r29
    565c:	08 95       	ret

0000565e <LED_voidPinTurnOff>:


void LED_voidPinTurnOff( LED_T *LED_Configuration )
{
    565e:	df 93       	push	r29
    5660:	cf 93       	push	r28
    5662:	00 d0       	rcall	.+0      	; 0x5664 <LED_voidPinTurnOff+0x6>
    5664:	cd b7       	in	r28, 0x3d	; 61
    5666:	de b7       	in	r29, 0x3e	; 62
    5668:	9a 83       	std	Y+2, r25	; 0x02
    566a:	89 83       	std	Y+1, r24	; 0x01
	if (LED_Configuration->Conn_T == LED_SOURCE)
    566c:	e9 81       	ldd	r30, Y+1	; 0x01
    566e:	fa 81       	ldd	r31, Y+2	; 0x02
    5670:	82 81       	ldd	r24, Z+2	; 0x02
    5672:	81 30       	cpi	r24, 0x01	; 1
    5674:	59 f4       	brne	.+22     	; 0x568c <LED_voidPinTurnOff+0x2e>
	{
		DIO_enumSetPinValue(LED_Configuration->Port,LED_Configuration->Pin,LED_LOW);
    5676:	e9 81       	ldd	r30, Y+1	; 0x01
    5678:	fa 81       	ldd	r31, Y+2	; 0x02
    567a:	80 81       	ld	r24, Z
    567c:	e9 81       	ldd	r30, Y+1	; 0x01
    567e:	fa 81       	ldd	r31, Y+2	; 0x02
    5680:	91 81       	ldd	r25, Z+1	; 0x01
    5682:	69 2f       	mov	r22, r25
    5684:	40 e0       	ldi	r20, 0x00	; 0
    5686:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
    568a:	0f c0       	rjmp	.+30     	; 0x56aa <LED_voidPinTurnOff+0x4c>
	}
	else if (LED_Configuration->Conn_T == LED_SINK)
    568c:	e9 81       	ldd	r30, Y+1	; 0x01
    568e:	fa 81       	ldd	r31, Y+2	; 0x02
    5690:	82 81       	ldd	r24, Z+2	; 0x02
    5692:	88 23       	and	r24, r24
    5694:	51 f4       	brne	.+20     	; 0x56aa <LED_voidPinTurnOff+0x4c>
	{
		DIO_enumSetPinValue(LED_Configuration->Port,LED_Configuration->Pin,LED_HIGH);
    5696:	e9 81       	ldd	r30, Y+1	; 0x01
    5698:	fa 81       	ldd	r31, Y+2	; 0x02
    569a:	80 81       	ld	r24, Z
    569c:	e9 81       	ldd	r30, Y+1	; 0x01
    569e:	fa 81       	ldd	r31, Y+2	; 0x02
    56a0:	91 81       	ldd	r25, Z+1	; 0x01
    56a2:	69 2f       	mov	r22, r25
    56a4:	41 e0       	ldi	r20, 0x01	; 1
    56a6:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	}

}
    56aa:	0f 90       	pop	r0
    56ac:	0f 90       	pop	r0
    56ae:	cf 91       	pop	r28
    56b0:	df 91       	pop	r29
    56b2:	08 95       	ret

000056b4 <LED_voidPinToggle>:



void LED_voidPinToggle( LED_T *LED_Configuration )
{
    56b4:	df 93       	push	r29
    56b6:	cf 93       	push	r28
    56b8:	00 d0       	rcall	.+0      	; 0x56ba <LED_voidPinToggle+0x6>
    56ba:	cd b7       	in	r28, 0x3d	; 61
    56bc:	de b7       	in	r29, 0x3e	; 62
    56be:	9a 83       	std	Y+2, r25	; 0x02
    56c0:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumTogglePinValue(LED_Configuration->Port,LED_Configuration->Pin);
    56c2:	e9 81       	ldd	r30, Y+1	; 0x01
    56c4:	fa 81       	ldd	r31, Y+2	; 0x02
    56c6:	80 81       	ld	r24, Z
    56c8:	e9 81       	ldd	r30, Y+1	; 0x01
    56ca:	fa 81       	ldd	r31, Y+2	; 0x02
    56cc:	91 81       	ldd	r25, Z+1	; 0x01
    56ce:	69 2f       	mov	r22, r25
    56d0:	0e 94 44 22 	call	0x4488	; 0x4488 <DIO_enumTogglePinValue>
}
    56d4:	0f 90       	pop	r0
    56d6:	0f 90       	pop	r0
    56d8:	cf 91       	pop	r28
    56da:	df 91       	pop	r29
    56dc:	08 95       	ret

000056de <LED_voidPortInit>:
/******************* Public Function for Port LED ****************/
/*****************************************************************/


void LED_voidPortInit( LED_Port_T *LED_Configuration )
{
    56de:	df 93       	push	r29
    56e0:	cf 93       	push	r28
    56e2:	00 d0       	rcall	.+0      	; 0x56e4 <LED_voidPortInit+0x6>
    56e4:	cd b7       	in	r28, 0x3d	; 61
    56e6:	de b7       	in	r29, 0x3e	; 62
    56e8:	9a 83       	std	Y+2, r25	; 0x02
    56ea:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPortDirection(LED_Configuration->Port,LED_PORT_OUTPUT);
    56ec:	e9 81       	ldd	r30, Y+1	; 0x01
    56ee:	fa 81       	ldd	r31, Y+2	; 0x02
    56f0:	80 81       	ld	r24, Z
    56f2:	6f ef       	ldi	r22, 0xFF	; 255
    56f4:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <DIO_enumSetPortDirection>
}
    56f8:	0f 90       	pop	r0
    56fa:	0f 90       	pop	r0
    56fc:	cf 91       	pop	r28
    56fe:	df 91       	pop	r29
    5700:	08 95       	ret

00005702 <LED_voidPortTurnOn>:

void LED_voidPortTurnOn( LED_Port_T *LED_Configuration )
{
    5702:	df 93       	push	r29
    5704:	cf 93       	push	r28
    5706:	00 d0       	rcall	.+0      	; 0x5708 <LED_voidPortTurnOn+0x6>
    5708:	cd b7       	in	r28, 0x3d	; 61
    570a:	de b7       	in	r29, 0x3e	; 62
    570c:	9a 83       	std	Y+2, r25	; 0x02
    570e:	89 83       	std	Y+1, r24	; 0x01
	if (LED_Configuration->Conn_T == LED_SOURCE)
    5710:	e9 81       	ldd	r30, Y+1	; 0x01
    5712:	fa 81       	ldd	r31, Y+2	; 0x02
    5714:	81 81       	ldd	r24, Z+1	; 0x01
    5716:	81 30       	cpi	r24, 0x01	; 1
    5718:	39 f4       	brne	.+14     	; 0x5728 <LED_voidPortTurnOn+0x26>
	{
		DIO_enumSetPortValue(LED_Configuration->Port,LED_PORT_HIGH);
    571a:	e9 81       	ldd	r30, Y+1	; 0x01
    571c:	fa 81       	ldd	r31, Y+2	; 0x02
    571e:	80 81       	ld	r24, Z
    5720:	6f ef       	ldi	r22, 0xFF	; 255
    5722:	0e 94 57 23 	call	0x46ae	; 0x46ae <DIO_enumSetPortValue>
    5726:	0b c0       	rjmp	.+22     	; 0x573e <LED_voidPortTurnOn+0x3c>
	}
	else if (LED_Configuration->Conn_T == LED_SINK)
    5728:	e9 81       	ldd	r30, Y+1	; 0x01
    572a:	fa 81       	ldd	r31, Y+2	; 0x02
    572c:	81 81       	ldd	r24, Z+1	; 0x01
    572e:	88 23       	and	r24, r24
    5730:	31 f4       	brne	.+12     	; 0x573e <LED_voidPortTurnOn+0x3c>
	{
		DIO_enumSetPortValue(LED_Configuration->Port,LED_PORT_LOW);
    5732:	e9 81       	ldd	r30, Y+1	; 0x01
    5734:	fa 81       	ldd	r31, Y+2	; 0x02
    5736:	80 81       	ld	r24, Z
    5738:	60 e0       	ldi	r22, 0x00	; 0
    573a:	0e 94 57 23 	call	0x46ae	; 0x46ae <DIO_enumSetPortValue>
	}
}
    573e:	0f 90       	pop	r0
    5740:	0f 90       	pop	r0
    5742:	cf 91       	pop	r28
    5744:	df 91       	pop	r29
    5746:	08 95       	ret

00005748 <LED_voidPortTurnOff>:

void LED_voidPortTurnOff( LED_Port_T *LED_Configuration )
{
    5748:	df 93       	push	r29
    574a:	cf 93       	push	r28
    574c:	00 d0       	rcall	.+0      	; 0x574e <LED_voidPortTurnOff+0x6>
    574e:	cd b7       	in	r28, 0x3d	; 61
    5750:	de b7       	in	r29, 0x3e	; 62
    5752:	9a 83       	std	Y+2, r25	; 0x02
    5754:	89 83       	std	Y+1, r24	; 0x01

	if (LED_Configuration->Conn_T == LED_SOURCE)
    5756:	e9 81       	ldd	r30, Y+1	; 0x01
    5758:	fa 81       	ldd	r31, Y+2	; 0x02
    575a:	81 81       	ldd	r24, Z+1	; 0x01
    575c:	81 30       	cpi	r24, 0x01	; 1
    575e:	39 f4       	brne	.+14     	; 0x576e <LED_voidPortTurnOff+0x26>
	{
		DIO_enumSetPortValue(LED_Configuration->Port,LED_PORT_LOW);
    5760:	e9 81       	ldd	r30, Y+1	; 0x01
    5762:	fa 81       	ldd	r31, Y+2	; 0x02
    5764:	80 81       	ld	r24, Z
    5766:	60 e0       	ldi	r22, 0x00	; 0
    5768:	0e 94 57 23 	call	0x46ae	; 0x46ae <DIO_enumSetPortValue>
    576c:	0b c0       	rjmp	.+22     	; 0x5784 <LED_voidPortTurnOff+0x3c>
	}
	else if (LED_Configuration->Conn_T == LED_SINK)
    576e:	e9 81       	ldd	r30, Y+1	; 0x01
    5770:	fa 81       	ldd	r31, Y+2	; 0x02
    5772:	81 81       	ldd	r24, Z+1	; 0x01
    5774:	88 23       	and	r24, r24
    5776:	31 f4       	brne	.+12     	; 0x5784 <LED_voidPortTurnOff+0x3c>
	{
		DIO_enumSetPortValue(LED_Configuration->Port,LED_PORT_HIGH);
    5778:	e9 81       	ldd	r30, Y+1	; 0x01
    577a:	fa 81       	ldd	r31, Y+2	; 0x02
    577c:	80 81       	ld	r24, Z
    577e:	6f ef       	ldi	r22, 0xFF	; 255
    5780:	0e 94 57 23 	call	0x46ae	; 0x46ae <DIO_enumSetPortValue>
	}
}
    5784:	0f 90       	pop	r0
    5786:	0f 90       	pop	r0
    5788:	cf 91       	pop	r28
    578a:	df 91       	pop	r29
    578c:	08 95       	ret

0000578e <LED_voidPortToggle>:

void LED_voidPortToggle( LED_Port_T *LED_Configuration )
{
    578e:	df 93       	push	r29
    5790:	cf 93       	push	r28
    5792:	00 d0       	rcall	.+0      	; 0x5794 <LED_voidPortToggle+0x6>
    5794:	cd b7       	in	r28, 0x3d	; 61
    5796:	de b7       	in	r29, 0x3e	; 62
    5798:	9a 83       	std	Y+2, r25	; 0x02
    579a:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumTogglePortValue(LED_Configuration->Port);
    579c:	e9 81       	ldd	r30, Y+1	; 0x01
    579e:	fa 81       	ldd	r31, Y+2	; 0x02
    57a0:	80 81       	ld	r24, Z
    57a2:	0e 94 a2 23 	call	0x4744	; 0x4744 <DIO_enumTogglePortValue>
}
    57a6:	0f 90       	pop	r0
    57a8:	0f 90       	pop	r0
    57aa:	cf 91       	pop	r28
    57ac:	df 91       	pop	r29
    57ae:	08 95       	ret

000057b0 <LED_voidPortSetValue>:


void LED_voidPortSetValue( LED_Port_T *LED_Configuration , u8 Copy_u8Value)
{
    57b0:	df 93       	push	r29
    57b2:	cf 93       	push	r28
    57b4:	00 d0       	rcall	.+0      	; 0x57b6 <LED_voidPortSetValue+0x6>
    57b6:	0f 92       	push	r0
    57b8:	cd b7       	in	r28, 0x3d	; 61
    57ba:	de b7       	in	r29, 0x3e	; 62
    57bc:	9a 83       	std	Y+2, r25	; 0x02
    57be:	89 83       	std	Y+1, r24	; 0x01
    57c0:	6b 83       	std	Y+3, r22	; 0x03
	if (LED_Configuration->Conn_T == LED_SOURCE)
    57c2:	e9 81       	ldd	r30, Y+1	; 0x01
    57c4:	fa 81       	ldd	r31, Y+2	; 0x02
    57c6:	81 81       	ldd	r24, Z+1	; 0x01
    57c8:	81 30       	cpi	r24, 0x01	; 1
    57ca:	39 f4       	brne	.+14     	; 0x57da <LED_voidPortSetValue+0x2a>
	{
		DIO_enumSetPortValue(LED_Configuration->Port,Copy_u8Value);
    57cc:	e9 81       	ldd	r30, Y+1	; 0x01
    57ce:	fa 81       	ldd	r31, Y+2	; 0x02
    57d0:	80 81       	ld	r24, Z
    57d2:	6b 81       	ldd	r22, Y+3	; 0x03
    57d4:	0e 94 57 23 	call	0x46ae	; 0x46ae <DIO_enumSetPortValue>
    57d8:	0b c0       	rjmp	.+22     	; 0x57f0 <LED_voidPortSetValue+0x40>
	}
	else if (LED_Configuration->Conn_T == LED_SINK)
    57da:	e9 81       	ldd	r30, Y+1	; 0x01
    57dc:	fa 81       	ldd	r31, Y+2	; 0x02
    57de:	81 81       	ldd	r24, Z+1	; 0x01
    57e0:	88 23       	and	r24, r24
    57e2:	31 f4       	brne	.+12     	; 0x57f0 <LED_voidPortSetValue+0x40>
	{
		DIO_enumSetPortValue(LED_Configuration->Port,Copy_u8Value);
    57e4:	e9 81       	ldd	r30, Y+1	; 0x01
    57e6:	fa 81       	ldd	r31, Y+2	; 0x02
    57e8:	80 81       	ld	r24, Z
    57ea:	6b 81       	ldd	r22, Y+3	; 0x03
    57ec:	0e 94 57 23 	call	0x46ae	; 0x46ae <DIO_enumSetPortValue>
	}
}
    57f0:	0f 90       	pop	r0
    57f2:	0f 90       	pop	r0
    57f4:	0f 90       	pop	r0
    57f6:	cf 91       	pop	r28
    57f8:	df 91       	pop	r29
    57fa:	08 95       	ret

000057fc <MAPPING_s32GetOutput>:

#include "STD_TYPES.h"
#include "Mapping_interface.h"

s32 MAPPING_s32GetOutput (s32 Copy_s32InputMin ,s32 Copy_s32InputMax ,s32 Copy_s32OutputMin ,s32 Copy_s32OutputMax ,s32 Copy_s32InputValue )
{
    57fc:	af 92       	push	r10
    57fe:	bf 92       	push	r11
    5800:	cf 92       	push	r12
    5802:	df 92       	push	r13
    5804:	ef 92       	push	r14
    5806:	ff 92       	push	r15
    5808:	0f 93       	push	r16
    580a:	1f 93       	push	r17
    580c:	df 93       	push	r29
    580e:	cf 93       	push	r28
    5810:	cd b7       	in	r28, 0x3d	; 61
    5812:	de b7       	in	r29, 0x3e	; 62
    5814:	a4 97       	sbiw	r28, 0x24	; 36
    5816:	0f b6       	in	r0, 0x3f	; 63
    5818:	f8 94       	cli
    581a:	de bf       	out	0x3e, r29	; 62
    581c:	0f be       	out	0x3f, r0	; 63
    581e:	cd bf       	out	0x3d, r28	; 61
    5820:	6d 8b       	std	Y+21, r22	; 0x15
    5822:	7e 8b       	std	Y+22, r23	; 0x16
    5824:	8f 8b       	std	Y+23, r24	; 0x17
    5826:	98 8f       	std	Y+24, r25	; 0x18
    5828:	29 8f       	std	Y+25, r18	; 0x19
    582a:	3a 8f       	std	Y+26, r19	; 0x1a
    582c:	4b 8f       	std	Y+27, r20	; 0x1b
    582e:	5c 8f       	std	Y+28, r21	; 0x1c
    5830:	ed 8e       	std	Y+29, r14	; 0x1d
    5832:	fe 8e       	std	Y+30, r15	; 0x1e
    5834:	0f 8f       	std	Y+31, r16	; 0x1f
    5836:	18 a3       	std	Y+32, r17	; 0x20
    5838:	a9 a2       	std	Y+33, r10	; 0x21
    583a:	ba a2       	std	Y+34, r11	; 0x22
    583c:	cb a2       	std	Y+35, r12	; 0x23
    583e:	dc a2       	std	Y+36, r13	; 0x24
	// Calculate the input range and output range spans
	s32 input_span = Copy_s32InputMax - Copy_s32InputMin;
    5840:	29 8d       	ldd	r18, Y+25	; 0x19
    5842:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5844:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5846:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5848:	8d 89       	ldd	r24, Y+21	; 0x15
    584a:	9e 89       	ldd	r25, Y+22	; 0x16
    584c:	af 89       	ldd	r26, Y+23	; 0x17
    584e:	b8 8d       	ldd	r27, Y+24	; 0x18
    5850:	79 01       	movw	r14, r18
    5852:	8a 01       	movw	r16, r20
    5854:	e8 1a       	sub	r14, r24
    5856:	f9 0a       	sbc	r15, r25
    5858:	0a 0b       	sbc	r16, r26
    585a:	1b 0b       	sbc	r17, r27
    585c:	d8 01       	movw	r26, r16
    585e:	c7 01       	movw	r24, r14
    5860:	89 8b       	std	Y+17, r24	; 0x11
    5862:	9a 8b       	std	Y+18, r25	; 0x12
    5864:	ab 8b       	std	Y+19, r26	; 0x13
    5866:	bc 8b       	std	Y+20, r27	; 0x14
	s32 output_span = Copy_s32OutputMax - Copy_s32OutputMin;
    5868:	29 a1       	ldd	r18, Y+33	; 0x21
    586a:	3a a1       	ldd	r19, Y+34	; 0x22
    586c:	4b a1       	ldd	r20, Y+35	; 0x23
    586e:	5c a1       	ldd	r21, Y+36	; 0x24
    5870:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5872:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5874:	af 8d       	ldd	r26, Y+31	; 0x1f
    5876:	b8 a1       	ldd	r27, Y+32	; 0x20
    5878:	79 01       	movw	r14, r18
    587a:	8a 01       	movw	r16, r20
    587c:	e8 1a       	sub	r14, r24
    587e:	f9 0a       	sbc	r15, r25
    5880:	0a 0b       	sbc	r16, r26
    5882:	1b 0b       	sbc	r17, r27
    5884:	d8 01       	movw	r26, r16
    5886:	c7 01       	movw	r24, r14
    5888:	8d 87       	std	Y+13, r24	; 0x0d
    588a:	9e 87       	std	Y+14, r25	; 0x0e
    588c:	af 87       	std	Y+15, r26	; 0x0f
    588e:	b8 8b       	std	Y+16, r27	; 0x10

	// Calculate the input value's distance from the minimum input value
	s32 input_distance = Copy_s32InputValue - Copy_s32InputMin;
    5890:	29 a9       	ldd	r18, Y+49	; 0x31
    5892:	3a a9       	ldd	r19, Y+50	; 0x32
    5894:	4b a9       	ldd	r20, Y+51	; 0x33
    5896:	5c a9       	ldd	r21, Y+52	; 0x34
    5898:	8d 89       	ldd	r24, Y+21	; 0x15
    589a:	9e 89       	ldd	r25, Y+22	; 0x16
    589c:	af 89       	ldd	r26, Y+23	; 0x17
    589e:	b8 8d       	ldd	r27, Y+24	; 0x18
    58a0:	79 01       	movw	r14, r18
    58a2:	8a 01       	movw	r16, r20
    58a4:	e8 1a       	sub	r14, r24
    58a6:	f9 0a       	sbc	r15, r25
    58a8:	0a 0b       	sbc	r16, r26
    58aa:	1b 0b       	sbc	r17, r27
    58ac:	d8 01       	movw	r26, r16
    58ae:	c7 01       	movw	r24, r14
    58b0:	89 87       	std	Y+9, r24	; 0x09
    58b2:	9a 87       	std	Y+10, r25	; 0x0a
    58b4:	ab 87       	std	Y+11, r26	; 0x0b
    58b6:	bc 87       	std	Y+12, r27	; 0x0c

	// Calculate the proportion of the input range span that the input value represents
	f32 input_proportion = (f32)input_distance / (f32)input_span;
    58b8:	69 85       	ldd	r22, Y+9	; 0x09
    58ba:	7a 85       	ldd	r23, Y+10	; 0x0a
    58bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    58be:	9c 85       	ldd	r25, Y+12	; 0x0c
    58c0:	0e 94 3a 11 	call	0x2274	; 0x2274 <__floatsisf>
    58c4:	7b 01       	movw	r14, r22
    58c6:	8c 01       	movw	r16, r24
    58c8:	69 89       	ldd	r22, Y+17	; 0x11
    58ca:	7a 89       	ldd	r23, Y+18	; 0x12
    58cc:	8b 89       	ldd	r24, Y+19	; 0x13
    58ce:	9c 89       	ldd	r25, Y+20	; 0x14
    58d0:	0e 94 3a 11 	call	0x2274	; 0x2274 <__floatsisf>
    58d4:	9b 01       	movw	r18, r22
    58d6:	ac 01       	movw	r20, r24
    58d8:	c8 01       	movw	r24, r16
    58da:	b7 01       	movw	r22, r14
    58dc:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__divsf3>
    58e0:	dc 01       	movw	r26, r24
    58e2:	cb 01       	movw	r24, r22
    58e4:	8d 83       	std	Y+5, r24	; 0x05
    58e6:	9e 83       	std	Y+6, r25	; 0x06
    58e8:	af 83       	std	Y+7, r26	; 0x07
    58ea:	b8 87       	std	Y+8, r27	; 0x08

	// Calculate the output value by scaling the proportion to the output range span
	s32 output_value = Copy_s32OutputMin + (s32)(input_proportion * output_span);
    58ec:	6d 85       	ldd	r22, Y+13	; 0x0d
    58ee:	7e 85       	ldd	r23, Y+14	; 0x0e
    58f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    58f2:	98 89       	ldd	r25, Y+16	; 0x10
    58f4:	0e 94 3a 11 	call	0x2274	; 0x2274 <__floatsisf>
    58f8:	dc 01       	movw	r26, r24
    58fa:	cb 01       	movw	r24, r22
    58fc:	bc 01       	movw	r22, r24
    58fe:	cd 01       	movw	r24, r26
    5900:	2d 81       	ldd	r18, Y+5	; 0x05
    5902:	3e 81       	ldd	r19, Y+6	; 0x06
    5904:	4f 81       	ldd	r20, Y+7	; 0x07
    5906:	58 85       	ldd	r21, Y+8	; 0x08
    5908:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    590c:	dc 01       	movw	r26, r24
    590e:	cb 01       	movw	r24, r22
    5910:	bc 01       	movw	r22, r24
    5912:	cd 01       	movw	r24, r26
    5914:	0e 94 98 11 	call	0x2330	; 0x2330 <__fixsfsi>
    5918:	9b 01       	movw	r18, r22
    591a:	ac 01       	movw	r20, r24
    591c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    591e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5920:	af 8d       	ldd	r26, Y+31	; 0x1f
    5922:	b8 a1       	ldd	r27, Y+32	; 0x20
    5924:	82 0f       	add	r24, r18
    5926:	93 1f       	adc	r25, r19
    5928:	a4 1f       	adc	r26, r20
    592a:	b5 1f       	adc	r27, r21
    592c:	89 83       	std	Y+1, r24	; 0x01
    592e:	9a 83       	std	Y+2, r25	; 0x02
    5930:	ab 83       	std	Y+3, r26	; 0x03
    5932:	bc 83       	std	Y+4, r27	; 0x04

	// Return the mapped output value
	return output_value;
    5934:	89 81       	ldd	r24, Y+1	; 0x01
    5936:	9a 81       	ldd	r25, Y+2	; 0x02
    5938:	ab 81       	ldd	r26, Y+3	; 0x03
    593a:	bc 81       	ldd	r27, Y+4	; 0x04

}
    593c:	bc 01       	movw	r22, r24
    593e:	cd 01       	movw	r24, r26
    5940:	a4 96       	adiw	r28, 0x24	; 36
    5942:	0f b6       	in	r0, 0x3f	; 63
    5944:	f8 94       	cli
    5946:	de bf       	out	0x3e, r29	; 62
    5948:	0f be       	out	0x3f, r0	; 63
    594a:	cd bf       	out	0x3d, r28	; 61
    594c:	cf 91       	pop	r28
    594e:	df 91       	pop	r29
    5950:	1f 91       	pop	r17
    5952:	0f 91       	pop	r16
    5954:	ff 90       	pop	r15
    5956:	ef 90       	pop	r14
    5958:	df 90       	pop	r13
    595a:	cf 90       	pop	r12
    595c:	bf 90       	pop	r11
    595e:	af 90       	pop	r10
    5960:	08 95       	ret

00005962 <Cal_u8CheckPass>:
//n =   1 2
//n-1 = 0 1 2
//

u8 Cal_u8CheckPass(u8 Copy_u8Arr1[] , u8 Copy_u8Arr2[], u8 Copy_u8NumberSizeArr1 , u8 Copy_u8NumberSizeArr2 )
{
    5962:	df 93       	push	r29
    5964:	cf 93       	push	r28
    5966:	cd b7       	in	r28, 0x3d	; 61
    5968:	de b7       	in	r29, 0x3e	; 62
    596a:	29 97       	sbiw	r28, 0x09	; 9
    596c:	0f b6       	in	r0, 0x3f	; 63
    596e:	f8 94       	cli
    5970:	de bf       	out	0x3e, r29	; 62
    5972:	0f be       	out	0x3f, r0	; 63
    5974:	cd bf       	out	0x3d, r28	; 61
    5976:	9d 83       	std	Y+5, r25	; 0x05
    5978:	8c 83       	std	Y+4, r24	; 0x04
    597a:	7f 83       	std	Y+7, r23	; 0x07
    597c:	6e 83       	std	Y+6, r22	; 0x06
    597e:	48 87       	std	Y+8, r20	; 0x08
    5980:	29 87       	std	Y+9, r18	; 0x09
	u8 Local_u8CorrectCheck = STD_TYPES_NOK;
    5982:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Return = 0;
    5984:	1a 82       	std	Y+2, r1	; 0x02


	if(Copy_u8NumberSizeArr1 == Copy_u8NumberSizeArr2)
    5986:	98 85       	ldd	r25, Y+8	; 0x08
    5988:	89 85       	ldd	r24, Y+9	; 0x09
    598a:	98 17       	cp	r25, r24
    598c:	61 f5       	brne	.+88     	; 0x59e6 <Cal_u8CheckPass+0x84>
	{
	for(u8 Local_u8Counter = 0 ; Local_u8Counter <= Copy_u8NumberSizeArr1-1 ; Local_u8Counter++)
    598e:	19 82       	std	Y+1, r1	; 0x01
    5990:	1a c0       	rjmp	.+52     	; 0x59c6 <Cal_u8CheckPass+0x64>
	{
		if (Copy_u8Arr1[Local_u8Counter] == Copy_u8Arr2[Local_u8Counter])
    5992:	89 81       	ldd	r24, Y+1	; 0x01
    5994:	28 2f       	mov	r18, r24
    5996:	30 e0       	ldi	r19, 0x00	; 0
    5998:	8c 81       	ldd	r24, Y+4	; 0x04
    599a:	9d 81       	ldd	r25, Y+5	; 0x05
    599c:	fc 01       	movw	r30, r24
    599e:	e2 0f       	add	r30, r18
    59a0:	f3 1f       	adc	r31, r19
    59a2:	40 81       	ld	r20, Z
    59a4:	89 81       	ldd	r24, Y+1	; 0x01
    59a6:	28 2f       	mov	r18, r24
    59a8:	30 e0       	ldi	r19, 0x00	; 0
    59aa:	8e 81       	ldd	r24, Y+6	; 0x06
    59ac:	9f 81       	ldd	r25, Y+7	; 0x07
    59ae:	fc 01       	movw	r30, r24
    59b0:	e2 0f       	add	r30, r18
    59b2:	f3 1f       	adc	r31, r19
    59b4:	80 81       	ld	r24, Z
    59b6:	48 17       	cp	r20, r24
    59b8:	19 f4       	brne	.+6      	; 0x59c0 <Cal_u8CheckPass+0x5e>
		{
			Local_u8Return++;
    59ba:	8a 81       	ldd	r24, Y+2	; 0x02
    59bc:	8f 5f       	subi	r24, 0xFF	; 255
    59be:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Return = 0;


	if(Copy_u8NumberSizeArr1 == Copy_u8NumberSizeArr2)
	{
	for(u8 Local_u8Counter = 0 ; Local_u8Counter <= Copy_u8NumberSizeArr1-1 ; Local_u8Counter++)
    59c0:	89 81       	ldd	r24, Y+1	; 0x01
    59c2:	8f 5f       	subi	r24, 0xFF	; 255
    59c4:	89 83       	std	Y+1, r24	; 0x01
    59c6:	89 81       	ldd	r24, Y+1	; 0x01
    59c8:	28 2f       	mov	r18, r24
    59ca:	30 e0       	ldi	r19, 0x00	; 0
    59cc:	88 85       	ldd	r24, Y+8	; 0x08
    59ce:	88 2f       	mov	r24, r24
    59d0:	90 e0       	ldi	r25, 0x00	; 0
    59d2:	01 97       	sbiw	r24, 0x01	; 1
    59d4:	82 17       	cp	r24, r18
    59d6:	93 07       	cpc	r25, r19
    59d8:	e4 f6       	brge	.-72     	; 0x5992 <Cal_u8CheckPass+0x30>
		if (Copy_u8Arr1[Local_u8Counter] == Copy_u8Arr2[Local_u8Counter])
		{
			Local_u8Return++;
		}
	}
	if( Local_u8Return == Copy_u8NumberSizeArr1 )
    59da:	9a 81       	ldd	r25, Y+2	; 0x02
    59dc:	88 85       	ldd	r24, Y+8	; 0x08
    59de:	98 17       	cp	r25, r24
    59e0:	11 f4       	brne	.+4      	; 0x59e6 <Cal_u8CheckPass+0x84>
	{
		Local_u8CorrectCheck = STD_TYPES_OK ;
    59e2:	81 e0       	ldi	r24, 0x01	; 1
    59e4:	8b 83       	std	Y+3, r24	; 0x03
	}
	}

	return Local_u8CorrectCheck;
    59e6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    59e8:	29 96       	adiw	r28, 0x09	; 9
    59ea:	0f b6       	in	r0, 0x3f	; 63
    59ec:	f8 94       	cli
    59ee:	de bf       	out	0x3e, r29	; 62
    59f0:	0f be       	out	0x3f, r0	; 63
    59f2:	cd bf       	out	0x3d, r28	; 61
    59f4:	cf 91       	pop	r28
    59f6:	df 91       	pop	r29
    59f8:	08 95       	ret

000059fa <PASS_voidPassCheckCorrect>:


void PASS_voidPassCheckCorrect(void)
{
    59fa:	df 93       	push	r29
    59fc:	cf 93       	push	r28
    59fe:	cd b7       	in	r28, 0x3d	; 61
    5a00:	de b7       	in	r29, 0x3e	; 62
    5a02:	6c 97       	sbiw	r28, 0x1c	; 28
    5a04:	0f b6       	in	r0, 0x3f	; 63
    5a06:	f8 94       	cli
    5a08:	de bf       	out	0x3e, r29	; 62
    5a0a:	0f be       	out	0x3f, r0	; 63
    5a0c:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidClearLCD();
    5a0e:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <CLCD_voidClearLCD>

	CLCD_voidSendStringPosition("loading...", 0 , 0 );
    5a12:	80 e6       	ldi	r24, 0x60	; 96
    5a14:	90 e0       	ldi	r25, 0x00	; 0
    5a16:	60 e0       	ldi	r22, 0x00	; 0
    5a18:	40 e0       	ldi	r20, 0x00	; 0
    5a1a:	0e 94 02 1a 	call	0x3404	; 0x3404 <CLCD_voidSendStringPosition>
    5a1e:	80 e0       	ldi	r24, 0x00	; 0
    5a20:	90 e0       	ldi	r25, 0x00	; 0
    5a22:	aa e7       	ldi	r26, 0x7A	; 122
    5a24:	b4 e4       	ldi	r27, 0x44	; 68
    5a26:	89 8f       	std	Y+25, r24	; 0x19
    5a28:	9a 8f       	std	Y+26, r25	; 0x1a
    5a2a:	ab 8f       	std	Y+27, r26	; 0x1b
    5a2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a2e:	69 8d       	ldd	r22, Y+25	; 0x19
    5a30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a36:	20 e0       	ldi	r18, 0x00	; 0
    5a38:	30 e0       	ldi	r19, 0x00	; 0
    5a3a:	4a ef       	ldi	r20, 0xFA	; 250
    5a3c:	54 e4       	ldi	r21, 0x44	; 68
    5a3e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5a42:	dc 01       	movw	r26, r24
    5a44:	cb 01       	movw	r24, r22
    5a46:	8d 8b       	std	Y+21, r24	; 0x15
    5a48:	9e 8b       	std	Y+22, r25	; 0x16
    5a4a:	af 8b       	std	Y+23, r26	; 0x17
    5a4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5a4e:	6d 89       	ldd	r22, Y+21	; 0x15
    5a50:	7e 89       	ldd	r23, Y+22	; 0x16
    5a52:	8f 89       	ldd	r24, Y+23	; 0x17
    5a54:	98 8d       	ldd	r25, Y+24	; 0x18
    5a56:	20 e0       	ldi	r18, 0x00	; 0
    5a58:	30 e0       	ldi	r19, 0x00	; 0
    5a5a:	40 e8       	ldi	r20, 0x80	; 128
    5a5c:	5f e3       	ldi	r21, 0x3F	; 63
    5a5e:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    5a62:	88 23       	and	r24, r24
    5a64:	2c f4       	brge	.+10     	; 0x5a70 <PASS_voidPassCheckCorrect+0x76>
		__ticks = 1;
    5a66:	81 e0       	ldi	r24, 0x01	; 1
    5a68:	90 e0       	ldi	r25, 0x00	; 0
    5a6a:	9c 8b       	std	Y+20, r25	; 0x14
    5a6c:	8b 8b       	std	Y+19, r24	; 0x13
    5a6e:	3f c0       	rjmp	.+126    	; 0x5aee <PASS_voidPassCheckCorrect+0xf4>
	else if (__tmp > 65535)
    5a70:	6d 89       	ldd	r22, Y+21	; 0x15
    5a72:	7e 89       	ldd	r23, Y+22	; 0x16
    5a74:	8f 89       	ldd	r24, Y+23	; 0x17
    5a76:	98 8d       	ldd	r25, Y+24	; 0x18
    5a78:	20 e0       	ldi	r18, 0x00	; 0
    5a7a:	3f ef       	ldi	r19, 0xFF	; 255
    5a7c:	4f e7       	ldi	r20, 0x7F	; 127
    5a7e:	57 e4       	ldi	r21, 0x47	; 71
    5a80:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    5a84:	18 16       	cp	r1, r24
    5a86:	4c f5       	brge	.+82     	; 0x5ada <PASS_voidPassCheckCorrect+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a88:	69 8d       	ldd	r22, Y+25	; 0x19
    5a8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a90:	20 e0       	ldi	r18, 0x00	; 0
    5a92:	30 e0       	ldi	r19, 0x00	; 0
    5a94:	40 e2       	ldi	r20, 0x20	; 32
    5a96:	51 e4       	ldi	r21, 0x41	; 65
    5a98:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5a9c:	dc 01       	movw	r26, r24
    5a9e:	cb 01       	movw	r24, r22
    5aa0:	bc 01       	movw	r22, r24
    5aa2:	cd 01       	movw	r24, r26
    5aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5aa8:	dc 01       	movw	r26, r24
    5aaa:	cb 01       	movw	r24, r22
    5aac:	9c 8b       	std	Y+20, r25	; 0x14
    5aae:	8b 8b       	std	Y+19, r24	; 0x13
    5ab0:	0f c0       	rjmp	.+30     	; 0x5ad0 <PASS_voidPassCheckCorrect+0xd6>
    5ab2:	88 ec       	ldi	r24, 0xC8	; 200
    5ab4:	90 e0       	ldi	r25, 0x00	; 0
    5ab6:	9a 8b       	std	Y+18, r25	; 0x12
    5ab8:	89 8b       	std	Y+17, r24	; 0x11
    5aba:	89 89       	ldd	r24, Y+17	; 0x11
    5abc:	9a 89       	ldd	r25, Y+18	; 0x12
    5abe:	01 97       	sbiw	r24, 0x01	; 1
    5ac0:	f1 f7       	brne	.-4      	; 0x5abe <PASS_voidPassCheckCorrect+0xc4>
    5ac2:	9a 8b       	std	Y+18, r25	; 0x12
    5ac4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    5ac8:	9c 89       	ldd	r25, Y+20	; 0x14
    5aca:	01 97       	sbiw	r24, 0x01	; 1
    5acc:	9c 8b       	std	Y+20, r25	; 0x14
    5ace:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ad0:	8b 89       	ldd	r24, Y+19	; 0x13
    5ad2:	9c 89       	ldd	r25, Y+20	; 0x14
    5ad4:	00 97       	sbiw	r24, 0x00	; 0
    5ad6:	69 f7       	brne	.-38     	; 0x5ab2 <PASS_voidPassCheckCorrect+0xb8>
    5ad8:	14 c0       	rjmp	.+40     	; 0x5b02 <PASS_voidPassCheckCorrect+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ada:	6d 89       	ldd	r22, Y+21	; 0x15
    5adc:	7e 89       	ldd	r23, Y+22	; 0x16
    5ade:	8f 89       	ldd	r24, Y+23	; 0x17
    5ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    5ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ae6:	dc 01       	movw	r26, r24
    5ae8:	cb 01       	movw	r24, r22
    5aea:	9c 8b       	std	Y+20, r25	; 0x14
    5aec:	8b 8b       	std	Y+19, r24	; 0x13
    5aee:	8b 89       	ldd	r24, Y+19	; 0x13
    5af0:	9c 89       	ldd	r25, Y+20	; 0x14
    5af2:	98 8b       	std	Y+16, r25	; 0x10
    5af4:	8f 87       	std	Y+15, r24	; 0x0f
    5af6:	8f 85       	ldd	r24, Y+15	; 0x0f
    5af8:	98 89       	ldd	r25, Y+16	; 0x10
    5afa:	01 97       	sbiw	r24, 0x01	; 1
    5afc:	f1 f7       	brne	.-4      	; 0x5afa <PASS_voidPassCheckCorrect+0x100>
    5afe:	98 8b       	std	Y+16, r25	; 0x10
    5b00:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	/*Loading the pass is correct or not*/
	CLCD_voidClearLCD();
    5b02:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <CLCD_voidClearLCD>
	CLCD_voidSendStringPosition("Pass is Correct...", 0 , 0 );
    5b06:	8b e6       	ldi	r24, 0x6B	; 107
    5b08:	90 e0       	ldi	r25, 0x00	; 0
    5b0a:	60 e0       	ldi	r22, 0x00	; 0
    5b0c:	40 e0       	ldi	r20, 0x00	; 0
    5b0e:	0e 94 02 1a 	call	0x3404	; 0x3404 <CLCD_voidSendStringPosition>
    5b12:	80 e0       	ldi	r24, 0x00	; 0
    5b14:	90 e0       	ldi	r25, 0x00	; 0
    5b16:	aa ef       	ldi	r26, 0xFA	; 250
    5b18:	b4 e4       	ldi	r27, 0x44	; 68
    5b1a:	8b 87       	std	Y+11, r24	; 0x0b
    5b1c:	9c 87       	std	Y+12, r25	; 0x0c
    5b1e:	ad 87       	std	Y+13, r26	; 0x0d
    5b20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b22:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b24:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b26:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b28:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b2a:	20 e0       	ldi	r18, 0x00	; 0
    5b2c:	30 e0       	ldi	r19, 0x00	; 0
    5b2e:	4a ef       	ldi	r20, 0xFA	; 250
    5b30:	54 e4       	ldi	r21, 0x44	; 68
    5b32:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5b36:	dc 01       	movw	r26, r24
    5b38:	cb 01       	movw	r24, r22
    5b3a:	8f 83       	std	Y+7, r24	; 0x07
    5b3c:	98 87       	std	Y+8, r25	; 0x08
    5b3e:	a9 87       	std	Y+9, r26	; 0x09
    5b40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b42:	6f 81       	ldd	r22, Y+7	; 0x07
    5b44:	78 85       	ldd	r23, Y+8	; 0x08
    5b46:	89 85       	ldd	r24, Y+9	; 0x09
    5b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b4a:	20 e0       	ldi	r18, 0x00	; 0
    5b4c:	30 e0       	ldi	r19, 0x00	; 0
    5b4e:	40 e8       	ldi	r20, 0x80	; 128
    5b50:	5f e3       	ldi	r21, 0x3F	; 63
    5b52:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    5b56:	88 23       	and	r24, r24
    5b58:	2c f4       	brge	.+10     	; 0x5b64 <PASS_voidPassCheckCorrect+0x16a>
		__ticks = 1;
    5b5a:	81 e0       	ldi	r24, 0x01	; 1
    5b5c:	90 e0       	ldi	r25, 0x00	; 0
    5b5e:	9e 83       	std	Y+6, r25	; 0x06
    5b60:	8d 83       	std	Y+5, r24	; 0x05
    5b62:	3f c0       	rjmp	.+126    	; 0x5be2 <PASS_voidPassCheckCorrect+0x1e8>
	else if (__tmp > 65535)
    5b64:	6f 81       	ldd	r22, Y+7	; 0x07
    5b66:	78 85       	ldd	r23, Y+8	; 0x08
    5b68:	89 85       	ldd	r24, Y+9	; 0x09
    5b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b6c:	20 e0       	ldi	r18, 0x00	; 0
    5b6e:	3f ef       	ldi	r19, 0xFF	; 255
    5b70:	4f e7       	ldi	r20, 0x7F	; 127
    5b72:	57 e4       	ldi	r21, 0x47	; 71
    5b74:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    5b78:	18 16       	cp	r1, r24
    5b7a:	4c f5       	brge	.+82     	; 0x5bce <PASS_voidPassCheckCorrect+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b82:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b84:	20 e0       	ldi	r18, 0x00	; 0
    5b86:	30 e0       	ldi	r19, 0x00	; 0
    5b88:	40 e2       	ldi	r20, 0x20	; 32
    5b8a:	51 e4       	ldi	r21, 0x41	; 65
    5b8c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5b90:	dc 01       	movw	r26, r24
    5b92:	cb 01       	movw	r24, r22
    5b94:	bc 01       	movw	r22, r24
    5b96:	cd 01       	movw	r24, r26
    5b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b9c:	dc 01       	movw	r26, r24
    5b9e:	cb 01       	movw	r24, r22
    5ba0:	9e 83       	std	Y+6, r25	; 0x06
    5ba2:	8d 83       	std	Y+5, r24	; 0x05
    5ba4:	0f c0       	rjmp	.+30     	; 0x5bc4 <PASS_voidPassCheckCorrect+0x1ca>
    5ba6:	88 ec       	ldi	r24, 0xC8	; 200
    5ba8:	90 e0       	ldi	r25, 0x00	; 0
    5baa:	9c 83       	std	Y+4, r25	; 0x04
    5bac:	8b 83       	std	Y+3, r24	; 0x03
    5bae:	8b 81       	ldd	r24, Y+3	; 0x03
    5bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    5bb2:	01 97       	sbiw	r24, 0x01	; 1
    5bb4:	f1 f7       	brne	.-4      	; 0x5bb2 <PASS_voidPassCheckCorrect+0x1b8>
    5bb6:	9c 83       	std	Y+4, r25	; 0x04
    5bb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bba:	8d 81       	ldd	r24, Y+5	; 0x05
    5bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    5bbe:	01 97       	sbiw	r24, 0x01	; 1
    5bc0:	9e 83       	std	Y+6, r25	; 0x06
    5bc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    5bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    5bc8:	00 97       	sbiw	r24, 0x00	; 0
    5bca:	69 f7       	brne	.-38     	; 0x5ba6 <PASS_voidPassCheckCorrect+0x1ac>
    5bcc:	14 c0       	rjmp	.+40     	; 0x5bf6 <PASS_voidPassCheckCorrect+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bce:	6f 81       	ldd	r22, Y+7	; 0x07
    5bd0:	78 85       	ldd	r23, Y+8	; 0x08
    5bd2:	89 85       	ldd	r24, Y+9	; 0x09
    5bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bda:	dc 01       	movw	r26, r24
    5bdc:	cb 01       	movw	r24, r22
    5bde:	9e 83       	std	Y+6, r25	; 0x06
    5be0:	8d 83       	std	Y+5, r24	; 0x05
    5be2:	8d 81       	ldd	r24, Y+5	; 0x05
    5be4:	9e 81       	ldd	r25, Y+6	; 0x06
    5be6:	9a 83       	std	Y+2, r25	; 0x02
    5be8:	89 83       	std	Y+1, r24	; 0x01
    5bea:	89 81       	ldd	r24, Y+1	; 0x01
    5bec:	9a 81       	ldd	r25, Y+2	; 0x02
    5bee:	01 97       	sbiw	r24, 0x01	; 1
    5bf0:	f1 f7       	brne	.-4      	; 0x5bee <PASS_voidPassCheckCorrect+0x1f4>
    5bf2:	9a 83       	std	Y+2, r25	; 0x02
    5bf4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
}
    5bf6:	6c 96       	adiw	r28, 0x1c	; 28
    5bf8:	0f b6       	in	r0, 0x3f	; 63
    5bfa:	f8 94       	cli
    5bfc:	de bf       	out	0x3e, r29	; 62
    5bfe:	0f be       	out	0x3f, r0	; 63
    5c00:	cd bf       	out	0x3d, r28	; 61
    5c02:	cf 91       	pop	r28
    5c04:	df 91       	pop	r29
    5c06:	08 95       	ret

00005c08 <PASS_voidPassCheckWrong>:


void PASS_voidPassCheckWrong(void)
{
    5c08:	df 93       	push	r29
    5c0a:	cf 93       	push	r28
    5c0c:	cd b7       	in	r28, 0x3d	; 61
    5c0e:	de b7       	in	r29, 0x3e	; 62
    5c10:	2e 97       	sbiw	r28, 0x0e	; 14
    5c12:	0f b6       	in	r0, 0x3f	; 63
    5c14:	f8 94       	cli
    5c16:	de bf       	out	0x3e, r29	; 62
    5c18:	0f be       	out	0x3f, r0	; 63
    5c1a:	cd bf       	out	0x3d, r28	; 61

	/*Loading the pass is correct or not*/
	CLCD_voidClearLCD();
    5c1c:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <CLCD_voidClearLCD>
	CLCD_voidSendStringPosition("Pass is Wrong...", 0 , 0 );
    5c20:	8e e7       	ldi	r24, 0x7E	; 126
    5c22:	90 e0       	ldi	r25, 0x00	; 0
    5c24:	60 e0       	ldi	r22, 0x00	; 0
    5c26:	40 e0       	ldi	r20, 0x00	; 0
    5c28:	0e 94 02 1a 	call	0x3404	; 0x3404 <CLCD_voidSendStringPosition>
    5c2c:	80 e0       	ldi	r24, 0x00	; 0
    5c2e:	90 e0       	ldi	r25, 0x00	; 0
    5c30:	aa ef       	ldi	r26, 0xFA	; 250
    5c32:	b4 e4       	ldi	r27, 0x44	; 68
    5c34:	8b 87       	std	Y+11, r24	; 0x0b
    5c36:	9c 87       	std	Y+12, r25	; 0x0c
    5c38:	ad 87       	std	Y+13, r26	; 0x0d
    5c3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c44:	20 e0       	ldi	r18, 0x00	; 0
    5c46:	30 e0       	ldi	r19, 0x00	; 0
    5c48:	4a ef       	ldi	r20, 0xFA	; 250
    5c4a:	54 e4       	ldi	r21, 0x44	; 68
    5c4c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5c50:	dc 01       	movw	r26, r24
    5c52:	cb 01       	movw	r24, r22
    5c54:	8f 83       	std	Y+7, r24	; 0x07
    5c56:	98 87       	std	Y+8, r25	; 0x08
    5c58:	a9 87       	std	Y+9, r26	; 0x09
    5c5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    5c5e:	78 85       	ldd	r23, Y+8	; 0x08
    5c60:	89 85       	ldd	r24, Y+9	; 0x09
    5c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c64:	20 e0       	ldi	r18, 0x00	; 0
    5c66:	30 e0       	ldi	r19, 0x00	; 0
    5c68:	40 e8       	ldi	r20, 0x80	; 128
    5c6a:	5f e3       	ldi	r21, 0x3F	; 63
    5c6c:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    5c70:	88 23       	and	r24, r24
    5c72:	2c f4       	brge	.+10     	; 0x5c7e <PASS_voidPassCheckWrong+0x76>
		__ticks = 1;
    5c74:	81 e0       	ldi	r24, 0x01	; 1
    5c76:	90 e0       	ldi	r25, 0x00	; 0
    5c78:	9e 83       	std	Y+6, r25	; 0x06
    5c7a:	8d 83       	std	Y+5, r24	; 0x05
    5c7c:	3f c0       	rjmp	.+126    	; 0x5cfc <PASS_voidPassCheckWrong+0xf4>
	else if (__tmp > 65535)
    5c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    5c80:	78 85       	ldd	r23, Y+8	; 0x08
    5c82:	89 85       	ldd	r24, Y+9	; 0x09
    5c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c86:	20 e0       	ldi	r18, 0x00	; 0
    5c88:	3f ef       	ldi	r19, 0xFF	; 255
    5c8a:	4f e7       	ldi	r20, 0x7F	; 127
    5c8c:	57 e4       	ldi	r21, 0x47	; 71
    5c8e:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    5c92:	18 16       	cp	r1, r24
    5c94:	4c f5       	brge	.+82     	; 0x5ce8 <PASS_voidPassCheckWrong+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c96:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c98:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c9e:	20 e0       	ldi	r18, 0x00	; 0
    5ca0:	30 e0       	ldi	r19, 0x00	; 0
    5ca2:	40 e2       	ldi	r20, 0x20	; 32
    5ca4:	51 e4       	ldi	r21, 0x41	; 65
    5ca6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5caa:	dc 01       	movw	r26, r24
    5cac:	cb 01       	movw	r24, r22
    5cae:	bc 01       	movw	r22, r24
    5cb0:	cd 01       	movw	r24, r26
    5cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cb6:	dc 01       	movw	r26, r24
    5cb8:	cb 01       	movw	r24, r22
    5cba:	9e 83       	std	Y+6, r25	; 0x06
    5cbc:	8d 83       	std	Y+5, r24	; 0x05
    5cbe:	0f c0       	rjmp	.+30     	; 0x5cde <PASS_voidPassCheckWrong+0xd6>
    5cc0:	88 ec       	ldi	r24, 0xC8	; 200
    5cc2:	90 e0       	ldi	r25, 0x00	; 0
    5cc4:	9c 83       	std	Y+4, r25	; 0x04
    5cc6:	8b 83       	std	Y+3, r24	; 0x03
    5cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    5cca:	9c 81       	ldd	r25, Y+4	; 0x04
    5ccc:	01 97       	sbiw	r24, 0x01	; 1
    5cce:	f1 f7       	brne	.-4      	; 0x5ccc <PASS_voidPassCheckWrong+0xc4>
    5cd0:	9c 83       	std	Y+4, r25	; 0x04
    5cd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    5cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    5cd8:	01 97       	sbiw	r24, 0x01	; 1
    5cda:	9e 83       	std	Y+6, r25	; 0x06
    5cdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cde:	8d 81       	ldd	r24, Y+5	; 0x05
    5ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    5ce2:	00 97       	sbiw	r24, 0x00	; 0
    5ce4:	69 f7       	brne	.-38     	; 0x5cc0 <PASS_voidPassCheckWrong+0xb8>
    5ce6:	14 c0       	rjmp	.+40     	; 0x5d10 <PASS_voidPassCheckWrong+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    5cea:	78 85       	ldd	r23, Y+8	; 0x08
    5cec:	89 85       	ldd	r24, Y+9	; 0x09
    5cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cf4:	dc 01       	movw	r26, r24
    5cf6:	cb 01       	movw	r24, r22
    5cf8:	9e 83       	std	Y+6, r25	; 0x06
    5cfa:	8d 83       	std	Y+5, r24	; 0x05
    5cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    5cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    5d00:	9a 83       	std	Y+2, r25	; 0x02
    5d02:	89 83       	std	Y+1, r24	; 0x01
    5d04:	89 81       	ldd	r24, Y+1	; 0x01
    5d06:	9a 81       	ldd	r25, Y+2	; 0x02
    5d08:	01 97       	sbiw	r24, 0x01	; 1
    5d0a:	f1 f7       	brne	.-4      	; 0x5d08 <PASS_voidPassCheckWrong+0x100>
    5d0c:	9a 83       	std	Y+2, r25	; 0x02
    5d0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);

}
    5d10:	2e 96       	adiw	r28, 0x0e	; 14
    5d12:	0f b6       	in	r0, 0x3f	; 63
    5d14:	f8 94       	cli
    5d16:	de bf       	out	0x3e, r29	; 62
    5d18:	0f be       	out	0x3f, r0	; 63
    5d1a:	cd bf       	out	0x3d, r28	; 61
    5d1c:	cf 91       	pop	r28
    5d1e:	df 91       	pop	r29
    5d20:	08 95       	ret

00005d22 <SERVO_voidInit>:
#include "DIO_interface.h"
#include "Timer1_interface.h"


void SERVO_voidInit(u8 Copy_u8IDPin)
{
    5d22:	df 93       	push	r29
    5d24:	cf 93       	push	r28
    5d26:	0f 92       	push	r0
    5d28:	cd b7       	in	r28, 0x3d	; 61
    5d2a:	de b7       	in	r29, 0x3e	; 62
    5d2c:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_voidInit();
    5d2e:	0e 94 41 44 	call	0x8882	; 0x8882 <TIMER1_voidInit>
	if (Copy_u8IDPin == SERVO_OC1B_PIN4)
    5d32:	89 81       	ldd	r24, Y+1	; 0x01
    5d34:	84 30       	cpi	r24, 0x04	; 4
    5d36:	31 f4       	brne	.+12     	; 0x5d44 <SERVO_voidInit+0x22>
	{
		DIO_enumSetPinDirection(SERVO_PORTD, SERVO_OC1B_PIN4, SERVO_OUTPUT);
    5d38:	83 e0       	ldi	r24, 0x03	; 3
    5d3a:	64 e0       	ldi	r22, 0x04	; 4
    5d3c:	41 e0       	ldi	r20, 0x01	; 1
    5d3e:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
    5d42:	08 c0       	rjmp	.+16     	; 0x5d54 <SERVO_voidInit+0x32>
	}
	else if (Copy_u8IDPin == SERVO_OC1A_PIN5)
    5d44:	89 81       	ldd	r24, Y+1	; 0x01
    5d46:	85 30       	cpi	r24, 0x05	; 5
    5d48:	29 f4       	brne	.+10     	; 0x5d54 <SERVO_voidInit+0x32>
	{
		DIO_enumSetPinDirection(SERVO_PORTD, SERVO_OC1A_PIN5, SERVO_OUTPUT);
    5d4a:	83 e0       	ldi	r24, 0x03	; 3
    5d4c:	65 e0       	ldi	r22, 0x05	; 5
    5d4e:	41 e0       	ldi	r20, 0x01	; 1
    5d50:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
	}
}
    5d54:	0f 90       	pop	r0
    5d56:	cf 91       	pop	r28
    5d58:	df 91       	pop	r29
    5d5a:	08 95       	ret

00005d5c <SERVO_voidSetDegreeRotate>:



void SERVO_voidSetDegreeRotate(u8 Copy_u8IDPin ,u8 Copy_u8AngleValue)
{
    5d5c:	af 92       	push	r10
    5d5e:	bf 92       	push	r11
    5d60:	cf 92       	push	r12
    5d62:	df 92       	push	r13
    5d64:	ef 92       	push	r14
    5d66:	ff 92       	push	r15
    5d68:	0f 93       	push	r16
    5d6a:	1f 93       	push	r17
    5d6c:	df 93       	push	r29
    5d6e:	cf 93       	push	r28
    5d70:	00 d0       	rcall	.+0      	; 0x5d72 <SERVO_voidSetDegreeRotate+0x16>
    5d72:	cd b7       	in	r28, 0x3d	; 61
    5d74:	de b7       	in	r29, 0x3e	; 62
    5d76:	89 83       	std	Y+1, r24	; 0x01
    5d78:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8IDPin == SERVO_OC1A_PIN5)
    5d7a:	89 81       	ldd	r24, Y+1	; 0x01
    5d7c:	85 30       	cpi	r24, 0x05	; 5
    5d7e:	a9 f5       	brne	.+106    	; 0x5dea <SERVO_voidSetDegreeRotate+0x8e>
	{
		TIMER1_voidSetValueCompMatchChannel_A(MAPPING_s32GetOutput(MIN_ANGLE, MAX_ANGLE, MIN_TIME_ON, MAX_TIME_ON, Copy_u8AngleValue));
    5d80:	8a 81       	ldd	r24, Y+2	; 0x02
    5d82:	88 2f       	mov	r24, r24
    5d84:	90 e0       	ldi	r25, 0x00	; 0
    5d86:	a0 e0       	ldi	r26, 0x00	; 0
    5d88:	b0 e0       	ldi	r27, 0x00	; 0
    5d8a:	00 d0       	rcall	.+0      	; 0x5d8c <SERVO_voidSetDegreeRotate+0x30>
    5d8c:	00 d0       	rcall	.+0      	; 0x5d8e <SERVO_voidSetDegreeRotate+0x32>
    5d8e:	ed b7       	in	r30, 0x3d	; 61
    5d90:	fe b7       	in	r31, 0x3e	; 62
    5d92:	31 96       	adiw	r30, 0x01	; 1
    5d94:	80 83       	st	Z, r24
    5d96:	91 83       	std	Z+1, r25	; 0x01
    5d98:	a2 83       	std	Z+2, r26	; 0x02
    5d9a:	b3 83       	std	Z+3, r27	; 0x03
    5d9c:	60 e0       	ldi	r22, 0x00	; 0
    5d9e:	70 e0       	ldi	r23, 0x00	; 0
    5da0:	80 e0       	ldi	r24, 0x00	; 0
    5da2:	90 e0       	ldi	r25, 0x00	; 0
    5da4:	24 eb       	ldi	r18, 0xB4	; 180
    5da6:	30 e0       	ldi	r19, 0x00	; 0
    5da8:	40 e0       	ldi	r20, 0x00	; 0
    5daa:	50 e0       	ldi	r21, 0x00	; 0
    5dac:	0f 2e       	mov	r0, r31
    5dae:	f6 e2       	ldi	r31, 0x26	; 38
    5db0:	ef 2e       	mov	r14, r31
    5db2:	f2 e0       	ldi	r31, 0x02	; 2
    5db4:	ff 2e       	mov	r15, r31
    5db6:	f0 e0       	ldi	r31, 0x00	; 0
    5db8:	0f 2f       	mov	r16, r31
    5dba:	f0 e0       	ldi	r31, 0x00	; 0
    5dbc:	1f 2f       	mov	r17, r31
    5dbe:	f0 2d       	mov	r31, r0
    5dc0:	0f 2e       	mov	r0, r31
    5dc2:	f8 e2       	ldi	r31, 0x28	; 40
    5dc4:	af 2e       	mov	r10, r31
    5dc6:	fa e0       	ldi	r31, 0x0A	; 10
    5dc8:	bf 2e       	mov	r11, r31
    5dca:	f0 e0       	ldi	r31, 0x00	; 0
    5dcc:	cf 2e       	mov	r12, r31
    5dce:	f0 e0       	ldi	r31, 0x00	; 0
    5dd0:	df 2e       	mov	r13, r31
    5dd2:	f0 2d       	mov	r31, r0
    5dd4:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <MAPPING_s32GetOutput>
    5dd8:	0f 90       	pop	r0
    5dda:	0f 90       	pop	r0
    5ddc:	0f 90       	pop	r0
    5dde:	0f 90       	pop	r0
    5de0:	dc 01       	movw	r26, r24
    5de2:	cb 01       	movw	r24, r22
    5de4:	0e 94 dc 44 	call	0x89b8	; 0x89b8 <TIMER1_voidSetValueCompMatchChannel_A>
    5de8:	37 c0       	rjmp	.+110    	; 0x5e58 <SERVO_voidSetDegreeRotate+0xfc>
	}

	else if (Copy_u8IDPin == SERVO_OC1B_PIN4)
    5dea:	89 81       	ldd	r24, Y+1	; 0x01
    5dec:	84 30       	cpi	r24, 0x04	; 4
    5dee:	a1 f5       	brne	.+104    	; 0x5e58 <SERVO_voidSetDegreeRotate+0xfc>
	{
		TIMER1_voidSetValueCompMatchChannel_B(MAPPING_s32GetOutput(MIN_ANGLE, MAX_ANGLE, MIN_TIME_ON, MAX_TIME_ON, Copy_u8AngleValue));
    5df0:	8a 81       	ldd	r24, Y+2	; 0x02
    5df2:	88 2f       	mov	r24, r24
    5df4:	90 e0       	ldi	r25, 0x00	; 0
    5df6:	a0 e0       	ldi	r26, 0x00	; 0
    5df8:	b0 e0       	ldi	r27, 0x00	; 0
    5dfa:	00 d0       	rcall	.+0      	; 0x5dfc <SERVO_voidSetDegreeRotate+0xa0>
    5dfc:	00 d0       	rcall	.+0      	; 0x5dfe <SERVO_voidSetDegreeRotate+0xa2>
    5dfe:	ed b7       	in	r30, 0x3d	; 61
    5e00:	fe b7       	in	r31, 0x3e	; 62
    5e02:	31 96       	adiw	r30, 0x01	; 1
    5e04:	80 83       	st	Z, r24
    5e06:	91 83       	std	Z+1, r25	; 0x01
    5e08:	a2 83       	std	Z+2, r26	; 0x02
    5e0a:	b3 83       	std	Z+3, r27	; 0x03
    5e0c:	60 e0       	ldi	r22, 0x00	; 0
    5e0e:	70 e0       	ldi	r23, 0x00	; 0
    5e10:	80 e0       	ldi	r24, 0x00	; 0
    5e12:	90 e0       	ldi	r25, 0x00	; 0
    5e14:	24 eb       	ldi	r18, 0xB4	; 180
    5e16:	30 e0       	ldi	r19, 0x00	; 0
    5e18:	40 e0       	ldi	r20, 0x00	; 0
    5e1a:	50 e0       	ldi	r21, 0x00	; 0
    5e1c:	0f 2e       	mov	r0, r31
    5e1e:	f6 e2       	ldi	r31, 0x26	; 38
    5e20:	ef 2e       	mov	r14, r31
    5e22:	f2 e0       	ldi	r31, 0x02	; 2
    5e24:	ff 2e       	mov	r15, r31
    5e26:	f0 e0       	ldi	r31, 0x00	; 0
    5e28:	0f 2f       	mov	r16, r31
    5e2a:	f0 e0       	ldi	r31, 0x00	; 0
    5e2c:	1f 2f       	mov	r17, r31
    5e2e:	f0 2d       	mov	r31, r0
    5e30:	0f 2e       	mov	r0, r31
    5e32:	f8 e2       	ldi	r31, 0x28	; 40
    5e34:	af 2e       	mov	r10, r31
    5e36:	fa e0       	ldi	r31, 0x0A	; 10
    5e38:	bf 2e       	mov	r11, r31
    5e3a:	f0 e0       	ldi	r31, 0x00	; 0
    5e3c:	cf 2e       	mov	r12, r31
    5e3e:	f0 e0       	ldi	r31, 0x00	; 0
    5e40:	df 2e       	mov	r13, r31
    5e42:	f0 2d       	mov	r31, r0
    5e44:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <MAPPING_s32GetOutput>
    5e48:	0f 90       	pop	r0
    5e4a:	0f 90       	pop	r0
    5e4c:	0f 90       	pop	r0
    5e4e:	0f 90       	pop	r0
    5e50:	dc 01       	movw	r26, r24
    5e52:	cb 01       	movw	r24, r22
    5e54:	0e 94 ee 44 	call	0x89dc	; 0x89dc <TIMER1_voidSetValueCompMatchChannel_B>
	}
}
    5e58:	0f 90       	pop	r0
    5e5a:	0f 90       	pop	r0
    5e5c:	cf 91       	pop	r28
    5e5e:	df 91       	pop	r29
    5e60:	1f 91       	pop	r17
    5e62:	0f 91       	pop	r16
    5e64:	ff 90       	pop	r15
    5e66:	ef 90       	pop	r14
    5e68:	df 90       	pop	r13
    5e6a:	cf 90       	pop	r12
    5e6c:	bf 90       	pop	r11
    5e6e:	af 90       	pop	r10
    5e70:	08 95       	ret

00005e72 <STEPPER_voidInit>:
#include "Stepper_config.h"
#include "Stepper_interface.h"


void STEPPER_voidInit( void )
{
    5e72:	df 93       	push	r29
    5e74:	cf 93       	push	r28
    5e76:	cd b7       	in	r28, 0x3d	; 61
    5e78:	de b7       	in	r29, 0x3e	; 62
	/* Set pin direction output */
	DIO_enumSetPinDirection(STEPPER_PORT,STEPPER_BLUE_PIN,STEPPER_PIN_OUTPUT);
    5e7a:	80 e0       	ldi	r24, 0x00	; 0
    5e7c:	62 e0       	ldi	r22, 0x02	; 2
    5e7e:	41 e0       	ldi	r20, 0x01	; 1
    5e80:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(STEPPER_PORT,STEPPER_PINK_PIN,STEPPER_PIN_OUTPUT);
    5e84:	80 e0       	ldi	r24, 0x00	; 0
    5e86:	63 e0       	ldi	r22, 0x03	; 3
    5e88:	41 e0       	ldi	r20, 0x01	; 1
    5e8a:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(STEPPER_PORT,STEPPER_ORANGE_PIN,STEPPER_PIN_OUTPUT);
    5e8e:	80 e0       	ldi	r24, 0x00	; 0
    5e90:	65 e0       	ldi	r22, 0x05	; 5
    5e92:	41 e0       	ldi	r20, 0x01	; 1
    5e94:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(STEPPER_PORT,STEPPER_YELLOW_PIN,STEPPER_PIN_OUTPUT);
    5e98:	80 e0       	ldi	r24, 0x00	; 0
    5e9a:	64 e0       	ldi	r22, 0x04	; 4
    5e9c:	41 e0       	ldi	r20, 0x01	; 1
    5e9e:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <DIO_enumSetPinDirection>

	/* Set pin value Low (Stepper motor Turn off) */
	DIO_enumSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,STEPPER_PIN_LOW);
    5ea2:	80 e0       	ldi	r24, 0x00	; 0
    5ea4:	62 e0       	ldi	r22, 0x02	; 2
    5ea6:	40 e0       	ldi	r20, 0x00	; 0
    5ea8:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(STEPPER_PORT,STEPPER_PINK_PIN,STEPPER_PIN_LOW);
    5eac:	80 e0       	ldi	r24, 0x00	; 0
    5eae:	63 e0       	ldi	r22, 0x03	; 3
    5eb0:	40 e0       	ldi	r20, 0x00	; 0
    5eb2:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(STEPPER_PORT,STEPPER_ORANGE_PIN,STEPPER_PIN_LOW);
    5eb6:	80 e0       	ldi	r24, 0x00	; 0
    5eb8:	65 e0       	ldi	r22, 0x05	; 5
    5eba:	40 e0       	ldi	r20, 0x00	; 0
    5ebc:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(STEPPER_PORT,STEPPER_YELLOW_PIN,STEPPER_PIN_LOW);
    5ec0:	80 e0       	ldi	r24, 0x00	; 0
    5ec2:	64 e0       	ldi	r22, 0x04	; 4
    5ec4:	40 e0       	ldi	r20, 0x00	; 0
    5ec6:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
}
    5eca:	cf 91       	pop	r28
    5ecc:	df 91       	pop	r29
    5ece:	08 95       	ret

00005ed0 <STEPPER_voidTurnOn>:


void STEPPER_voidTurnOn  ( u8 Copy_u8StepType , u8 Copy_u8Direction , u8 Copy_u8Speed , u16 Copy_u16Degree )
{
    5ed0:	0f 93       	push	r16
    5ed2:	1f 93       	push	r17
    5ed4:	df 93       	push	r29
    5ed6:	cf 93       	push	r28
    5ed8:	cd b7       	in	r28, 0x3d	; 61
    5eda:	de b7       	in	r29, 0x3e	; 62
    5edc:	c9 55       	subi	r28, 0x59	; 89
    5ede:	d1 40       	sbci	r29, 0x01	; 1
    5ee0:	0f b6       	in	r0, 0x3f	; 63
    5ee2:	f8 94       	cli
    5ee4:	de bf       	out	0x3e, r29	; 62
    5ee6:	0f be       	out	0x3f, r0	; 63
    5ee8:	cd bf       	out	0x3d, r28	; 61
    5eea:	fe 01       	movw	r30, r28
    5eec:	eb 5a       	subi	r30, 0xAB	; 171
    5eee:	fe 4f       	sbci	r31, 0xFE	; 254
    5ef0:	80 83       	st	Z, r24
    5ef2:	fe 01       	movw	r30, r28
    5ef4:	ea 5a       	subi	r30, 0xAA	; 170
    5ef6:	fe 4f       	sbci	r31, 0xFE	; 254
    5ef8:	60 83       	st	Z, r22
    5efa:	fe 01       	movw	r30, r28
    5efc:	e9 5a       	subi	r30, 0xA9	; 169
    5efe:	fe 4f       	sbci	r31, 0xFE	; 254
    5f00:	40 83       	st	Z, r20
    5f02:	fe 01       	movw	r30, r28
    5f04:	e8 5a       	subi	r30, 0xA8	; 168
    5f06:	fe 4f       	sbci	r31, 0xFE	; 254
    5f08:	31 83       	std	Z+1, r19	; 0x01
    5f0a:	20 83       	st	Z, r18
	u32 Local_u32Iterator = 0 ;
    5f0c:	fe 01       	movw	r30, r28
    5f0e:	ef 5a       	subi	r30, 0xAF	; 175
    5f10:	fe 4f       	sbci	r31, 0xFE	; 254
    5f12:	10 82       	st	Z, r1
    5f14:	11 82       	std	Z+1, r1	; 0x01
    5f16:	12 82       	std	Z+2, r1	; 0x02
    5f18:	13 82       	std	Z+3, r1	; 0x03

	if( Copy_u8StepType == STEPPER_FULL_STEP )
    5f1a:	fe 01       	movw	r30, r28
    5f1c:	eb 5a       	subi	r30, 0xAB	; 171
    5f1e:	fe 4f       	sbci	r31, 0xFE	; 254
    5f20:	80 81       	ld	r24, Z
    5f22:	81 30       	cpi	r24, 0x01	; 1
    5f24:	09 f0       	breq	.+2      	; 0x5f28 <STEPPER_voidTurnOn+0x58>
    5f26:	19 c7       	rjmp	.+3634   	; 0x6d5a <STEPPER_voidTurnOn+0xe8a>
	{


		if( Copy_u8Direction == STEPPER_ANTI_CLOCK_WISE )
    5f28:	fe 01       	movw	r30, r28
    5f2a:	ea 5a       	subi	r30, 0xAA	; 170
    5f2c:	fe 4f       	sbci	r31, 0xFE	; 254
    5f2e:	80 81       	ld	r24, Z
    5f30:	88 23       	and	r24, r24
    5f32:	09 f0       	breq	.+2      	; 0x5f36 <STEPPER_voidTurnOn+0x66>
    5f34:	85 c3       	rjmp	.+1802   	; 0x6640 <STEPPER_voidTurnOn+0x770>
		{

			for( Local_u32Iterator = 0 ; Local_u32Iterator < ( ( (u32)Copy_u16Degree * 256 ) / 45 ) / 4 ; Local_u32Iterator++  )
    5f36:	fe 01       	movw	r30, r28
    5f38:	ef 5a       	subi	r30, 0xAF	; 175
    5f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    5f3c:	10 82       	st	Z, r1
    5f3e:	11 82       	std	Z+1, r1	; 0x01
    5f40:	12 82       	std	Z+2, r1	; 0x02
    5f42:	13 82       	std	Z+3, r1	; 0x03
    5f44:	56 c3       	rjmp	.+1708   	; 0x65f2 <STEPPER_voidTurnOn+0x722>
			{
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_HIGH );
    5f46:	80 e0       	ldi	r24, 0x00	; 0
    5f48:	62 e0       	ldi	r22, 0x02	; 2
    5f4a:	41 e0       	ldi	r20, 0x01	; 1
    5f4c:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_LOW  );
    5f50:	80 e0       	ldi	r24, 0x00	; 0
    5f52:	63 e0       	ldi	r22, 0x03	; 3
    5f54:	40 e0       	ldi	r20, 0x00	; 0
    5f56:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_LOW  );
    5f5a:	80 e0       	ldi	r24, 0x00	; 0
    5f5c:	64 e0       	ldi	r22, 0x04	; 4
    5f5e:	40 e0       	ldi	r20, 0x00	; 0
    5f60:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_LOW  );
    5f64:	80 e0       	ldi	r24, 0x00	; 0
    5f66:	65 e0       	ldi	r22, 0x05	; 5
    5f68:	40 e0       	ldi	r20, 0x00	; 0
    5f6a:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    5f6e:	fe 01       	movw	r30, r28
    5f70:	e9 5a       	subi	r30, 0xA9	; 169
    5f72:	fe 4f       	sbci	r31, 0xFE	; 254
    5f74:	80 81       	ld	r24, Z
    5f76:	88 2f       	mov	r24, r24
    5f78:	90 e0       	ldi	r25, 0x00	; 0
    5f7a:	a0 e0       	ldi	r26, 0x00	; 0
    5f7c:	b0 e0       	ldi	r27, 0x00	; 0
    5f7e:	bc 01       	movw	r22, r24
    5f80:	cd 01       	movw	r24, r26
    5f82:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    5f86:	dc 01       	movw	r26, r24
    5f88:	cb 01       	movw	r24, r22
    5f8a:	fe 01       	movw	r30, r28
    5f8c:	e3 5b       	subi	r30, 0xB3	; 179
    5f8e:	fe 4f       	sbci	r31, 0xFE	; 254
    5f90:	80 83       	st	Z, r24
    5f92:	91 83       	std	Z+1, r25	; 0x01
    5f94:	a2 83       	std	Z+2, r26	; 0x02
    5f96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f98:	8e 01       	movw	r16, r28
    5f9a:	07 5b       	subi	r16, 0xB7	; 183
    5f9c:	1e 4f       	sbci	r17, 0xFE	; 254
    5f9e:	fe 01       	movw	r30, r28
    5fa0:	e3 5b       	subi	r30, 0xB3	; 179
    5fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    5fa4:	60 81       	ld	r22, Z
    5fa6:	71 81       	ldd	r23, Z+1	; 0x01
    5fa8:	82 81       	ldd	r24, Z+2	; 0x02
    5faa:	93 81       	ldd	r25, Z+3	; 0x03
    5fac:	20 e0       	ldi	r18, 0x00	; 0
    5fae:	30 e0       	ldi	r19, 0x00	; 0
    5fb0:	4a ef       	ldi	r20, 0xFA	; 250
    5fb2:	54 e4       	ldi	r21, 0x44	; 68
    5fb4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5fb8:	dc 01       	movw	r26, r24
    5fba:	cb 01       	movw	r24, r22
    5fbc:	f8 01       	movw	r30, r16
    5fbe:	80 83       	st	Z, r24
    5fc0:	91 83       	std	Z+1, r25	; 0x01
    5fc2:	a2 83       	std	Z+2, r26	; 0x02
    5fc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5fc6:	fe 01       	movw	r30, r28
    5fc8:	e7 5b       	subi	r30, 0xB7	; 183
    5fca:	fe 4f       	sbci	r31, 0xFE	; 254
    5fcc:	60 81       	ld	r22, Z
    5fce:	71 81       	ldd	r23, Z+1	; 0x01
    5fd0:	82 81       	ldd	r24, Z+2	; 0x02
    5fd2:	93 81       	ldd	r25, Z+3	; 0x03
    5fd4:	20 e0       	ldi	r18, 0x00	; 0
    5fd6:	30 e0       	ldi	r19, 0x00	; 0
    5fd8:	40 e8       	ldi	r20, 0x80	; 128
    5fda:	5f e3       	ldi	r21, 0x3F	; 63
    5fdc:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    5fe0:	88 23       	and	r24, r24
    5fe2:	44 f4       	brge	.+16     	; 0x5ff4 <STEPPER_voidTurnOn+0x124>
		__ticks = 1;
    5fe4:	fe 01       	movw	r30, r28
    5fe6:	e9 5b       	subi	r30, 0xB9	; 185
    5fe8:	fe 4f       	sbci	r31, 0xFE	; 254
    5fea:	81 e0       	ldi	r24, 0x01	; 1
    5fec:	90 e0       	ldi	r25, 0x00	; 0
    5fee:	91 83       	std	Z+1, r25	; 0x01
    5ff0:	80 83       	st	Z, r24
    5ff2:	64 c0       	rjmp	.+200    	; 0x60bc <STEPPER_voidTurnOn+0x1ec>
	else if (__tmp > 65535)
    5ff4:	fe 01       	movw	r30, r28
    5ff6:	e7 5b       	subi	r30, 0xB7	; 183
    5ff8:	fe 4f       	sbci	r31, 0xFE	; 254
    5ffa:	60 81       	ld	r22, Z
    5ffc:	71 81       	ldd	r23, Z+1	; 0x01
    5ffe:	82 81       	ldd	r24, Z+2	; 0x02
    6000:	93 81       	ldd	r25, Z+3	; 0x03
    6002:	20 e0       	ldi	r18, 0x00	; 0
    6004:	3f ef       	ldi	r19, 0xFF	; 255
    6006:	4f e7       	ldi	r20, 0x7F	; 127
    6008:	57 e4       	ldi	r21, 0x47	; 71
    600a:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    600e:	18 16       	cp	r1, r24
    6010:	0c f0       	brlt	.+2      	; 0x6014 <STEPPER_voidTurnOn+0x144>
    6012:	43 c0       	rjmp	.+134    	; 0x609a <STEPPER_voidTurnOn+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6014:	fe 01       	movw	r30, r28
    6016:	e3 5b       	subi	r30, 0xB3	; 179
    6018:	fe 4f       	sbci	r31, 0xFE	; 254
    601a:	60 81       	ld	r22, Z
    601c:	71 81       	ldd	r23, Z+1	; 0x01
    601e:	82 81       	ldd	r24, Z+2	; 0x02
    6020:	93 81       	ldd	r25, Z+3	; 0x03
    6022:	20 e0       	ldi	r18, 0x00	; 0
    6024:	30 e0       	ldi	r19, 0x00	; 0
    6026:	40 e2       	ldi	r20, 0x20	; 32
    6028:	51 e4       	ldi	r21, 0x41	; 65
    602a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    602e:	dc 01       	movw	r26, r24
    6030:	cb 01       	movw	r24, r22
    6032:	8e 01       	movw	r16, r28
    6034:	09 5b       	subi	r16, 0xB9	; 185
    6036:	1e 4f       	sbci	r17, 0xFE	; 254
    6038:	bc 01       	movw	r22, r24
    603a:	cd 01       	movw	r24, r26
    603c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6040:	dc 01       	movw	r26, r24
    6042:	cb 01       	movw	r24, r22
    6044:	f8 01       	movw	r30, r16
    6046:	91 83       	std	Z+1, r25	; 0x01
    6048:	80 83       	st	Z, r24
    604a:	1f c0       	rjmp	.+62     	; 0x608a <STEPPER_voidTurnOn+0x1ba>
    604c:	fe 01       	movw	r30, r28
    604e:	eb 5b       	subi	r30, 0xBB	; 187
    6050:	fe 4f       	sbci	r31, 0xFE	; 254
    6052:	88 ec       	ldi	r24, 0xC8	; 200
    6054:	90 e0       	ldi	r25, 0x00	; 0
    6056:	91 83       	std	Z+1, r25	; 0x01
    6058:	80 83       	st	Z, r24
    605a:	fe 01       	movw	r30, r28
    605c:	eb 5b       	subi	r30, 0xBB	; 187
    605e:	fe 4f       	sbci	r31, 0xFE	; 254
    6060:	80 81       	ld	r24, Z
    6062:	91 81       	ldd	r25, Z+1	; 0x01
    6064:	01 97       	sbiw	r24, 0x01	; 1
    6066:	f1 f7       	brne	.-4      	; 0x6064 <STEPPER_voidTurnOn+0x194>
    6068:	fe 01       	movw	r30, r28
    606a:	eb 5b       	subi	r30, 0xBB	; 187
    606c:	fe 4f       	sbci	r31, 0xFE	; 254
    606e:	91 83       	std	Z+1, r25	; 0x01
    6070:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6072:	de 01       	movw	r26, r28
    6074:	a9 5b       	subi	r26, 0xB9	; 185
    6076:	be 4f       	sbci	r27, 0xFE	; 254
    6078:	fe 01       	movw	r30, r28
    607a:	e9 5b       	subi	r30, 0xB9	; 185
    607c:	fe 4f       	sbci	r31, 0xFE	; 254
    607e:	80 81       	ld	r24, Z
    6080:	91 81       	ldd	r25, Z+1	; 0x01
    6082:	01 97       	sbiw	r24, 0x01	; 1
    6084:	11 96       	adiw	r26, 0x01	; 1
    6086:	9c 93       	st	X, r25
    6088:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    608a:	fe 01       	movw	r30, r28
    608c:	e9 5b       	subi	r30, 0xB9	; 185
    608e:	fe 4f       	sbci	r31, 0xFE	; 254
    6090:	80 81       	ld	r24, Z
    6092:	91 81       	ldd	r25, Z+1	; 0x01
    6094:	00 97       	sbiw	r24, 0x00	; 0
    6096:	d1 f6       	brne	.-76     	; 0x604c <STEPPER_voidTurnOn+0x17c>
    6098:	27 c0       	rjmp	.+78     	; 0x60e8 <STEPPER_voidTurnOn+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    609a:	8e 01       	movw	r16, r28
    609c:	09 5b       	subi	r16, 0xB9	; 185
    609e:	1e 4f       	sbci	r17, 0xFE	; 254
    60a0:	fe 01       	movw	r30, r28
    60a2:	e7 5b       	subi	r30, 0xB7	; 183
    60a4:	fe 4f       	sbci	r31, 0xFE	; 254
    60a6:	60 81       	ld	r22, Z
    60a8:	71 81       	ldd	r23, Z+1	; 0x01
    60aa:	82 81       	ldd	r24, Z+2	; 0x02
    60ac:	93 81       	ldd	r25, Z+3	; 0x03
    60ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60b2:	dc 01       	movw	r26, r24
    60b4:	cb 01       	movw	r24, r22
    60b6:	f8 01       	movw	r30, r16
    60b8:	91 83       	std	Z+1, r25	; 0x01
    60ba:	80 83       	st	Z, r24
    60bc:	de 01       	movw	r26, r28
    60be:	ad 5b       	subi	r26, 0xBD	; 189
    60c0:	be 4f       	sbci	r27, 0xFE	; 254
    60c2:	fe 01       	movw	r30, r28
    60c4:	e9 5b       	subi	r30, 0xB9	; 185
    60c6:	fe 4f       	sbci	r31, 0xFE	; 254
    60c8:	80 81       	ld	r24, Z
    60ca:	91 81       	ldd	r25, Z+1	; 0x01
    60cc:	8d 93       	st	X+, r24
    60ce:	9c 93       	st	X, r25
    60d0:	fe 01       	movw	r30, r28
    60d2:	ed 5b       	subi	r30, 0xBD	; 189
    60d4:	fe 4f       	sbci	r31, 0xFE	; 254
    60d6:	80 81       	ld	r24, Z
    60d8:	91 81       	ldd	r25, Z+1	; 0x01
    60da:	01 97       	sbiw	r24, 0x01	; 1
    60dc:	f1 f7       	brne	.-4      	; 0x60da <STEPPER_voidTurnOn+0x20a>
    60de:	fe 01       	movw	r30, r28
    60e0:	ed 5b       	subi	r30, 0xBD	; 189
    60e2:	fe 4f       	sbci	r31, 0xFE	; 254
    60e4:	91 83       	std	Z+1, r25	; 0x01
    60e6:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_LOW  );
    60e8:	80 e0       	ldi	r24, 0x00	; 0
    60ea:	62 e0       	ldi	r22, 0x02	; 2
    60ec:	40 e0       	ldi	r20, 0x00	; 0
    60ee:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_HIGH );
    60f2:	80 e0       	ldi	r24, 0x00	; 0
    60f4:	63 e0       	ldi	r22, 0x03	; 3
    60f6:	41 e0       	ldi	r20, 0x01	; 1
    60f8:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_LOW  );
    60fc:	80 e0       	ldi	r24, 0x00	; 0
    60fe:	64 e0       	ldi	r22, 0x04	; 4
    6100:	40 e0       	ldi	r20, 0x00	; 0
    6102:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_LOW  );
    6106:	80 e0       	ldi	r24, 0x00	; 0
    6108:	65 e0       	ldi	r22, 0x05	; 5
    610a:	40 e0       	ldi	r20, 0x00	; 0
    610c:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    6110:	fe 01       	movw	r30, r28
    6112:	e9 5a       	subi	r30, 0xA9	; 169
    6114:	fe 4f       	sbci	r31, 0xFE	; 254
    6116:	80 81       	ld	r24, Z
    6118:	88 2f       	mov	r24, r24
    611a:	90 e0       	ldi	r25, 0x00	; 0
    611c:	a0 e0       	ldi	r26, 0x00	; 0
    611e:	b0 e0       	ldi	r27, 0x00	; 0
    6120:	bc 01       	movw	r22, r24
    6122:	cd 01       	movw	r24, r26
    6124:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    6128:	dc 01       	movw	r26, r24
    612a:	cb 01       	movw	r24, r22
    612c:	fe 01       	movw	r30, r28
    612e:	e1 5c       	subi	r30, 0xC1	; 193
    6130:	fe 4f       	sbci	r31, 0xFE	; 254
    6132:	80 83       	st	Z, r24
    6134:	91 83       	std	Z+1, r25	; 0x01
    6136:	a2 83       	std	Z+2, r26	; 0x02
    6138:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    613a:	8e 01       	movw	r16, r28
    613c:	05 5c       	subi	r16, 0xC5	; 197
    613e:	1e 4f       	sbci	r17, 0xFE	; 254
    6140:	fe 01       	movw	r30, r28
    6142:	e1 5c       	subi	r30, 0xC1	; 193
    6144:	fe 4f       	sbci	r31, 0xFE	; 254
    6146:	60 81       	ld	r22, Z
    6148:	71 81       	ldd	r23, Z+1	; 0x01
    614a:	82 81       	ldd	r24, Z+2	; 0x02
    614c:	93 81       	ldd	r25, Z+3	; 0x03
    614e:	20 e0       	ldi	r18, 0x00	; 0
    6150:	30 e0       	ldi	r19, 0x00	; 0
    6152:	4a ef       	ldi	r20, 0xFA	; 250
    6154:	54 e4       	ldi	r21, 0x44	; 68
    6156:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    615a:	dc 01       	movw	r26, r24
    615c:	cb 01       	movw	r24, r22
    615e:	f8 01       	movw	r30, r16
    6160:	80 83       	st	Z, r24
    6162:	91 83       	std	Z+1, r25	; 0x01
    6164:	a2 83       	std	Z+2, r26	; 0x02
    6166:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6168:	fe 01       	movw	r30, r28
    616a:	e5 5c       	subi	r30, 0xC5	; 197
    616c:	fe 4f       	sbci	r31, 0xFE	; 254
    616e:	60 81       	ld	r22, Z
    6170:	71 81       	ldd	r23, Z+1	; 0x01
    6172:	82 81       	ldd	r24, Z+2	; 0x02
    6174:	93 81       	ldd	r25, Z+3	; 0x03
    6176:	20 e0       	ldi	r18, 0x00	; 0
    6178:	30 e0       	ldi	r19, 0x00	; 0
    617a:	40 e8       	ldi	r20, 0x80	; 128
    617c:	5f e3       	ldi	r21, 0x3F	; 63
    617e:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    6182:	88 23       	and	r24, r24
    6184:	44 f4       	brge	.+16     	; 0x6196 <STEPPER_voidTurnOn+0x2c6>
		__ticks = 1;
    6186:	fe 01       	movw	r30, r28
    6188:	e7 5c       	subi	r30, 0xC7	; 199
    618a:	fe 4f       	sbci	r31, 0xFE	; 254
    618c:	81 e0       	ldi	r24, 0x01	; 1
    618e:	90 e0       	ldi	r25, 0x00	; 0
    6190:	91 83       	std	Z+1, r25	; 0x01
    6192:	80 83       	st	Z, r24
    6194:	64 c0       	rjmp	.+200    	; 0x625e <STEPPER_voidTurnOn+0x38e>
	else if (__tmp > 65535)
    6196:	fe 01       	movw	r30, r28
    6198:	e5 5c       	subi	r30, 0xC5	; 197
    619a:	fe 4f       	sbci	r31, 0xFE	; 254
    619c:	60 81       	ld	r22, Z
    619e:	71 81       	ldd	r23, Z+1	; 0x01
    61a0:	82 81       	ldd	r24, Z+2	; 0x02
    61a2:	93 81       	ldd	r25, Z+3	; 0x03
    61a4:	20 e0       	ldi	r18, 0x00	; 0
    61a6:	3f ef       	ldi	r19, 0xFF	; 255
    61a8:	4f e7       	ldi	r20, 0x7F	; 127
    61aa:	57 e4       	ldi	r21, 0x47	; 71
    61ac:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    61b0:	18 16       	cp	r1, r24
    61b2:	0c f0       	brlt	.+2      	; 0x61b6 <STEPPER_voidTurnOn+0x2e6>
    61b4:	43 c0       	rjmp	.+134    	; 0x623c <STEPPER_voidTurnOn+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61b6:	fe 01       	movw	r30, r28
    61b8:	e1 5c       	subi	r30, 0xC1	; 193
    61ba:	fe 4f       	sbci	r31, 0xFE	; 254
    61bc:	60 81       	ld	r22, Z
    61be:	71 81       	ldd	r23, Z+1	; 0x01
    61c0:	82 81       	ldd	r24, Z+2	; 0x02
    61c2:	93 81       	ldd	r25, Z+3	; 0x03
    61c4:	20 e0       	ldi	r18, 0x00	; 0
    61c6:	30 e0       	ldi	r19, 0x00	; 0
    61c8:	40 e2       	ldi	r20, 0x20	; 32
    61ca:	51 e4       	ldi	r21, 0x41	; 65
    61cc:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    61d0:	dc 01       	movw	r26, r24
    61d2:	cb 01       	movw	r24, r22
    61d4:	8e 01       	movw	r16, r28
    61d6:	07 5c       	subi	r16, 0xC7	; 199
    61d8:	1e 4f       	sbci	r17, 0xFE	; 254
    61da:	bc 01       	movw	r22, r24
    61dc:	cd 01       	movw	r24, r26
    61de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61e2:	dc 01       	movw	r26, r24
    61e4:	cb 01       	movw	r24, r22
    61e6:	f8 01       	movw	r30, r16
    61e8:	91 83       	std	Z+1, r25	; 0x01
    61ea:	80 83       	st	Z, r24
    61ec:	1f c0       	rjmp	.+62     	; 0x622c <STEPPER_voidTurnOn+0x35c>
    61ee:	fe 01       	movw	r30, r28
    61f0:	e9 5c       	subi	r30, 0xC9	; 201
    61f2:	fe 4f       	sbci	r31, 0xFE	; 254
    61f4:	88 ec       	ldi	r24, 0xC8	; 200
    61f6:	90 e0       	ldi	r25, 0x00	; 0
    61f8:	91 83       	std	Z+1, r25	; 0x01
    61fa:	80 83       	st	Z, r24
    61fc:	fe 01       	movw	r30, r28
    61fe:	e9 5c       	subi	r30, 0xC9	; 201
    6200:	fe 4f       	sbci	r31, 0xFE	; 254
    6202:	80 81       	ld	r24, Z
    6204:	91 81       	ldd	r25, Z+1	; 0x01
    6206:	01 97       	sbiw	r24, 0x01	; 1
    6208:	f1 f7       	brne	.-4      	; 0x6206 <STEPPER_voidTurnOn+0x336>
    620a:	fe 01       	movw	r30, r28
    620c:	e9 5c       	subi	r30, 0xC9	; 201
    620e:	fe 4f       	sbci	r31, 0xFE	; 254
    6210:	91 83       	std	Z+1, r25	; 0x01
    6212:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6214:	de 01       	movw	r26, r28
    6216:	a7 5c       	subi	r26, 0xC7	; 199
    6218:	be 4f       	sbci	r27, 0xFE	; 254
    621a:	fe 01       	movw	r30, r28
    621c:	e7 5c       	subi	r30, 0xC7	; 199
    621e:	fe 4f       	sbci	r31, 0xFE	; 254
    6220:	80 81       	ld	r24, Z
    6222:	91 81       	ldd	r25, Z+1	; 0x01
    6224:	01 97       	sbiw	r24, 0x01	; 1
    6226:	11 96       	adiw	r26, 0x01	; 1
    6228:	9c 93       	st	X, r25
    622a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    622c:	fe 01       	movw	r30, r28
    622e:	e7 5c       	subi	r30, 0xC7	; 199
    6230:	fe 4f       	sbci	r31, 0xFE	; 254
    6232:	80 81       	ld	r24, Z
    6234:	91 81       	ldd	r25, Z+1	; 0x01
    6236:	00 97       	sbiw	r24, 0x00	; 0
    6238:	d1 f6       	brne	.-76     	; 0x61ee <STEPPER_voidTurnOn+0x31e>
    623a:	27 c0       	rjmp	.+78     	; 0x628a <STEPPER_voidTurnOn+0x3ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    623c:	8e 01       	movw	r16, r28
    623e:	07 5c       	subi	r16, 0xC7	; 199
    6240:	1e 4f       	sbci	r17, 0xFE	; 254
    6242:	fe 01       	movw	r30, r28
    6244:	e5 5c       	subi	r30, 0xC5	; 197
    6246:	fe 4f       	sbci	r31, 0xFE	; 254
    6248:	60 81       	ld	r22, Z
    624a:	71 81       	ldd	r23, Z+1	; 0x01
    624c:	82 81       	ldd	r24, Z+2	; 0x02
    624e:	93 81       	ldd	r25, Z+3	; 0x03
    6250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6254:	dc 01       	movw	r26, r24
    6256:	cb 01       	movw	r24, r22
    6258:	f8 01       	movw	r30, r16
    625a:	91 83       	std	Z+1, r25	; 0x01
    625c:	80 83       	st	Z, r24
    625e:	de 01       	movw	r26, r28
    6260:	ab 5c       	subi	r26, 0xCB	; 203
    6262:	be 4f       	sbci	r27, 0xFE	; 254
    6264:	fe 01       	movw	r30, r28
    6266:	e7 5c       	subi	r30, 0xC7	; 199
    6268:	fe 4f       	sbci	r31, 0xFE	; 254
    626a:	80 81       	ld	r24, Z
    626c:	91 81       	ldd	r25, Z+1	; 0x01
    626e:	8d 93       	st	X+, r24
    6270:	9c 93       	st	X, r25
    6272:	fe 01       	movw	r30, r28
    6274:	eb 5c       	subi	r30, 0xCB	; 203
    6276:	fe 4f       	sbci	r31, 0xFE	; 254
    6278:	80 81       	ld	r24, Z
    627a:	91 81       	ldd	r25, Z+1	; 0x01
    627c:	01 97       	sbiw	r24, 0x01	; 1
    627e:	f1 f7       	brne	.-4      	; 0x627c <STEPPER_voidTurnOn+0x3ac>
    6280:	fe 01       	movw	r30, r28
    6282:	eb 5c       	subi	r30, 0xCB	; 203
    6284:	fe 4f       	sbci	r31, 0xFE	; 254
    6286:	91 83       	std	Z+1, r25	; 0x01
    6288:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_LOW  );
    628a:	80 e0       	ldi	r24, 0x00	; 0
    628c:	62 e0       	ldi	r22, 0x02	; 2
    628e:	40 e0       	ldi	r20, 0x00	; 0
    6290:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_LOW  );
    6294:	80 e0       	ldi	r24, 0x00	; 0
    6296:	63 e0       	ldi	r22, 0x03	; 3
    6298:	40 e0       	ldi	r20, 0x00	; 0
    629a:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_HIGH );
    629e:	80 e0       	ldi	r24, 0x00	; 0
    62a0:	64 e0       	ldi	r22, 0x04	; 4
    62a2:	41 e0       	ldi	r20, 0x01	; 1
    62a4:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_LOW  );
    62a8:	80 e0       	ldi	r24, 0x00	; 0
    62aa:	65 e0       	ldi	r22, 0x05	; 5
    62ac:	40 e0       	ldi	r20, 0x00	; 0
    62ae:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    62b2:	fe 01       	movw	r30, r28
    62b4:	e9 5a       	subi	r30, 0xA9	; 169
    62b6:	fe 4f       	sbci	r31, 0xFE	; 254
    62b8:	80 81       	ld	r24, Z
    62ba:	88 2f       	mov	r24, r24
    62bc:	90 e0       	ldi	r25, 0x00	; 0
    62be:	a0 e0       	ldi	r26, 0x00	; 0
    62c0:	b0 e0       	ldi	r27, 0x00	; 0
    62c2:	bc 01       	movw	r22, r24
    62c4:	cd 01       	movw	r24, r26
    62c6:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    62ca:	dc 01       	movw	r26, r24
    62cc:	cb 01       	movw	r24, r22
    62ce:	fe 01       	movw	r30, r28
    62d0:	ef 5c       	subi	r30, 0xCF	; 207
    62d2:	fe 4f       	sbci	r31, 0xFE	; 254
    62d4:	80 83       	st	Z, r24
    62d6:	91 83       	std	Z+1, r25	; 0x01
    62d8:	a2 83       	std	Z+2, r26	; 0x02
    62da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62dc:	8e 01       	movw	r16, r28
    62de:	03 5d       	subi	r16, 0xD3	; 211
    62e0:	1e 4f       	sbci	r17, 0xFE	; 254
    62e2:	fe 01       	movw	r30, r28
    62e4:	ef 5c       	subi	r30, 0xCF	; 207
    62e6:	fe 4f       	sbci	r31, 0xFE	; 254
    62e8:	60 81       	ld	r22, Z
    62ea:	71 81       	ldd	r23, Z+1	; 0x01
    62ec:	82 81       	ldd	r24, Z+2	; 0x02
    62ee:	93 81       	ldd	r25, Z+3	; 0x03
    62f0:	20 e0       	ldi	r18, 0x00	; 0
    62f2:	30 e0       	ldi	r19, 0x00	; 0
    62f4:	4a ef       	ldi	r20, 0xFA	; 250
    62f6:	54 e4       	ldi	r21, 0x44	; 68
    62f8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    62fc:	dc 01       	movw	r26, r24
    62fe:	cb 01       	movw	r24, r22
    6300:	f8 01       	movw	r30, r16
    6302:	80 83       	st	Z, r24
    6304:	91 83       	std	Z+1, r25	; 0x01
    6306:	a2 83       	std	Z+2, r26	; 0x02
    6308:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    630a:	fe 01       	movw	r30, r28
    630c:	e3 5d       	subi	r30, 0xD3	; 211
    630e:	fe 4f       	sbci	r31, 0xFE	; 254
    6310:	60 81       	ld	r22, Z
    6312:	71 81       	ldd	r23, Z+1	; 0x01
    6314:	82 81       	ldd	r24, Z+2	; 0x02
    6316:	93 81       	ldd	r25, Z+3	; 0x03
    6318:	20 e0       	ldi	r18, 0x00	; 0
    631a:	30 e0       	ldi	r19, 0x00	; 0
    631c:	40 e8       	ldi	r20, 0x80	; 128
    631e:	5f e3       	ldi	r21, 0x3F	; 63
    6320:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    6324:	88 23       	and	r24, r24
    6326:	44 f4       	brge	.+16     	; 0x6338 <STEPPER_voidTurnOn+0x468>
		__ticks = 1;
    6328:	fe 01       	movw	r30, r28
    632a:	e5 5d       	subi	r30, 0xD5	; 213
    632c:	fe 4f       	sbci	r31, 0xFE	; 254
    632e:	81 e0       	ldi	r24, 0x01	; 1
    6330:	90 e0       	ldi	r25, 0x00	; 0
    6332:	91 83       	std	Z+1, r25	; 0x01
    6334:	80 83       	st	Z, r24
    6336:	64 c0       	rjmp	.+200    	; 0x6400 <STEPPER_voidTurnOn+0x530>
	else if (__tmp > 65535)
    6338:	fe 01       	movw	r30, r28
    633a:	e3 5d       	subi	r30, 0xD3	; 211
    633c:	fe 4f       	sbci	r31, 0xFE	; 254
    633e:	60 81       	ld	r22, Z
    6340:	71 81       	ldd	r23, Z+1	; 0x01
    6342:	82 81       	ldd	r24, Z+2	; 0x02
    6344:	93 81       	ldd	r25, Z+3	; 0x03
    6346:	20 e0       	ldi	r18, 0x00	; 0
    6348:	3f ef       	ldi	r19, 0xFF	; 255
    634a:	4f e7       	ldi	r20, 0x7F	; 127
    634c:	57 e4       	ldi	r21, 0x47	; 71
    634e:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    6352:	18 16       	cp	r1, r24
    6354:	0c f0       	brlt	.+2      	; 0x6358 <STEPPER_voidTurnOn+0x488>
    6356:	43 c0       	rjmp	.+134    	; 0x63de <STEPPER_voidTurnOn+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6358:	fe 01       	movw	r30, r28
    635a:	ef 5c       	subi	r30, 0xCF	; 207
    635c:	fe 4f       	sbci	r31, 0xFE	; 254
    635e:	60 81       	ld	r22, Z
    6360:	71 81       	ldd	r23, Z+1	; 0x01
    6362:	82 81       	ldd	r24, Z+2	; 0x02
    6364:	93 81       	ldd	r25, Z+3	; 0x03
    6366:	20 e0       	ldi	r18, 0x00	; 0
    6368:	30 e0       	ldi	r19, 0x00	; 0
    636a:	40 e2       	ldi	r20, 0x20	; 32
    636c:	51 e4       	ldi	r21, 0x41	; 65
    636e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6372:	dc 01       	movw	r26, r24
    6374:	cb 01       	movw	r24, r22
    6376:	8e 01       	movw	r16, r28
    6378:	05 5d       	subi	r16, 0xD5	; 213
    637a:	1e 4f       	sbci	r17, 0xFE	; 254
    637c:	bc 01       	movw	r22, r24
    637e:	cd 01       	movw	r24, r26
    6380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6384:	dc 01       	movw	r26, r24
    6386:	cb 01       	movw	r24, r22
    6388:	f8 01       	movw	r30, r16
    638a:	91 83       	std	Z+1, r25	; 0x01
    638c:	80 83       	st	Z, r24
    638e:	1f c0       	rjmp	.+62     	; 0x63ce <STEPPER_voidTurnOn+0x4fe>
    6390:	fe 01       	movw	r30, r28
    6392:	e7 5d       	subi	r30, 0xD7	; 215
    6394:	fe 4f       	sbci	r31, 0xFE	; 254
    6396:	88 ec       	ldi	r24, 0xC8	; 200
    6398:	90 e0       	ldi	r25, 0x00	; 0
    639a:	91 83       	std	Z+1, r25	; 0x01
    639c:	80 83       	st	Z, r24
    639e:	fe 01       	movw	r30, r28
    63a0:	e7 5d       	subi	r30, 0xD7	; 215
    63a2:	fe 4f       	sbci	r31, 0xFE	; 254
    63a4:	80 81       	ld	r24, Z
    63a6:	91 81       	ldd	r25, Z+1	; 0x01
    63a8:	01 97       	sbiw	r24, 0x01	; 1
    63aa:	f1 f7       	brne	.-4      	; 0x63a8 <STEPPER_voidTurnOn+0x4d8>
    63ac:	fe 01       	movw	r30, r28
    63ae:	e7 5d       	subi	r30, 0xD7	; 215
    63b0:	fe 4f       	sbci	r31, 0xFE	; 254
    63b2:	91 83       	std	Z+1, r25	; 0x01
    63b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63b6:	de 01       	movw	r26, r28
    63b8:	a5 5d       	subi	r26, 0xD5	; 213
    63ba:	be 4f       	sbci	r27, 0xFE	; 254
    63bc:	fe 01       	movw	r30, r28
    63be:	e5 5d       	subi	r30, 0xD5	; 213
    63c0:	fe 4f       	sbci	r31, 0xFE	; 254
    63c2:	80 81       	ld	r24, Z
    63c4:	91 81       	ldd	r25, Z+1	; 0x01
    63c6:	01 97       	sbiw	r24, 0x01	; 1
    63c8:	11 96       	adiw	r26, 0x01	; 1
    63ca:	9c 93       	st	X, r25
    63cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63ce:	fe 01       	movw	r30, r28
    63d0:	e5 5d       	subi	r30, 0xD5	; 213
    63d2:	fe 4f       	sbci	r31, 0xFE	; 254
    63d4:	80 81       	ld	r24, Z
    63d6:	91 81       	ldd	r25, Z+1	; 0x01
    63d8:	00 97       	sbiw	r24, 0x00	; 0
    63da:	d1 f6       	brne	.-76     	; 0x6390 <STEPPER_voidTurnOn+0x4c0>
    63dc:	27 c0       	rjmp	.+78     	; 0x642c <STEPPER_voidTurnOn+0x55c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63de:	8e 01       	movw	r16, r28
    63e0:	05 5d       	subi	r16, 0xD5	; 213
    63e2:	1e 4f       	sbci	r17, 0xFE	; 254
    63e4:	fe 01       	movw	r30, r28
    63e6:	e3 5d       	subi	r30, 0xD3	; 211
    63e8:	fe 4f       	sbci	r31, 0xFE	; 254
    63ea:	60 81       	ld	r22, Z
    63ec:	71 81       	ldd	r23, Z+1	; 0x01
    63ee:	82 81       	ldd	r24, Z+2	; 0x02
    63f0:	93 81       	ldd	r25, Z+3	; 0x03
    63f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63f6:	dc 01       	movw	r26, r24
    63f8:	cb 01       	movw	r24, r22
    63fa:	f8 01       	movw	r30, r16
    63fc:	91 83       	std	Z+1, r25	; 0x01
    63fe:	80 83       	st	Z, r24
    6400:	de 01       	movw	r26, r28
    6402:	a9 5d       	subi	r26, 0xD9	; 217
    6404:	be 4f       	sbci	r27, 0xFE	; 254
    6406:	fe 01       	movw	r30, r28
    6408:	e5 5d       	subi	r30, 0xD5	; 213
    640a:	fe 4f       	sbci	r31, 0xFE	; 254
    640c:	80 81       	ld	r24, Z
    640e:	91 81       	ldd	r25, Z+1	; 0x01
    6410:	8d 93       	st	X+, r24
    6412:	9c 93       	st	X, r25
    6414:	fe 01       	movw	r30, r28
    6416:	e9 5d       	subi	r30, 0xD9	; 217
    6418:	fe 4f       	sbci	r31, 0xFE	; 254
    641a:	80 81       	ld	r24, Z
    641c:	91 81       	ldd	r25, Z+1	; 0x01
    641e:	01 97       	sbiw	r24, 0x01	; 1
    6420:	f1 f7       	brne	.-4      	; 0x641e <STEPPER_voidTurnOn+0x54e>
    6422:	fe 01       	movw	r30, r28
    6424:	e9 5d       	subi	r30, 0xD9	; 217
    6426:	fe 4f       	sbci	r31, 0xFE	; 254
    6428:	91 83       	std	Z+1, r25	; 0x01
    642a:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_LOW  );
    642c:	80 e0       	ldi	r24, 0x00	; 0
    642e:	62 e0       	ldi	r22, 0x02	; 2
    6430:	40 e0       	ldi	r20, 0x00	; 0
    6432:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_LOW  );
    6436:	80 e0       	ldi	r24, 0x00	; 0
    6438:	63 e0       	ldi	r22, 0x03	; 3
    643a:	40 e0       	ldi	r20, 0x00	; 0
    643c:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_LOW  );
    6440:	80 e0       	ldi	r24, 0x00	; 0
    6442:	64 e0       	ldi	r22, 0x04	; 4
    6444:	40 e0       	ldi	r20, 0x00	; 0
    6446:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_HIGH );
    644a:	80 e0       	ldi	r24, 0x00	; 0
    644c:	65 e0       	ldi	r22, 0x05	; 5
    644e:	41 e0       	ldi	r20, 0x01	; 1
    6450:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    6454:	fe 01       	movw	r30, r28
    6456:	e9 5a       	subi	r30, 0xA9	; 169
    6458:	fe 4f       	sbci	r31, 0xFE	; 254
    645a:	80 81       	ld	r24, Z
    645c:	88 2f       	mov	r24, r24
    645e:	90 e0       	ldi	r25, 0x00	; 0
    6460:	a0 e0       	ldi	r26, 0x00	; 0
    6462:	b0 e0       	ldi	r27, 0x00	; 0
    6464:	bc 01       	movw	r22, r24
    6466:	cd 01       	movw	r24, r26
    6468:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    646c:	dc 01       	movw	r26, r24
    646e:	cb 01       	movw	r24, r22
    6470:	fe 01       	movw	r30, r28
    6472:	ed 5d       	subi	r30, 0xDD	; 221
    6474:	fe 4f       	sbci	r31, 0xFE	; 254
    6476:	80 83       	st	Z, r24
    6478:	91 83       	std	Z+1, r25	; 0x01
    647a:	a2 83       	std	Z+2, r26	; 0x02
    647c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    647e:	8e 01       	movw	r16, r28
    6480:	01 5e       	subi	r16, 0xE1	; 225
    6482:	1e 4f       	sbci	r17, 0xFE	; 254
    6484:	fe 01       	movw	r30, r28
    6486:	ed 5d       	subi	r30, 0xDD	; 221
    6488:	fe 4f       	sbci	r31, 0xFE	; 254
    648a:	60 81       	ld	r22, Z
    648c:	71 81       	ldd	r23, Z+1	; 0x01
    648e:	82 81       	ldd	r24, Z+2	; 0x02
    6490:	93 81       	ldd	r25, Z+3	; 0x03
    6492:	20 e0       	ldi	r18, 0x00	; 0
    6494:	30 e0       	ldi	r19, 0x00	; 0
    6496:	4a ef       	ldi	r20, 0xFA	; 250
    6498:	54 e4       	ldi	r21, 0x44	; 68
    649a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    649e:	dc 01       	movw	r26, r24
    64a0:	cb 01       	movw	r24, r22
    64a2:	f8 01       	movw	r30, r16
    64a4:	80 83       	st	Z, r24
    64a6:	91 83       	std	Z+1, r25	; 0x01
    64a8:	a2 83       	std	Z+2, r26	; 0x02
    64aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    64ac:	fe 01       	movw	r30, r28
    64ae:	e1 5e       	subi	r30, 0xE1	; 225
    64b0:	fe 4f       	sbci	r31, 0xFE	; 254
    64b2:	60 81       	ld	r22, Z
    64b4:	71 81       	ldd	r23, Z+1	; 0x01
    64b6:	82 81       	ldd	r24, Z+2	; 0x02
    64b8:	93 81       	ldd	r25, Z+3	; 0x03
    64ba:	20 e0       	ldi	r18, 0x00	; 0
    64bc:	30 e0       	ldi	r19, 0x00	; 0
    64be:	40 e8       	ldi	r20, 0x80	; 128
    64c0:	5f e3       	ldi	r21, 0x3F	; 63
    64c2:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    64c6:	88 23       	and	r24, r24
    64c8:	44 f4       	brge	.+16     	; 0x64da <STEPPER_voidTurnOn+0x60a>
		__ticks = 1;
    64ca:	fe 01       	movw	r30, r28
    64cc:	e3 5e       	subi	r30, 0xE3	; 227
    64ce:	fe 4f       	sbci	r31, 0xFE	; 254
    64d0:	81 e0       	ldi	r24, 0x01	; 1
    64d2:	90 e0       	ldi	r25, 0x00	; 0
    64d4:	91 83       	std	Z+1, r25	; 0x01
    64d6:	80 83       	st	Z, r24
    64d8:	64 c0       	rjmp	.+200    	; 0x65a2 <STEPPER_voidTurnOn+0x6d2>
	else if (__tmp > 65535)
    64da:	fe 01       	movw	r30, r28
    64dc:	e1 5e       	subi	r30, 0xE1	; 225
    64de:	fe 4f       	sbci	r31, 0xFE	; 254
    64e0:	60 81       	ld	r22, Z
    64e2:	71 81       	ldd	r23, Z+1	; 0x01
    64e4:	82 81       	ldd	r24, Z+2	; 0x02
    64e6:	93 81       	ldd	r25, Z+3	; 0x03
    64e8:	20 e0       	ldi	r18, 0x00	; 0
    64ea:	3f ef       	ldi	r19, 0xFF	; 255
    64ec:	4f e7       	ldi	r20, 0x7F	; 127
    64ee:	57 e4       	ldi	r21, 0x47	; 71
    64f0:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    64f4:	18 16       	cp	r1, r24
    64f6:	0c f0       	brlt	.+2      	; 0x64fa <STEPPER_voidTurnOn+0x62a>
    64f8:	43 c0       	rjmp	.+134    	; 0x6580 <STEPPER_voidTurnOn+0x6b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    64fa:	fe 01       	movw	r30, r28
    64fc:	ed 5d       	subi	r30, 0xDD	; 221
    64fe:	fe 4f       	sbci	r31, 0xFE	; 254
    6500:	60 81       	ld	r22, Z
    6502:	71 81       	ldd	r23, Z+1	; 0x01
    6504:	82 81       	ldd	r24, Z+2	; 0x02
    6506:	93 81       	ldd	r25, Z+3	; 0x03
    6508:	20 e0       	ldi	r18, 0x00	; 0
    650a:	30 e0       	ldi	r19, 0x00	; 0
    650c:	40 e2       	ldi	r20, 0x20	; 32
    650e:	51 e4       	ldi	r21, 0x41	; 65
    6510:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6514:	dc 01       	movw	r26, r24
    6516:	cb 01       	movw	r24, r22
    6518:	8e 01       	movw	r16, r28
    651a:	03 5e       	subi	r16, 0xE3	; 227
    651c:	1e 4f       	sbci	r17, 0xFE	; 254
    651e:	bc 01       	movw	r22, r24
    6520:	cd 01       	movw	r24, r26
    6522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6526:	dc 01       	movw	r26, r24
    6528:	cb 01       	movw	r24, r22
    652a:	f8 01       	movw	r30, r16
    652c:	91 83       	std	Z+1, r25	; 0x01
    652e:	80 83       	st	Z, r24
    6530:	1f c0       	rjmp	.+62     	; 0x6570 <STEPPER_voidTurnOn+0x6a0>
    6532:	fe 01       	movw	r30, r28
    6534:	e5 5e       	subi	r30, 0xE5	; 229
    6536:	fe 4f       	sbci	r31, 0xFE	; 254
    6538:	88 ec       	ldi	r24, 0xC8	; 200
    653a:	90 e0       	ldi	r25, 0x00	; 0
    653c:	91 83       	std	Z+1, r25	; 0x01
    653e:	80 83       	st	Z, r24
    6540:	fe 01       	movw	r30, r28
    6542:	e5 5e       	subi	r30, 0xE5	; 229
    6544:	fe 4f       	sbci	r31, 0xFE	; 254
    6546:	80 81       	ld	r24, Z
    6548:	91 81       	ldd	r25, Z+1	; 0x01
    654a:	01 97       	sbiw	r24, 0x01	; 1
    654c:	f1 f7       	brne	.-4      	; 0x654a <STEPPER_voidTurnOn+0x67a>
    654e:	fe 01       	movw	r30, r28
    6550:	e5 5e       	subi	r30, 0xE5	; 229
    6552:	fe 4f       	sbci	r31, 0xFE	; 254
    6554:	91 83       	std	Z+1, r25	; 0x01
    6556:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6558:	de 01       	movw	r26, r28
    655a:	a3 5e       	subi	r26, 0xE3	; 227
    655c:	be 4f       	sbci	r27, 0xFE	; 254
    655e:	fe 01       	movw	r30, r28
    6560:	e3 5e       	subi	r30, 0xE3	; 227
    6562:	fe 4f       	sbci	r31, 0xFE	; 254
    6564:	80 81       	ld	r24, Z
    6566:	91 81       	ldd	r25, Z+1	; 0x01
    6568:	01 97       	sbiw	r24, 0x01	; 1
    656a:	11 96       	adiw	r26, 0x01	; 1
    656c:	9c 93       	st	X, r25
    656e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6570:	fe 01       	movw	r30, r28
    6572:	e3 5e       	subi	r30, 0xE3	; 227
    6574:	fe 4f       	sbci	r31, 0xFE	; 254
    6576:	80 81       	ld	r24, Z
    6578:	91 81       	ldd	r25, Z+1	; 0x01
    657a:	00 97       	sbiw	r24, 0x00	; 0
    657c:	d1 f6       	brne	.-76     	; 0x6532 <STEPPER_voidTurnOn+0x662>
    657e:	27 c0       	rjmp	.+78     	; 0x65ce <STEPPER_voidTurnOn+0x6fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6580:	8e 01       	movw	r16, r28
    6582:	03 5e       	subi	r16, 0xE3	; 227
    6584:	1e 4f       	sbci	r17, 0xFE	; 254
    6586:	fe 01       	movw	r30, r28
    6588:	e1 5e       	subi	r30, 0xE1	; 225
    658a:	fe 4f       	sbci	r31, 0xFE	; 254
    658c:	60 81       	ld	r22, Z
    658e:	71 81       	ldd	r23, Z+1	; 0x01
    6590:	82 81       	ldd	r24, Z+2	; 0x02
    6592:	93 81       	ldd	r25, Z+3	; 0x03
    6594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6598:	dc 01       	movw	r26, r24
    659a:	cb 01       	movw	r24, r22
    659c:	f8 01       	movw	r30, r16
    659e:	91 83       	std	Z+1, r25	; 0x01
    65a0:	80 83       	st	Z, r24
    65a2:	de 01       	movw	r26, r28
    65a4:	a7 5e       	subi	r26, 0xE7	; 231
    65a6:	be 4f       	sbci	r27, 0xFE	; 254
    65a8:	fe 01       	movw	r30, r28
    65aa:	e3 5e       	subi	r30, 0xE3	; 227
    65ac:	fe 4f       	sbci	r31, 0xFE	; 254
    65ae:	80 81       	ld	r24, Z
    65b0:	91 81       	ldd	r25, Z+1	; 0x01
    65b2:	8d 93       	st	X+, r24
    65b4:	9c 93       	st	X, r25
    65b6:	fe 01       	movw	r30, r28
    65b8:	e7 5e       	subi	r30, 0xE7	; 231
    65ba:	fe 4f       	sbci	r31, 0xFE	; 254
    65bc:	80 81       	ld	r24, Z
    65be:	91 81       	ldd	r25, Z+1	; 0x01
    65c0:	01 97       	sbiw	r24, 0x01	; 1
    65c2:	f1 f7       	brne	.-4      	; 0x65c0 <STEPPER_voidTurnOn+0x6f0>
    65c4:	fe 01       	movw	r30, r28
    65c6:	e7 5e       	subi	r30, 0xE7	; 231
    65c8:	fe 4f       	sbci	r31, 0xFE	; 254
    65ca:	91 83       	std	Z+1, r25	; 0x01
    65cc:	80 83       	st	Z, r24


		if( Copy_u8Direction == STEPPER_ANTI_CLOCK_WISE )
		{

			for( Local_u32Iterator = 0 ; Local_u32Iterator < ( ( (u32)Copy_u16Degree * 256 ) / 45 ) / 4 ; Local_u32Iterator++  )
    65ce:	9e 01       	movw	r18, r28
    65d0:	2f 5a       	subi	r18, 0xAF	; 175
    65d2:	3e 4f       	sbci	r19, 0xFE	; 254
    65d4:	fe 01       	movw	r30, r28
    65d6:	ef 5a       	subi	r30, 0xAF	; 175
    65d8:	fe 4f       	sbci	r31, 0xFE	; 254
    65da:	80 81       	ld	r24, Z
    65dc:	91 81       	ldd	r25, Z+1	; 0x01
    65de:	a2 81       	ldd	r26, Z+2	; 0x02
    65e0:	b3 81       	ldd	r27, Z+3	; 0x03
    65e2:	01 96       	adiw	r24, 0x01	; 1
    65e4:	a1 1d       	adc	r26, r1
    65e6:	b1 1d       	adc	r27, r1
    65e8:	f9 01       	movw	r30, r18
    65ea:	80 83       	st	Z, r24
    65ec:	91 83       	std	Z+1, r25	; 0x01
    65ee:	a2 83       	std	Z+2, r26	; 0x02
    65f0:	b3 83       	std	Z+3, r27	; 0x03
    65f2:	fe 01       	movw	r30, r28
    65f4:	e8 5a       	subi	r30, 0xA8	; 168
    65f6:	fe 4f       	sbci	r31, 0xFE	; 254
    65f8:	80 81       	ld	r24, Z
    65fa:	91 81       	ldd	r25, Z+1	; 0x01
    65fc:	cc 01       	movw	r24, r24
    65fe:	a0 e0       	ldi	r26, 0x00	; 0
    6600:	b0 e0       	ldi	r27, 0x00	; 0
    6602:	ba 2f       	mov	r27, r26
    6604:	a9 2f       	mov	r26, r25
    6606:	98 2f       	mov	r25, r24
    6608:	88 27       	eor	r24, r24
    660a:	24 eb       	ldi	r18, 0xB4	; 180
    660c:	30 e0       	ldi	r19, 0x00	; 0
    660e:	40 e0       	ldi	r20, 0x00	; 0
    6610:	50 e0       	ldi	r21, 0x00	; 0
    6612:	bc 01       	movw	r22, r24
    6614:	cd 01       	movw	r24, r26
    6616:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    661a:	da 01       	movw	r26, r20
    661c:	c9 01       	movw	r24, r18
    661e:	9c 01       	movw	r18, r24
    6620:	ad 01       	movw	r20, r26
    6622:	fe 01       	movw	r30, r28
    6624:	ef 5a       	subi	r30, 0xAF	; 175
    6626:	fe 4f       	sbci	r31, 0xFE	; 254
    6628:	80 81       	ld	r24, Z
    662a:	91 81       	ldd	r25, Z+1	; 0x01
    662c:	a2 81       	ldd	r26, Z+2	; 0x02
    662e:	b3 81       	ldd	r27, Z+3	; 0x03
    6630:	82 17       	cp	r24, r18
    6632:	93 07       	cpc	r25, r19
    6634:	a4 07       	cpc	r26, r20
    6636:	b5 07       	cpc	r27, r21
    6638:	08 f4       	brcc	.+2      	; 0x663c <STEPPER_voidTurnOn+0x76c>
    663a:	85 cc       	rjmp	.-1782   	; 0x5f46 <STEPPER_voidTurnOn+0x76>
    663c:	0c 94 2a 43 	jmp	0x8654	; 0x8654 <STEPPER_voidTurnOn+0x2784>
			}

		}


		else if( Copy_u8Direction == STEPPER_CLOCK_WISE )
    6640:	fe 01       	movw	r30, r28
    6642:	ea 5a       	subi	r30, 0xAA	; 170
    6644:	fe 4f       	sbci	r31, 0xFE	; 254
    6646:	80 81       	ld	r24, Z
    6648:	81 30       	cpi	r24, 0x01	; 1
    664a:	11 f0       	breq	.+4      	; 0x6650 <STEPPER_voidTurnOn+0x780>
    664c:	0c 94 2a 43 	jmp	0x8654	; 0x8654 <STEPPER_voidTurnOn+0x2784>
		{

			for( Local_u32Iterator = 0 ; Local_u32Iterator < ( ( (u32)Copy_u16Degree * 256 ) / 45 ) / 4 ; Local_u32Iterator++  )
    6650:	fe 01       	movw	r30, r28
    6652:	ef 5a       	subi	r30, 0xAF	; 175
    6654:	fe 4f       	sbci	r31, 0xFE	; 254
    6656:	10 82       	st	Z, r1
    6658:	11 82       	std	Z+1, r1	; 0x01
    665a:	12 82       	std	Z+2, r1	; 0x02
    665c:	13 82       	std	Z+3, r1	; 0x03
    665e:	56 c3       	rjmp	.+1708   	; 0x6d0c <STEPPER_voidTurnOn+0xe3c>
			{

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_LOW  );
    6660:	80 e0       	ldi	r24, 0x00	; 0
    6662:	62 e0       	ldi	r22, 0x02	; 2
    6664:	40 e0       	ldi	r20, 0x00	; 0
    6666:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_LOW  );
    666a:	80 e0       	ldi	r24, 0x00	; 0
    666c:	63 e0       	ldi	r22, 0x03	; 3
    666e:	40 e0       	ldi	r20, 0x00	; 0
    6670:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_LOW  );
    6674:	80 e0       	ldi	r24, 0x00	; 0
    6676:	64 e0       	ldi	r22, 0x04	; 4
    6678:	40 e0       	ldi	r20, 0x00	; 0
    667a:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_HIGH );
    667e:	80 e0       	ldi	r24, 0x00	; 0
    6680:	65 e0       	ldi	r22, 0x05	; 5
    6682:	41 e0       	ldi	r20, 0x01	; 1
    6684:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    6688:	fe 01       	movw	r30, r28
    668a:	e9 5a       	subi	r30, 0xA9	; 169
    668c:	fe 4f       	sbci	r31, 0xFE	; 254
    668e:	80 81       	ld	r24, Z
    6690:	88 2f       	mov	r24, r24
    6692:	90 e0       	ldi	r25, 0x00	; 0
    6694:	a0 e0       	ldi	r26, 0x00	; 0
    6696:	b0 e0       	ldi	r27, 0x00	; 0
    6698:	bc 01       	movw	r22, r24
    669a:	cd 01       	movw	r24, r26
    669c:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    66a0:	dc 01       	movw	r26, r24
    66a2:	cb 01       	movw	r24, r22
    66a4:	fe 01       	movw	r30, r28
    66a6:	eb 5e       	subi	r30, 0xEB	; 235
    66a8:	fe 4f       	sbci	r31, 0xFE	; 254
    66aa:	80 83       	st	Z, r24
    66ac:	91 83       	std	Z+1, r25	; 0x01
    66ae:	a2 83       	std	Z+2, r26	; 0x02
    66b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66b2:	8e 01       	movw	r16, r28
    66b4:	0f 5e       	subi	r16, 0xEF	; 239
    66b6:	1e 4f       	sbci	r17, 0xFE	; 254
    66b8:	fe 01       	movw	r30, r28
    66ba:	eb 5e       	subi	r30, 0xEB	; 235
    66bc:	fe 4f       	sbci	r31, 0xFE	; 254
    66be:	60 81       	ld	r22, Z
    66c0:	71 81       	ldd	r23, Z+1	; 0x01
    66c2:	82 81       	ldd	r24, Z+2	; 0x02
    66c4:	93 81       	ldd	r25, Z+3	; 0x03
    66c6:	20 e0       	ldi	r18, 0x00	; 0
    66c8:	30 e0       	ldi	r19, 0x00	; 0
    66ca:	4a ef       	ldi	r20, 0xFA	; 250
    66cc:	54 e4       	ldi	r21, 0x44	; 68
    66ce:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    66d2:	dc 01       	movw	r26, r24
    66d4:	cb 01       	movw	r24, r22
    66d6:	f8 01       	movw	r30, r16
    66d8:	80 83       	st	Z, r24
    66da:	91 83       	std	Z+1, r25	; 0x01
    66dc:	a2 83       	std	Z+2, r26	; 0x02
    66de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    66e0:	fe 01       	movw	r30, r28
    66e2:	ef 5e       	subi	r30, 0xEF	; 239
    66e4:	fe 4f       	sbci	r31, 0xFE	; 254
    66e6:	60 81       	ld	r22, Z
    66e8:	71 81       	ldd	r23, Z+1	; 0x01
    66ea:	82 81       	ldd	r24, Z+2	; 0x02
    66ec:	93 81       	ldd	r25, Z+3	; 0x03
    66ee:	20 e0       	ldi	r18, 0x00	; 0
    66f0:	30 e0       	ldi	r19, 0x00	; 0
    66f2:	40 e8       	ldi	r20, 0x80	; 128
    66f4:	5f e3       	ldi	r21, 0x3F	; 63
    66f6:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    66fa:	88 23       	and	r24, r24
    66fc:	44 f4       	brge	.+16     	; 0x670e <STEPPER_voidTurnOn+0x83e>
		__ticks = 1;
    66fe:	fe 01       	movw	r30, r28
    6700:	e1 5f       	subi	r30, 0xF1	; 241
    6702:	fe 4f       	sbci	r31, 0xFE	; 254
    6704:	81 e0       	ldi	r24, 0x01	; 1
    6706:	90 e0       	ldi	r25, 0x00	; 0
    6708:	91 83       	std	Z+1, r25	; 0x01
    670a:	80 83       	st	Z, r24
    670c:	64 c0       	rjmp	.+200    	; 0x67d6 <STEPPER_voidTurnOn+0x906>
	else if (__tmp > 65535)
    670e:	fe 01       	movw	r30, r28
    6710:	ef 5e       	subi	r30, 0xEF	; 239
    6712:	fe 4f       	sbci	r31, 0xFE	; 254
    6714:	60 81       	ld	r22, Z
    6716:	71 81       	ldd	r23, Z+1	; 0x01
    6718:	82 81       	ldd	r24, Z+2	; 0x02
    671a:	93 81       	ldd	r25, Z+3	; 0x03
    671c:	20 e0       	ldi	r18, 0x00	; 0
    671e:	3f ef       	ldi	r19, 0xFF	; 255
    6720:	4f e7       	ldi	r20, 0x7F	; 127
    6722:	57 e4       	ldi	r21, 0x47	; 71
    6724:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    6728:	18 16       	cp	r1, r24
    672a:	0c f0       	brlt	.+2      	; 0x672e <STEPPER_voidTurnOn+0x85e>
    672c:	43 c0       	rjmp	.+134    	; 0x67b4 <STEPPER_voidTurnOn+0x8e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    672e:	fe 01       	movw	r30, r28
    6730:	eb 5e       	subi	r30, 0xEB	; 235
    6732:	fe 4f       	sbci	r31, 0xFE	; 254
    6734:	60 81       	ld	r22, Z
    6736:	71 81       	ldd	r23, Z+1	; 0x01
    6738:	82 81       	ldd	r24, Z+2	; 0x02
    673a:	93 81       	ldd	r25, Z+3	; 0x03
    673c:	20 e0       	ldi	r18, 0x00	; 0
    673e:	30 e0       	ldi	r19, 0x00	; 0
    6740:	40 e2       	ldi	r20, 0x20	; 32
    6742:	51 e4       	ldi	r21, 0x41	; 65
    6744:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6748:	dc 01       	movw	r26, r24
    674a:	cb 01       	movw	r24, r22
    674c:	8e 01       	movw	r16, r28
    674e:	01 5f       	subi	r16, 0xF1	; 241
    6750:	1e 4f       	sbci	r17, 0xFE	; 254
    6752:	bc 01       	movw	r22, r24
    6754:	cd 01       	movw	r24, r26
    6756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    675a:	dc 01       	movw	r26, r24
    675c:	cb 01       	movw	r24, r22
    675e:	f8 01       	movw	r30, r16
    6760:	91 83       	std	Z+1, r25	; 0x01
    6762:	80 83       	st	Z, r24
    6764:	1f c0       	rjmp	.+62     	; 0x67a4 <STEPPER_voidTurnOn+0x8d4>
    6766:	fe 01       	movw	r30, r28
    6768:	e3 5f       	subi	r30, 0xF3	; 243
    676a:	fe 4f       	sbci	r31, 0xFE	; 254
    676c:	88 ec       	ldi	r24, 0xC8	; 200
    676e:	90 e0       	ldi	r25, 0x00	; 0
    6770:	91 83       	std	Z+1, r25	; 0x01
    6772:	80 83       	st	Z, r24
    6774:	fe 01       	movw	r30, r28
    6776:	e3 5f       	subi	r30, 0xF3	; 243
    6778:	fe 4f       	sbci	r31, 0xFE	; 254
    677a:	80 81       	ld	r24, Z
    677c:	91 81       	ldd	r25, Z+1	; 0x01
    677e:	01 97       	sbiw	r24, 0x01	; 1
    6780:	f1 f7       	brne	.-4      	; 0x677e <STEPPER_voidTurnOn+0x8ae>
    6782:	fe 01       	movw	r30, r28
    6784:	e3 5f       	subi	r30, 0xF3	; 243
    6786:	fe 4f       	sbci	r31, 0xFE	; 254
    6788:	91 83       	std	Z+1, r25	; 0x01
    678a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    678c:	de 01       	movw	r26, r28
    678e:	a1 5f       	subi	r26, 0xF1	; 241
    6790:	be 4f       	sbci	r27, 0xFE	; 254
    6792:	fe 01       	movw	r30, r28
    6794:	e1 5f       	subi	r30, 0xF1	; 241
    6796:	fe 4f       	sbci	r31, 0xFE	; 254
    6798:	80 81       	ld	r24, Z
    679a:	91 81       	ldd	r25, Z+1	; 0x01
    679c:	01 97       	sbiw	r24, 0x01	; 1
    679e:	11 96       	adiw	r26, 0x01	; 1
    67a0:	9c 93       	st	X, r25
    67a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67a4:	fe 01       	movw	r30, r28
    67a6:	e1 5f       	subi	r30, 0xF1	; 241
    67a8:	fe 4f       	sbci	r31, 0xFE	; 254
    67aa:	80 81       	ld	r24, Z
    67ac:	91 81       	ldd	r25, Z+1	; 0x01
    67ae:	00 97       	sbiw	r24, 0x00	; 0
    67b0:	d1 f6       	brne	.-76     	; 0x6766 <STEPPER_voidTurnOn+0x896>
    67b2:	27 c0       	rjmp	.+78     	; 0x6802 <STEPPER_voidTurnOn+0x932>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67b4:	8e 01       	movw	r16, r28
    67b6:	01 5f       	subi	r16, 0xF1	; 241
    67b8:	1e 4f       	sbci	r17, 0xFE	; 254
    67ba:	fe 01       	movw	r30, r28
    67bc:	ef 5e       	subi	r30, 0xEF	; 239
    67be:	fe 4f       	sbci	r31, 0xFE	; 254
    67c0:	60 81       	ld	r22, Z
    67c2:	71 81       	ldd	r23, Z+1	; 0x01
    67c4:	82 81       	ldd	r24, Z+2	; 0x02
    67c6:	93 81       	ldd	r25, Z+3	; 0x03
    67c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67cc:	dc 01       	movw	r26, r24
    67ce:	cb 01       	movw	r24, r22
    67d0:	f8 01       	movw	r30, r16
    67d2:	91 83       	std	Z+1, r25	; 0x01
    67d4:	80 83       	st	Z, r24
    67d6:	de 01       	movw	r26, r28
    67d8:	a5 5f       	subi	r26, 0xF5	; 245
    67da:	be 4f       	sbci	r27, 0xFE	; 254
    67dc:	fe 01       	movw	r30, r28
    67de:	e1 5f       	subi	r30, 0xF1	; 241
    67e0:	fe 4f       	sbci	r31, 0xFE	; 254
    67e2:	80 81       	ld	r24, Z
    67e4:	91 81       	ldd	r25, Z+1	; 0x01
    67e6:	8d 93       	st	X+, r24
    67e8:	9c 93       	st	X, r25
    67ea:	fe 01       	movw	r30, r28
    67ec:	e5 5f       	subi	r30, 0xF5	; 245
    67ee:	fe 4f       	sbci	r31, 0xFE	; 254
    67f0:	80 81       	ld	r24, Z
    67f2:	91 81       	ldd	r25, Z+1	; 0x01
    67f4:	01 97       	sbiw	r24, 0x01	; 1
    67f6:	f1 f7       	brne	.-4      	; 0x67f4 <STEPPER_voidTurnOn+0x924>
    67f8:	fe 01       	movw	r30, r28
    67fa:	e5 5f       	subi	r30, 0xF5	; 245
    67fc:	fe 4f       	sbci	r31, 0xFE	; 254
    67fe:	91 83       	std	Z+1, r25	; 0x01
    6800:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_LOW  );
    6802:	80 e0       	ldi	r24, 0x00	; 0
    6804:	62 e0       	ldi	r22, 0x02	; 2
    6806:	40 e0       	ldi	r20, 0x00	; 0
    6808:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_LOW  );
    680c:	80 e0       	ldi	r24, 0x00	; 0
    680e:	63 e0       	ldi	r22, 0x03	; 3
    6810:	40 e0       	ldi	r20, 0x00	; 0
    6812:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_HIGH );
    6816:	80 e0       	ldi	r24, 0x00	; 0
    6818:	64 e0       	ldi	r22, 0x04	; 4
    681a:	41 e0       	ldi	r20, 0x01	; 1
    681c:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_LOW  );
    6820:	80 e0       	ldi	r24, 0x00	; 0
    6822:	65 e0       	ldi	r22, 0x05	; 5
    6824:	40 e0       	ldi	r20, 0x00	; 0
    6826:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    682a:	fe 01       	movw	r30, r28
    682c:	e9 5a       	subi	r30, 0xA9	; 169
    682e:	fe 4f       	sbci	r31, 0xFE	; 254
    6830:	80 81       	ld	r24, Z
    6832:	88 2f       	mov	r24, r24
    6834:	90 e0       	ldi	r25, 0x00	; 0
    6836:	a0 e0       	ldi	r26, 0x00	; 0
    6838:	b0 e0       	ldi	r27, 0x00	; 0
    683a:	bc 01       	movw	r22, r24
    683c:	cd 01       	movw	r24, r26
    683e:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    6842:	dc 01       	movw	r26, r24
    6844:	cb 01       	movw	r24, r22
    6846:	fe 01       	movw	r30, r28
    6848:	e9 5f       	subi	r30, 0xF9	; 249
    684a:	fe 4f       	sbci	r31, 0xFE	; 254
    684c:	80 83       	st	Z, r24
    684e:	91 83       	std	Z+1, r25	; 0x01
    6850:	a2 83       	std	Z+2, r26	; 0x02
    6852:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6854:	8e 01       	movw	r16, r28
    6856:	0d 5f       	subi	r16, 0xFD	; 253
    6858:	1e 4f       	sbci	r17, 0xFE	; 254
    685a:	fe 01       	movw	r30, r28
    685c:	e9 5f       	subi	r30, 0xF9	; 249
    685e:	fe 4f       	sbci	r31, 0xFE	; 254
    6860:	60 81       	ld	r22, Z
    6862:	71 81       	ldd	r23, Z+1	; 0x01
    6864:	82 81       	ldd	r24, Z+2	; 0x02
    6866:	93 81       	ldd	r25, Z+3	; 0x03
    6868:	20 e0       	ldi	r18, 0x00	; 0
    686a:	30 e0       	ldi	r19, 0x00	; 0
    686c:	4a ef       	ldi	r20, 0xFA	; 250
    686e:	54 e4       	ldi	r21, 0x44	; 68
    6870:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6874:	dc 01       	movw	r26, r24
    6876:	cb 01       	movw	r24, r22
    6878:	f8 01       	movw	r30, r16
    687a:	80 83       	st	Z, r24
    687c:	91 83       	std	Z+1, r25	; 0x01
    687e:	a2 83       	std	Z+2, r26	; 0x02
    6880:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6882:	fe 01       	movw	r30, r28
    6884:	ed 5f       	subi	r30, 0xFD	; 253
    6886:	fe 4f       	sbci	r31, 0xFE	; 254
    6888:	60 81       	ld	r22, Z
    688a:	71 81       	ldd	r23, Z+1	; 0x01
    688c:	82 81       	ldd	r24, Z+2	; 0x02
    688e:	93 81       	ldd	r25, Z+3	; 0x03
    6890:	20 e0       	ldi	r18, 0x00	; 0
    6892:	30 e0       	ldi	r19, 0x00	; 0
    6894:	40 e8       	ldi	r20, 0x80	; 128
    6896:	5f e3       	ldi	r21, 0x3F	; 63
    6898:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    689c:	88 23       	and	r24, r24
    689e:	44 f4       	brge	.+16     	; 0x68b0 <STEPPER_voidTurnOn+0x9e0>
		__ticks = 1;
    68a0:	fe 01       	movw	r30, r28
    68a2:	ef 5f       	subi	r30, 0xFF	; 255
    68a4:	fe 4f       	sbci	r31, 0xFE	; 254
    68a6:	81 e0       	ldi	r24, 0x01	; 1
    68a8:	90 e0       	ldi	r25, 0x00	; 0
    68aa:	91 83       	std	Z+1, r25	; 0x01
    68ac:	80 83       	st	Z, r24
    68ae:	64 c0       	rjmp	.+200    	; 0x6978 <STEPPER_voidTurnOn+0xaa8>
	else if (__tmp > 65535)
    68b0:	fe 01       	movw	r30, r28
    68b2:	ed 5f       	subi	r30, 0xFD	; 253
    68b4:	fe 4f       	sbci	r31, 0xFE	; 254
    68b6:	60 81       	ld	r22, Z
    68b8:	71 81       	ldd	r23, Z+1	; 0x01
    68ba:	82 81       	ldd	r24, Z+2	; 0x02
    68bc:	93 81       	ldd	r25, Z+3	; 0x03
    68be:	20 e0       	ldi	r18, 0x00	; 0
    68c0:	3f ef       	ldi	r19, 0xFF	; 255
    68c2:	4f e7       	ldi	r20, 0x7F	; 127
    68c4:	57 e4       	ldi	r21, 0x47	; 71
    68c6:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    68ca:	18 16       	cp	r1, r24
    68cc:	0c f0       	brlt	.+2      	; 0x68d0 <STEPPER_voidTurnOn+0xa00>
    68ce:	43 c0       	rjmp	.+134    	; 0x6956 <STEPPER_voidTurnOn+0xa86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    68d0:	fe 01       	movw	r30, r28
    68d2:	e9 5f       	subi	r30, 0xF9	; 249
    68d4:	fe 4f       	sbci	r31, 0xFE	; 254
    68d6:	60 81       	ld	r22, Z
    68d8:	71 81       	ldd	r23, Z+1	; 0x01
    68da:	82 81       	ldd	r24, Z+2	; 0x02
    68dc:	93 81       	ldd	r25, Z+3	; 0x03
    68de:	20 e0       	ldi	r18, 0x00	; 0
    68e0:	30 e0       	ldi	r19, 0x00	; 0
    68e2:	40 e2       	ldi	r20, 0x20	; 32
    68e4:	51 e4       	ldi	r21, 0x41	; 65
    68e6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    68ea:	dc 01       	movw	r26, r24
    68ec:	cb 01       	movw	r24, r22
    68ee:	8e 01       	movw	r16, r28
    68f0:	0f 5f       	subi	r16, 0xFF	; 255
    68f2:	1e 4f       	sbci	r17, 0xFE	; 254
    68f4:	bc 01       	movw	r22, r24
    68f6:	cd 01       	movw	r24, r26
    68f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68fc:	dc 01       	movw	r26, r24
    68fe:	cb 01       	movw	r24, r22
    6900:	f8 01       	movw	r30, r16
    6902:	91 83       	std	Z+1, r25	; 0x01
    6904:	80 83       	st	Z, r24
    6906:	1f c0       	rjmp	.+62     	; 0x6946 <STEPPER_voidTurnOn+0xa76>
    6908:	fe 01       	movw	r30, r28
    690a:	e1 50       	subi	r30, 0x01	; 1
    690c:	ff 4f       	sbci	r31, 0xFF	; 255
    690e:	88 ec       	ldi	r24, 0xC8	; 200
    6910:	90 e0       	ldi	r25, 0x00	; 0
    6912:	91 83       	std	Z+1, r25	; 0x01
    6914:	80 83       	st	Z, r24
    6916:	fe 01       	movw	r30, r28
    6918:	e1 50       	subi	r30, 0x01	; 1
    691a:	ff 4f       	sbci	r31, 0xFF	; 255
    691c:	80 81       	ld	r24, Z
    691e:	91 81       	ldd	r25, Z+1	; 0x01
    6920:	01 97       	sbiw	r24, 0x01	; 1
    6922:	f1 f7       	brne	.-4      	; 0x6920 <STEPPER_voidTurnOn+0xa50>
    6924:	fe 01       	movw	r30, r28
    6926:	e1 50       	subi	r30, 0x01	; 1
    6928:	ff 4f       	sbci	r31, 0xFF	; 255
    692a:	91 83       	std	Z+1, r25	; 0x01
    692c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    692e:	de 01       	movw	r26, r28
    6930:	af 5f       	subi	r26, 0xFF	; 255
    6932:	be 4f       	sbci	r27, 0xFE	; 254
    6934:	fe 01       	movw	r30, r28
    6936:	ef 5f       	subi	r30, 0xFF	; 255
    6938:	fe 4f       	sbci	r31, 0xFE	; 254
    693a:	80 81       	ld	r24, Z
    693c:	91 81       	ldd	r25, Z+1	; 0x01
    693e:	01 97       	sbiw	r24, 0x01	; 1
    6940:	11 96       	adiw	r26, 0x01	; 1
    6942:	9c 93       	st	X, r25
    6944:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6946:	fe 01       	movw	r30, r28
    6948:	ef 5f       	subi	r30, 0xFF	; 255
    694a:	fe 4f       	sbci	r31, 0xFE	; 254
    694c:	80 81       	ld	r24, Z
    694e:	91 81       	ldd	r25, Z+1	; 0x01
    6950:	00 97       	sbiw	r24, 0x00	; 0
    6952:	d1 f6       	brne	.-76     	; 0x6908 <STEPPER_voidTurnOn+0xa38>
    6954:	27 c0       	rjmp	.+78     	; 0x69a4 <STEPPER_voidTurnOn+0xad4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6956:	8e 01       	movw	r16, r28
    6958:	0f 5f       	subi	r16, 0xFF	; 255
    695a:	1e 4f       	sbci	r17, 0xFE	; 254
    695c:	fe 01       	movw	r30, r28
    695e:	ed 5f       	subi	r30, 0xFD	; 253
    6960:	fe 4f       	sbci	r31, 0xFE	; 254
    6962:	60 81       	ld	r22, Z
    6964:	71 81       	ldd	r23, Z+1	; 0x01
    6966:	82 81       	ldd	r24, Z+2	; 0x02
    6968:	93 81       	ldd	r25, Z+3	; 0x03
    696a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    696e:	dc 01       	movw	r26, r24
    6970:	cb 01       	movw	r24, r22
    6972:	f8 01       	movw	r30, r16
    6974:	91 83       	std	Z+1, r25	; 0x01
    6976:	80 83       	st	Z, r24
    6978:	de 01       	movw	r26, r28
    697a:	a3 50       	subi	r26, 0x03	; 3
    697c:	bf 4f       	sbci	r27, 0xFF	; 255
    697e:	fe 01       	movw	r30, r28
    6980:	ef 5f       	subi	r30, 0xFF	; 255
    6982:	fe 4f       	sbci	r31, 0xFE	; 254
    6984:	80 81       	ld	r24, Z
    6986:	91 81       	ldd	r25, Z+1	; 0x01
    6988:	8d 93       	st	X+, r24
    698a:	9c 93       	st	X, r25
    698c:	fe 01       	movw	r30, r28
    698e:	e3 50       	subi	r30, 0x03	; 3
    6990:	ff 4f       	sbci	r31, 0xFF	; 255
    6992:	80 81       	ld	r24, Z
    6994:	91 81       	ldd	r25, Z+1	; 0x01
    6996:	01 97       	sbiw	r24, 0x01	; 1
    6998:	f1 f7       	brne	.-4      	; 0x6996 <STEPPER_voidTurnOn+0xac6>
    699a:	fe 01       	movw	r30, r28
    699c:	e3 50       	subi	r30, 0x03	; 3
    699e:	ff 4f       	sbci	r31, 0xFF	; 255
    69a0:	91 83       	std	Z+1, r25	; 0x01
    69a2:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_LOW  );
    69a4:	80 e0       	ldi	r24, 0x00	; 0
    69a6:	62 e0       	ldi	r22, 0x02	; 2
    69a8:	40 e0       	ldi	r20, 0x00	; 0
    69aa:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_HIGH );
    69ae:	80 e0       	ldi	r24, 0x00	; 0
    69b0:	63 e0       	ldi	r22, 0x03	; 3
    69b2:	41 e0       	ldi	r20, 0x01	; 1
    69b4:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_LOW  );
    69b8:	80 e0       	ldi	r24, 0x00	; 0
    69ba:	64 e0       	ldi	r22, 0x04	; 4
    69bc:	40 e0       	ldi	r20, 0x00	; 0
    69be:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_LOW  );
    69c2:	80 e0       	ldi	r24, 0x00	; 0
    69c4:	65 e0       	ldi	r22, 0x05	; 5
    69c6:	40 e0       	ldi	r20, 0x00	; 0
    69c8:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    69cc:	fe 01       	movw	r30, r28
    69ce:	e9 5a       	subi	r30, 0xA9	; 169
    69d0:	fe 4f       	sbci	r31, 0xFE	; 254
    69d2:	80 81       	ld	r24, Z
    69d4:	88 2f       	mov	r24, r24
    69d6:	90 e0       	ldi	r25, 0x00	; 0
    69d8:	a0 e0       	ldi	r26, 0x00	; 0
    69da:	b0 e0       	ldi	r27, 0x00	; 0
    69dc:	bc 01       	movw	r22, r24
    69de:	cd 01       	movw	r24, r26
    69e0:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    69e4:	dc 01       	movw	r26, r24
    69e6:	cb 01       	movw	r24, r22
    69e8:	fe 01       	movw	r30, r28
    69ea:	e7 50       	subi	r30, 0x07	; 7
    69ec:	ff 4f       	sbci	r31, 0xFF	; 255
    69ee:	80 83       	st	Z, r24
    69f0:	91 83       	std	Z+1, r25	; 0x01
    69f2:	a2 83       	std	Z+2, r26	; 0x02
    69f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69f6:	8e 01       	movw	r16, r28
    69f8:	0b 50       	subi	r16, 0x0B	; 11
    69fa:	1f 4f       	sbci	r17, 0xFF	; 255
    69fc:	fe 01       	movw	r30, r28
    69fe:	e7 50       	subi	r30, 0x07	; 7
    6a00:	ff 4f       	sbci	r31, 0xFF	; 255
    6a02:	60 81       	ld	r22, Z
    6a04:	71 81       	ldd	r23, Z+1	; 0x01
    6a06:	82 81       	ldd	r24, Z+2	; 0x02
    6a08:	93 81       	ldd	r25, Z+3	; 0x03
    6a0a:	20 e0       	ldi	r18, 0x00	; 0
    6a0c:	30 e0       	ldi	r19, 0x00	; 0
    6a0e:	4a ef       	ldi	r20, 0xFA	; 250
    6a10:	54 e4       	ldi	r21, 0x44	; 68
    6a12:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6a16:	dc 01       	movw	r26, r24
    6a18:	cb 01       	movw	r24, r22
    6a1a:	f8 01       	movw	r30, r16
    6a1c:	80 83       	st	Z, r24
    6a1e:	91 83       	std	Z+1, r25	; 0x01
    6a20:	a2 83       	std	Z+2, r26	; 0x02
    6a22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6a24:	fe 01       	movw	r30, r28
    6a26:	eb 50       	subi	r30, 0x0B	; 11
    6a28:	ff 4f       	sbci	r31, 0xFF	; 255
    6a2a:	60 81       	ld	r22, Z
    6a2c:	71 81       	ldd	r23, Z+1	; 0x01
    6a2e:	82 81       	ldd	r24, Z+2	; 0x02
    6a30:	93 81       	ldd	r25, Z+3	; 0x03
    6a32:	20 e0       	ldi	r18, 0x00	; 0
    6a34:	30 e0       	ldi	r19, 0x00	; 0
    6a36:	40 e8       	ldi	r20, 0x80	; 128
    6a38:	5f e3       	ldi	r21, 0x3F	; 63
    6a3a:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    6a3e:	88 23       	and	r24, r24
    6a40:	44 f4       	brge	.+16     	; 0x6a52 <STEPPER_voidTurnOn+0xb82>
		__ticks = 1;
    6a42:	fe 01       	movw	r30, r28
    6a44:	ed 50       	subi	r30, 0x0D	; 13
    6a46:	ff 4f       	sbci	r31, 0xFF	; 255
    6a48:	81 e0       	ldi	r24, 0x01	; 1
    6a4a:	90 e0       	ldi	r25, 0x00	; 0
    6a4c:	91 83       	std	Z+1, r25	; 0x01
    6a4e:	80 83       	st	Z, r24
    6a50:	64 c0       	rjmp	.+200    	; 0x6b1a <STEPPER_voidTurnOn+0xc4a>
	else if (__tmp > 65535)
    6a52:	fe 01       	movw	r30, r28
    6a54:	eb 50       	subi	r30, 0x0B	; 11
    6a56:	ff 4f       	sbci	r31, 0xFF	; 255
    6a58:	60 81       	ld	r22, Z
    6a5a:	71 81       	ldd	r23, Z+1	; 0x01
    6a5c:	82 81       	ldd	r24, Z+2	; 0x02
    6a5e:	93 81       	ldd	r25, Z+3	; 0x03
    6a60:	20 e0       	ldi	r18, 0x00	; 0
    6a62:	3f ef       	ldi	r19, 0xFF	; 255
    6a64:	4f e7       	ldi	r20, 0x7F	; 127
    6a66:	57 e4       	ldi	r21, 0x47	; 71
    6a68:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    6a6c:	18 16       	cp	r1, r24
    6a6e:	0c f0       	brlt	.+2      	; 0x6a72 <STEPPER_voidTurnOn+0xba2>
    6a70:	43 c0       	rjmp	.+134    	; 0x6af8 <STEPPER_voidTurnOn+0xc28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a72:	fe 01       	movw	r30, r28
    6a74:	e7 50       	subi	r30, 0x07	; 7
    6a76:	ff 4f       	sbci	r31, 0xFF	; 255
    6a78:	60 81       	ld	r22, Z
    6a7a:	71 81       	ldd	r23, Z+1	; 0x01
    6a7c:	82 81       	ldd	r24, Z+2	; 0x02
    6a7e:	93 81       	ldd	r25, Z+3	; 0x03
    6a80:	20 e0       	ldi	r18, 0x00	; 0
    6a82:	30 e0       	ldi	r19, 0x00	; 0
    6a84:	40 e2       	ldi	r20, 0x20	; 32
    6a86:	51 e4       	ldi	r21, 0x41	; 65
    6a88:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6a8c:	dc 01       	movw	r26, r24
    6a8e:	cb 01       	movw	r24, r22
    6a90:	8e 01       	movw	r16, r28
    6a92:	0d 50       	subi	r16, 0x0D	; 13
    6a94:	1f 4f       	sbci	r17, 0xFF	; 255
    6a96:	bc 01       	movw	r22, r24
    6a98:	cd 01       	movw	r24, r26
    6a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a9e:	dc 01       	movw	r26, r24
    6aa0:	cb 01       	movw	r24, r22
    6aa2:	f8 01       	movw	r30, r16
    6aa4:	91 83       	std	Z+1, r25	; 0x01
    6aa6:	80 83       	st	Z, r24
    6aa8:	1f c0       	rjmp	.+62     	; 0x6ae8 <STEPPER_voidTurnOn+0xc18>
    6aaa:	fe 01       	movw	r30, r28
    6aac:	ef 50       	subi	r30, 0x0F	; 15
    6aae:	ff 4f       	sbci	r31, 0xFF	; 255
    6ab0:	88 ec       	ldi	r24, 0xC8	; 200
    6ab2:	90 e0       	ldi	r25, 0x00	; 0
    6ab4:	91 83       	std	Z+1, r25	; 0x01
    6ab6:	80 83       	st	Z, r24
    6ab8:	fe 01       	movw	r30, r28
    6aba:	ef 50       	subi	r30, 0x0F	; 15
    6abc:	ff 4f       	sbci	r31, 0xFF	; 255
    6abe:	80 81       	ld	r24, Z
    6ac0:	91 81       	ldd	r25, Z+1	; 0x01
    6ac2:	01 97       	sbiw	r24, 0x01	; 1
    6ac4:	f1 f7       	brne	.-4      	; 0x6ac2 <STEPPER_voidTurnOn+0xbf2>
    6ac6:	fe 01       	movw	r30, r28
    6ac8:	ef 50       	subi	r30, 0x0F	; 15
    6aca:	ff 4f       	sbci	r31, 0xFF	; 255
    6acc:	91 83       	std	Z+1, r25	; 0x01
    6ace:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ad0:	de 01       	movw	r26, r28
    6ad2:	ad 50       	subi	r26, 0x0D	; 13
    6ad4:	bf 4f       	sbci	r27, 0xFF	; 255
    6ad6:	fe 01       	movw	r30, r28
    6ad8:	ed 50       	subi	r30, 0x0D	; 13
    6ada:	ff 4f       	sbci	r31, 0xFF	; 255
    6adc:	80 81       	ld	r24, Z
    6ade:	91 81       	ldd	r25, Z+1	; 0x01
    6ae0:	01 97       	sbiw	r24, 0x01	; 1
    6ae2:	11 96       	adiw	r26, 0x01	; 1
    6ae4:	9c 93       	st	X, r25
    6ae6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6ae8:	fe 01       	movw	r30, r28
    6aea:	ed 50       	subi	r30, 0x0D	; 13
    6aec:	ff 4f       	sbci	r31, 0xFF	; 255
    6aee:	80 81       	ld	r24, Z
    6af0:	91 81       	ldd	r25, Z+1	; 0x01
    6af2:	00 97       	sbiw	r24, 0x00	; 0
    6af4:	d1 f6       	brne	.-76     	; 0x6aaa <STEPPER_voidTurnOn+0xbda>
    6af6:	27 c0       	rjmp	.+78     	; 0x6b46 <STEPPER_voidTurnOn+0xc76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6af8:	8e 01       	movw	r16, r28
    6afa:	0d 50       	subi	r16, 0x0D	; 13
    6afc:	1f 4f       	sbci	r17, 0xFF	; 255
    6afe:	fe 01       	movw	r30, r28
    6b00:	eb 50       	subi	r30, 0x0B	; 11
    6b02:	ff 4f       	sbci	r31, 0xFF	; 255
    6b04:	60 81       	ld	r22, Z
    6b06:	71 81       	ldd	r23, Z+1	; 0x01
    6b08:	82 81       	ldd	r24, Z+2	; 0x02
    6b0a:	93 81       	ldd	r25, Z+3	; 0x03
    6b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b10:	dc 01       	movw	r26, r24
    6b12:	cb 01       	movw	r24, r22
    6b14:	f8 01       	movw	r30, r16
    6b16:	91 83       	std	Z+1, r25	; 0x01
    6b18:	80 83       	st	Z, r24
    6b1a:	de 01       	movw	r26, r28
    6b1c:	a1 51       	subi	r26, 0x11	; 17
    6b1e:	bf 4f       	sbci	r27, 0xFF	; 255
    6b20:	fe 01       	movw	r30, r28
    6b22:	ed 50       	subi	r30, 0x0D	; 13
    6b24:	ff 4f       	sbci	r31, 0xFF	; 255
    6b26:	80 81       	ld	r24, Z
    6b28:	91 81       	ldd	r25, Z+1	; 0x01
    6b2a:	8d 93       	st	X+, r24
    6b2c:	9c 93       	st	X, r25
    6b2e:	fe 01       	movw	r30, r28
    6b30:	e1 51       	subi	r30, 0x11	; 17
    6b32:	ff 4f       	sbci	r31, 0xFF	; 255
    6b34:	80 81       	ld	r24, Z
    6b36:	91 81       	ldd	r25, Z+1	; 0x01
    6b38:	01 97       	sbiw	r24, 0x01	; 1
    6b3a:	f1 f7       	brne	.-4      	; 0x6b38 <STEPPER_voidTurnOn+0xc68>
    6b3c:	fe 01       	movw	r30, r28
    6b3e:	e1 51       	subi	r30, 0x11	; 17
    6b40:	ff 4f       	sbci	r31, 0xFF	; 255
    6b42:	91 83       	std	Z+1, r25	; 0x01
    6b44:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_HIGH );
    6b46:	80 e0       	ldi	r24, 0x00	; 0
    6b48:	62 e0       	ldi	r22, 0x02	; 2
    6b4a:	41 e0       	ldi	r20, 0x01	; 1
    6b4c:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_LOW  );
    6b50:	80 e0       	ldi	r24, 0x00	; 0
    6b52:	63 e0       	ldi	r22, 0x03	; 3
    6b54:	40 e0       	ldi	r20, 0x00	; 0
    6b56:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_LOW  );
    6b5a:	80 e0       	ldi	r24, 0x00	; 0
    6b5c:	64 e0       	ldi	r22, 0x04	; 4
    6b5e:	40 e0       	ldi	r20, 0x00	; 0
    6b60:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_LOW  );
    6b64:	80 e0       	ldi	r24, 0x00	; 0
    6b66:	65 e0       	ldi	r22, 0x05	; 5
    6b68:	40 e0       	ldi	r20, 0x00	; 0
    6b6a:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    6b6e:	fe 01       	movw	r30, r28
    6b70:	e9 5a       	subi	r30, 0xA9	; 169
    6b72:	fe 4f       	sbci	r31, 0xFE	; 254
    6b74:	80 81       	ld	r24, Z
    6b76:	88 2f       	mov	r24, r24
    6b78:	90 e0       	ldi	r25, 0x00	; 0
    6b7a:	a0 e0       	ldi	r26, 0x00	; 0
    6b7c:	b0 e0       	ldi	r27, 0x00	; 0
    6b7e:	bc 01       	movw	r22, r24
    6b80:	cd 01       	movw	r24, r26
    6b82:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    6b86:	dc 01       	movw	r26, r24
    6b88:	cb 01       	movw	r24, r22
    6b8a:	fe 01       	movw	r30, r28
    6b8c:	e5 51       	subi	r30, 0x15	; 21
    6b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    6b90:	80 83       	st	Z, r24
    6b92:	91 83       	std	Z+1, r25	; 0x01
    6b94:	a2 83       	std	Z+2, r26	; 0x02
    6b96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b98:	8e 01       	movw	r16, r28
    6b9a:	09 51       	subi	r16, 0x19	; 25
    6b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    6b9e:	fe 01       	movw	r30, r28
    6ba0:	e5 51       	subi	r30, 0x15	; 21
    6ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    6ba4:	60 81       	ld	r22, Z
    6ba6:	71 81       	ldd	r23, Z+1	; 0x01
    6ba8:	82 81       	ldd	r24, Z+2	; 0x02
    6baa:	93 81       	ldd	r25, Z+3	; 0x03
    6bac:	20 e0       	ldi	r18, 0x00	; 0
    6bae:	30 e0       	ldi	r19, 0x00	; 0
    6bb0:	4a ef       	ldi	r20, 0xFA	; 250
    6bb2:	54 e4       	ldi	r21, 0x44	; 68
    6bb4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6bb8:	dc 01       	movw	r26, r24
    6bba:	cb 01       	movw	r24, r22
    6bbc:	f8 01       	movw	r30, r16
    6bbe:	80 83       	st	Z, r24
    6bc0:	91 83       	std	Z+1, r25	; 0x01
    6bc2:	a2 83       	std	Z+2, r26	; 0x02
    6bc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6bc6:	fe 01       	movw	r30, r28
    6bc8:	e9 51       	subi	r30, 0x19	; 25
    6bca:	ff 4f       	sbci	r31, 0xFF	; 255
    6bcc:	60 81       	ld	r22, Z
    6bce:	71 81       	ldd	r23, Z+1	; 0x01
    6bd0:	82 81       	ldd	r24, Z+2	; 0x02
    6bd2:	93 81       	ldd	r25, Z+3	; 0x03
    6bd4:	20 e0       	ldi	r18, 0x00	; 0
    6bd6:	30 e0       	ldi	r19, 0x00	; 0
    6bd8:	40 e8       	ldi	r20, 0x80	; 128
    6bda:	5f e3       	ldi	r21, 0x3F	; 63
    6bdc:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    6be0:	88 23       	and	r24, r24
    6be2:	44 f4       	brge	.+16     	; 0x6bf4 <STEPPER_voidTurnOn+0xd24>
		__ticks = 1;
    6be4:	fe 01       	movw	r30, r28
    6be6:	eb 51       	subi	r30, 0x1B	; 27
    6be8:	ff 4f       	sbci	r31, 0xFF	; 255
    6bea:	81 e0       	ldi	r24, 0x01	; 1
    6bec:	90 e0       	ldi	r25, 0x00	; 0
    6bee:	91 83       	std	Z+1, r25	; 0x01
    6bf0:	80 83       	st	Z, r24
    6bf2:	64 c0       	rjmp	.+200    	; 0x6cbc <STEPPER_voidTurnOn+0xdec>
	else if (__tmp > 65535)
    6bf4:	fe 01       	movw	r30, r28
    6bf6:	e9 51       	subi	r30, 0x19	; 25
    6bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    6bfa:	60 81       	ld	r22, Z
    6bfc:	71 81       	ldd	r23, Z+1	; 0x01
    6bfe:	82 81       	ldd	r24, Z+2	; 0x02
    6c00:	93 81       	ldd	r25, Z+3	; 0x03
    6c02:	20 e0       	ldi	r18, 0x00	; 0
    6c04:	3f ef       	ldi	r19, 0xFF	; 255
    6c06:	4f e7       	ldi	r20, 0x7F	; 127
    6c08:	57 e4       	ldi	r21, 0x47	; 71
    6c0a:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    6c0e:	18 16       	cp	r1, r24
    6c10:	0c f0       	brlt	.+2      	; 0x6c14 <STEPPER_voidTurnOn+0xd44>
    6c12:	43 c0       	rjmp	.+134    	; 0x6c9a <STEPPER_voidTurnOn+0xdca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c14:	fe 01       	movw	r30, r28
    6c16:	e5 51       	subi	r30, 0x15	; 21
    6c18:	ff 4f       	sbci	r31, 0xFF	; 255
    6c1a:	60 81       	ld	r22, Z
    6c1c:	71 81       	ldd	r23, Z+1	; 0x01
    6c1e:	82 81       	ldd	r24, Z+2	; 0x02
    6c20:	93 81       	ldd	r25, Z+3	; 0x03
    6c22:	20 e0       	ldi	r18, 0x00	; 0
    6c24:	30 e0       	ldi	r19, 0x00	; 0
    6c26:	40 e2       	ldi	r20, 0x20	; 32
    6c28:	51 e4       	ldi	r21, 0x41	; 65
    6c2a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6c2e:	dc 01       	movw	r26, r24
    6c30:	cb 01       	movw	r24, r22
    6c32:	8e 01       	movw	r16, r28
    6c34:	0b 51       	subi	r16, 0x1B	; 27
    6c36:	1f 4f       	sbci	r17, 0xFF	; 255
    6c38:	bc 01       	movw	r22, r24
    6c3a:	cd 01       	movw	r24, r26
    6c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c40:	dc 01       	movw	r26, r24
    6c42:	cb 01       	movw	r24, r22
    6c44:	f8 01       	movw	r30, r16
    6c46:	91 83       	std	Z+1, r25	; 0x01
    6c48:	80 83       	st	Z, r24
    6c4a:	1f c0       	rjmp	.+62     	; 0x6c8a <STEPPER_voidTurnOn+0xdba>
    6c4c:	fe 01       	movw	r30, r28
    6c4e:	ed 51       	subi	r30, 0x1D	; 29
    6c50:	ff 4f       	sbci	r31, 0xFF	; 255
    6c52:	88 ec       	ldi	r24, 0xC8	; 200
    6c54:	90 e0       	ldi	r25, 0x00	; 0
    6c56:	91 83       	std	Z+1, r25	; 0x01
    6c58:	80 83       	st	Z, r24
    6c5a:	fe 01       	movw	r30, r28
    6c5c:	ed 51       	subi	r30, 0x1D	; 29
    6c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    6c60:	80 81       	ld	r24, Z
    6c62:	91 81       	ldd	r25, Z+1	; 0x01
    6c64:	01 97       	sbiw	r24, 0x01	; 1
    6c66:	f1 f7       	brne	.-4      	; 0x6c64 <STEPPER_voidTurnOn+0xd94>
    6c68:	fe 01       	movw	r30, r28
    6c6a:	ed 51       	subi	r30, 0x1D	; 29
    6c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    6c6e:	91 83       	std	Z+1, r25	; 0x01
    6c70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c72:	de 01       	movw	r26, r28
    6c74:	ab 51       	subi	r26, 0x1B	; 27
    6c76:	bf 4f       	sbci	r27, 0xFF	; 255
    6c78:	fe 01       	movw	r30, r28
    6c7a:	eb 51       	subi	r30, 0x1B	; 27
    6c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    6c7e:	80 81       	ld	r24, Z
    6c80:	91 81       	ldd	r25, Z+1	; 0x01
    6c82:	01 97       	sbiw	r24, 0x01	; 1
    6c84:	11 96       	adiw	r26, 0x01	; 1
    6c86:	9c 93       	st	X, r25
    6c88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c8a:	fe 01       	movw	r30, r28
    6c8c:	eb 51       	subi	r30, 0x1B	; 27
    6c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    6c90:	80 81       	ld	r24, Z
    6c92:	91 81       	ldd	r25, Z+1	; 0x01
    6c94:	00 97       	sbiw	r24, 0x00	; 0
    6c96:	d1 f6       	brne	.-76     	; 0x6c4c <STEPPER_voidTurnOn+0xd7c>
    6c98:	27 c0       	rjmp	.+78     	; 0x6ce8 <STEPPER_voidTurnOn+0xe18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c9a:	8e 01       	movw	r16, r28
    6c9c:	0b 51       	subi	r16, 0x1B	; 27
    6c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    6ca0:	fe 01       	movw	r30, r28
    6ca2:	e9 51       	subi	r30, 0x19	; 25
    6ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    6ca6:	60 81       	ld	r22, Z
    6ca8:	71 81       	ldd	r23, Z+1	; 0x01
    6caa:	82 81       	ldd	r24, Z+2	; 0x02
    6cac:	93 81       	ldd	r25, Z+3	; 0x03
    6cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6cb2:	dc 01       	movw	r26, r24
    6cb4:	cb 01       	movw	r24, r22
    6cb6:	f8 01       	movw	r30, r16
    6cb8:	91 83       	std	Z+1, r25	; 0x01
    6cba:	80 83       	st	Z, r24
    6cbc:	de 01       	movw	r26, r28
    6cbe:	af 51       	subi	r26, 0x1F	; 31
    6cc0:	bf 4f       	sbci	r27, 0xFF	; 255
    6cc2:	fe 01       	movw	r30, r28
    6cc4:	eb 51       	subi	r30, 0x1B	; 27
    6cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    6cc8:	80 81       	ld	r24, Z
    6cca:	91 81       	ldd	r25, Z+1	; 0x01
    6ccc:	8d 93       	st	X+, r24
    6cce:	9c 93       	st	X, r25
    6cd0:	fe 01       	movw	r30, r28
    6cd2:	ef 51       	subi	r30, 0x1F	; 31
    6cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    6cd6:	80 81       	ld	r24, Z
    6cd8:	91 81       	ldd	r25, Z+1	; 0x01
    6cda:	01 97       	sbiw	r24, 0x01	; 1
    6cdc:	f1 f7       	brne	.-4      	; 0x6cda <STEPPER_voidTurnOn+0xe0a>
    6cde:	fe 01       	movw	r30, r28
    6ce0:	ef 51       	subi	r30, 0x1F	; 31
    6ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    6ce4:	91 83       	std	Z+1, r25	; 0x01
    6ce6:	80 83       	st	Z, r24


		else if( Copy_u8Direction == STEPPER_CLOCK_WISE )
		{

			for( Local_u32Iterator = 0 ; Local_u32Iterator < ( ( (u32)Copy_u16Degree * 256 ) / 45 ) / 4 ; Local_u32Iterator++  )
    6ce8:	9e 01       	movw	r18, r28
    6cea:	2f 5a       	subi	r18, 0xAF	; 175
    6cec:	3e 4f       	sbci	r19, 0xFE	; 254
    6cee:	fe 01       	movw	r30, r28
    6cf0:	ef 5a       	subi	r30, 0xAF	; 175
    6cf2:	fe 4f       	sbci	r31, 0xFE	; 254
    6cf4:	80 81       	ld	r24, Z
    6cf6:	91 81       	ldd	r25, Z+1	; 0x01
    6cf8:	a2 81       	ldd	r26, Z+2	; 0x02
    6cfa:	b3 81       	ldd	r27, Z+3	; 0x03
    6cfc:	01 96       	adiw	r24, 0x01	; 1
    6cfe:	a1 1d       	adc	r26, r1
    6d00:	b1 1d       	adc	r27, r1
    6d02:	f9 01       	movw	r30, r18
    6d04:	80 83       	st	Z, r24
    6d06:	91 83       	std	Z+1, r25	; 0x01
    6d08:	a2 83       	std	Z+2, r26	; 0x02
    6d0a:	b3 83       	std	Z+3, r27	; 0x03
    6d0c:	fe 01       	movw	r30, r28
    6d0e:	e8 5a       	subi	r30, 0xA8	; 168
    6d10:	fe 4f       	sbci	r31, 0xFE	; 254
    6d12:	80 81       	ld	r24, Z
    6d14:	91 81       	ldd	r25, Z+1	; 0x01
    6d16:	cc 01       	movw	r24, r24
    6d18:	a0 e0       	ldi	r26, 0x00	; 0
    6d1a:	b0 e0       	ldi	r27, 0x00	; 0
    6d1c:	ba 2f       	mov	r27, r26
    6d1e:	a9 2f       	mov	r26, r25
    6d20:	98 2f       	mov	r25, r24
    6d22:	88 27       	eor	r24, r24
    6d24:	24 eb       	ldi	r18, 0xB4	; 180
    6d26:	30 e0       	ldi	r19, 0x00	; 0
    6d28:	40 e0       	ldi	r20, 0x00	; 0
    6d2a:	50 e0       	ldi	r21, 0x00	; 0
    6d2c:	bc 01       	movw	r22, r24
    6d2e:	cd 01       	movw	r24, r26
    6d30:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    6d34:	da 01       	movw	r26, r20
    6d36:	c9 01       	movw	r24, r18
    6d38:	9c 01       	movw	r18, r24
    6d3a:	ad 01       	movw	r20, r26
    6d3c:	fe 01       	movw	r30, r28
    6d3e:	ef 5a       	subi	r30, 0xAF	; 175
    6d40:	fe 4f       	sbci	r31, 0xFE	; 254
    6d42:	80 81       	ld	r24, Z
    6d44:	91 81       	ldd	r25, Z+1	; 0x01
    6d46:	a2 81       	ldd	r26, Z+2	; 0x02
    6d48:	b3 81       	ldd	r27, Z+3	; 0x03
    6d4a:	82 17       	cp	r24, r18
    6d4c:	93 07       	cpc	r25, r19
    6d4e:	a4 07       	cpc	r26, r20
    6d50:	b5 07       	cpc	r27, r21
    6d52:	08 f4       	brcc	.+2      	; 0x6d56 <STEPPER_voidTurnOn+0xe86>
    6d54:	85 cc       	rjmp	.-1782   	; 0x6660 <STEPPER_voidTurnOn+0x790>
    6d56:	0c 94 2a 43 	jmp	0x8654	; 0x8654 <STEPPER_voidTurnOn+0x2784>
		}
	}



	else if( Copy_u8StepType == STEPPER_HALF_STEP )
    6d5a:	fe 01       	movw	r30, r28
    6d5c:	eb 5a       	subi	r30, 0xAB	; 171
    6d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    6d60:	80 81       	ld	r24, Z
    6d62:	88 23       	and	r24, r24
    6d64:	11 f0       	breq	.+4      	; 0x6d6a <STEPPER_voidTurnOn+0xe9a>
    6d66:	0c 94 2a 43 	jmp	0x8654	; 0x8654 <STEPPER_voidTurnOn+0x2784>
	{

		if( Copy_u8Direction == STEPPER_ANTI_CLOCK_WISE )
    6d6a:	fe 01       	movw	r30, r28
    6d6c:	ea 5a       	subi	r30, 0xAA	; 170
    6d6e:	fe 4f       	sbci	r31, 0xFE	; 254
    6d70:	80 81       	ld	r24, Z
    6d72:	88 23       	and	r24, r24
    6d74:	09 f0       	breq	.+2      	; 0x6d78 <STEPPER_voidTurnOn+0xea8>
    6d76:	cd c6       	rjmp	.+3482   	; 0x7b12 <STEPPER_voidTurnOn+0x1c42>
		{

			for( Local_u32Iterator = 0 ; Local_u32Iterator < ( ( (u32)Copy_u16Degree * 512 ) / 45 ) / 8 ; Local_u32Iterator++  )
    6d78:	fe 01       	movw	r30, r28
    6d7a:	ef 5a       	subi	r30, 0xAF	; 175
    6d7c:	fe 4f       	sbci	r31, 0xFE	; 254
    6d7e:	10 82       	st	Z, r1
    6d80:	11 82       	std	Z+1, r1	; 0x01
    6d82:	12 82       	std	Z+2, r1	; 0x02
    6d84:	13 82       	std	Z+3, r1	; 0x03
    6d86:	9a c6       	rjmp	.+3380   	; 0x7abc <STEPPER_voidTurnOn+0x1bec>
			{

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_HIGH );
    6d88:	80 e0       	ldi	r24, 0x00	; 0
    6d8a:	62 e0       	ldi	r22, 0x02	; 2
    6d8c:	41 e0       	ldi	r20, 0x01	; 1
    6d8e:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_LOW  );
    6d92:	80 e0       	ldi	r24, 0x00	; 0
    6d94:	63 e0       	ldi	r22, 0x03	; 3
    6d96:	40 e0       	ldi	r20, 0x00	; 0
    6d98:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_LOW  );
    6d9c:	80 e0       	ldi	r24, 0x00	; 0
    6d9e:	64 e0       	ldi	r22, 0x04	; 4
    6da0:	40 e0       	ldi	r20, 0x00	; 0
    6da2:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_LOW  );
    6da6:	80 e0       	ldi	r24, 0x00	; 0
    6da8:	65 e0       	ldi	r22, 0x05	; 5
    6daa:	40 e0       	ldi	r20, 0x00	; 0
    6dac:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    6db0:	fe 01       	movw	r30, r28
    6db2:	e9 5a       	subi	r30, 0xA9	; 169
    6db4:	fe 4f       	sbci	r31, 0xFE	; 254
    6db6:	80 81       	ld	r24, Z
    6db8:	88 2f       	mov	r24, r24
    6dba:	90 e0       	ldi	r25, 0x00	; 0
    6dbc:	a0 e0       	ldi	r26, 0x00	; 0
    6dbe:	b0 e0       	ldi	r27, 0x00	; 0
    6dc0:	bc 01       	movw	r22, r24
    6dc2:	cd 01       	movw	r24, r26
    6dc4:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    6dc8:	dc 01       	movw	r26, r24
    6dca:	cb 01       	movw	r24, r22
    6dcc:	fe 01       	movw	r30, r28
    6dce:	e3 52       	subi	r30, 0x23	; 35
    6dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    6dd2:	80 83       	st	Z, r24
    6dd4:	91 83       	std	Z+1, r25	; 0x01
    6dd6:	a2 83       	std	Z+2, r26	; 0x02
    6dd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6dda:	8e 01       	movw	r16, r28
    6ddc:	07 52       	subi	r16, 0x27	; 39
    6dde:	1f 4f       	sbci	r17, 0xFF	; 255
    6de0:	fe 01       	movw	r30, r28
    6de2:	e3 52       	subi	r30, 0x23	; 35
    6de4:	ff 4f       	sbci	r31, 0xFF	; 255
    6de6:	60 81       	ld	r22, Z
    6de8:	71 81       	ldd	r23, Z+1	; 0x01
    6dea:	82 81       	ldd	r24, Z+2	; 0x02
    6dec:	93 81       	ldd	r25, Z+3	; 0x03
    6dee:	20 e0       	ldi	r18, 0x00	; 0
    6df0:	30 e0       	ldi	r19, 0x00	; 0
    6df2:	4a ef       	ldi	r20, 0xFA	; 250
    6df4:	54 e4       	ldi	r21, 0x44	; 68
    6df6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6dfa:	dc 01       	movw	r26, r24
    6dfc:	cb 01       	movw	r24, r22
    6dfe:	f8 01       	movw	r30, r16
    6e00:	80 83       	st	Z, r24
    6e02:	91 83       	std	Z+1, r25	; 0x01
    6e04:	a2 83       	std	Z+2, r26	; 0x02
    6e06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6e08:	fe 01       	movw	r30, r28
    6e0a:	e7 52       	subi	r30, 0x27	; 39
    6e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    6e0e:	60 81       	ld	r22, Z
    6e10:	71 81       	ldd	r23, Z+1	; 0x01
    6e12:	82 81       	ldd	r24, Z+2	; 0x02
    6e14:	93 81       	ldd	r25, Z+3	; 0x03
    6e16:	20 e0       	ldi	r18, 0x00	; 0
    6e18:	30 e0       	ldi	r19, 0x00	; 0
    6e1a:	40 e8       	ldi	r20, 0x80	; 128
    6e1c:	5f e3       	ldi	r21, 0x3F	; 63
    6e1e:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    6e22:	88 23       	and	r24, r24
    6e24:	44 f4       	brge	.+16     	; 0x6e36 <STEPPER_voidTurnOn+0xf66>
		__ticks = 1;
    6e26:	fe 01       	movw	r30, r28
    6e28:	e9 52       	subi	r30, 0x29	; 41
    6e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    6e2c:	81 e0       	ldi	r24, 0x01	; 1
    6e2e:	90 e0       	ldi	r25, 0x00	; 0
    6e30:	91 83       	std	Z+1, r25	; 0x01
    6e32:	80 83       	st	Z, r24
    6e34:	64 c0       	rjmp	.+200    	; 0x6efe <STEPPER_voidTurnOn+0x102e>
	else if (__tmp > 65535)
    6e36:	fe 01       	movw	r30, r28
    6e38:	e7 52       	subi	r30, 0x27	; 39
    6e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    6e3c:	60 81       	ld	r22, Z
    6e3e:	71 81       	ldd	r23, Z+1	; 0x01
    6e40:	82 81       	ldd	r24, Z+2	; 0x02
    6e42:	93 81       	ldd	r25, Z+3	; 0x03
    6e44:	20 e0       	ldi	r18, 0x00	; 0
    6e46:	3f ef       	ldi	r19, 0xFF	; 255
    6e48:	4f e7       	ldi	r20, 0x7F	; 127
    6e4a:	57 e4       	ldi	r21, 0x47	; 71
    6e4c:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    6e50:	18 16       	cp	r1, r24
    6e52:	0c f0       	brlt	.+2      	; 0x6e56 <STEPPER_voidTurnOn+0xf86>
    6e54:	43 c0       	rjmp	.+134    	; 0x6edc <STEPPER_voidTurnOn+0x100c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e56:	fe 01       	movw	r30, r28
    6e58:	e3 52       	subi	r30, 0x23	; 35
    6e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    6e5c:	60 81       	ld	r22, Z
    6e5e:	71 81       	ldd	r23, Z+1	; 0x01
    6e60:	82 81       	ldd	r24, Z+2	; 0x02
    6e62:	93 81       	ldd	r25, Z+3	; 0x03
    6e64:	20 e0       	ldi	r18, 0x00	; 0
    6e66:	30 e0       	ldi	r19, 0x00	; 0
    6e68:	40 e2       	ldi	r20, 0x20	; 32
    6e6a:	51 e4       	ldi	r21, 0x41	; 65
    6e6c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6e70:	dc 01       	movw	r26, r24
    6e72:	cb 01       	movw	r24, r22
    6e74:	8e 01       	movw	r16, r28
    6e76:	09 52       	subi	r16, 0x29	; 41
    6e78:	1f 4f       	sbci	r17, 0xFF	; 255
    6e7a:	bc 01       	movw	r22, r24
    6e7c:	cd 01       	movw	r24, r26
    6e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e82:	dc 01       	movw	r26, r24
    6e84:	cb 01       	movw	r24, r22
    6e86:	f8 01       	movw	r30, r16
    6e88:	91 83       	std	Z+1, r25	; 0x01
    6e8a:	80 83       	st	Z, r24
    6e8c:	1f c0       	rjmp	.+62     	; 0x6ecc <STEPPER_voidTurnOn+0xffc>
    6e8e:	fe 01       	movw	r30, r28
    6e90:	eb 52       	subi	r30, 0x2B	; 43
    6e92:	ff 4f       	sbci	r31, 0xFF	; 255
    6e94:	88 ec       	ldi	r24, 0xC8	; 200
    6e96:	90 e0       	ldi	r25, 0x00	; 0
    6e98:	91 83       	std	Z+1, r25	; 0x01
    6e9a:	80 83       	st	Z, r24
    6e9c:	fe 01       	movw	r30, r28
    6e9e:	eb 52       	subi	r30, 0x2B	; 43
    6ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    6ea2:	80 81       	ld	r24, Z
    6ea4:	91 81       	ldd	r25, Z+1	; 0x01
    6ea6:	01 97       	sbiw	r24, 0x01	; 1
    6ea8:	f1 f7       	brne	.-4      	; 0x6ea6 <STEPPER_voidTurnOn+0xfd6>
    6eaa:	fe 01       	movw	r30, r28
    6eac:	eb 52       	subi	r30, 0x2B	; 43
    6eae:	ff 4f       	sbci	r31, 0xFF	; 255
    6eb0:	91 83       	std	Z+1, r25	; 0x01
    6eb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6eb4:	de 01       	movw	r26, r28
    6eb6:	a9 52       	subi	r26, 0x29	; 41
    6eb8:	bf 4f       	sbci	r27, 0xFF	; 255
    6eba:	fe 01       	movw	r30, r28
    6ebc:	e9 52       	subi	r30, 0x29	; 41
    6ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    6ec0:	80 81       	ld	r24, Z
    6ec2:	91 81       	ldd	r25, Z+1	; 0x01
    6ec4:	01 97       	sbiw	r24, 0x01	; 1
    6ec6:	11 96       	adiw	r26, 0x01	; 1
    6ec8:	9c 93       	st	X, r25
    6eca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6ecc:	fe 01       	movw	r30, r28
    6ece:	e9 52       	subi	r30, 0x29	; 41
    6ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    6ed2:	80 81       	ld	r24, Z
    6ed4:	91 81       	ldd	r25, Z+1	; 0x01
    6ed6:	00 97       	sbiw	r24, 0x00	; 0
    6ed8:	d1 f6       	brne	.-76     	; 0x6e8e <STEPPER_voidTurnOn+0xfbe>
    6eda:	27 c0       	rjmp	.+78     	; 0x6f2a <STEPPER_voidTurnOn+0x105a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6edc:	8e 01       	movw	r16, r28
    6ede:	09 52       	subi	r16, 0x29	; 41
    6ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    6ee2:	fe 01       	movw	r30, r28
    6ee4:	e7 52       	subi	r30, 0x27	; 39
    6ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    6ee8:	60 81       	ld	r22, Z
    6eea:	71 81       	ldd	r23, Z+1	; 0x01
    6eec:	82 81       	ldd	r24, Z+2	; 0x02
    6eee:	93 81       	ldd	r25, Z+3	; 0x03
    6ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ef4:	dc 01       	movw	r26, r24
    6ef6:	cb 01       	movw	r24, r22
    6ef8:	f8 01       	movw	r30, r16
    6efa:	91 83       	std	Z+1, r25	; 0x01
    6efc:	80 83       	st	Z, r24
    6efe:	de 01       	movw	r26, r28
    6f00:	ad 52       	subi	r26, 0x2D	; 45
    6f02:	bf 4f       	sbci	r27, 0xFF	; 255
    6f04:	fe 01       	movw	r30, r28
    6f06:	e9 52       	subi	r30, 0x29	; 41
    6f08:	ff 4f       	sbci	r31, 0xFF	; 255
    6f0a:	80 81       	ld	r24, Z
    6f0c:	91 81       	ldd	r25, Z+1	; 0x01
    6f0e:	8d 93       	st	X+, r24
    6f10:	9c 93       	st	X, r25
    6f12:	fe 01       	movw	r30, r28
    6f14:	ed 52       	subi	r30, 0x2D	; 45
    6f16:	ff 4f       	sbci	r31, 0xFF	; 255
    6f18:	80 81       	ld	r24, Z
    6f1a:	91 81       	ldd	r25, Z+1	; 0x01
    6f1c:	01 97       	sbiw	r24, 0x01	; 1
    6f1e:	f1 f7       	brne	.-4      	; 0x6f1c <STEPPER_voidTurnOn+0x104c>
    6f20:	fe 01       	movw	r30, r28
    6f22:	ed 52       	subi	r30, 0x2D	; 45
    6f24:	ff 4f       	sbci	r31, 0xFF	; 255
    6f26:	91 83       	std	Z+1, r25	; 0x01
    6f28:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_HIGH );
    6f2a:	80 e0       	ldi	r24, 0x00	; 0
    6f2c:	62 e0       	ldi	r22, 0x02	; 2
    6f2e:	41 e0       	ldi	r20, 0x01	; 1
    6f30:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_HIGH );
    6f34:	80 e0       	ldi	r24, 0x00	; 0
    6f36:	63 e0       	ldi	r22, 0x03	; 3
    6f38:	41 e0       	ldi	r20, 0x01	; 1
    6f3a:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_LOW  );
    6f3e:	80 e0       	ldi	r24, 0x00	; 0
    6f40:	64 e0       	ldi	r22, 0x04	; 4
    6f42:	40 e0       	ldi	r20, 0x00	; 0
    6f44:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_LOW  );
    6f48:	80 e0       	ldi	r24, 0x00	; 0
    6f4a:	65 e0       	ldi	r22, 0x05	; 5
    6f4c:	40 e0       	ldi	r20, 0x00	; 0
    6f4e:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    6f52:	fe 01       	movw	r30, r28
    6f54:	e9 5a       	subi	r30, 0xA9	; 169
    6f56:	fe 4f       	sbci	r31, 0xFE	; 254
    6f58:	80 81       	ld	r24, Z
    6f5a:	88 2f       	mov	r24, r24
    6f5c:	90 e0       	ldi	r25, 0x00	; 0
    6f5e:	a0 e0       	ldi	r26, 0x00	; 0
    6f60:	b0 e0       	ldi	r27, 0x00	; 0
    6f62:	bc 01       	movw	r22, r24
    6f64:	cd 01       	movw	r24, r26
    6f66:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    6f6a:	dc 01       	movw	r26, r24
    6f6c:	cb 01       	movw	r24, r22
    6f6e:	fe 01       	movw	r30, r28
    6f70:	e1 53       	subi	r30, 0x31	; 49
    6f72:	ff 4f       	sbci	r31, 0xFF	; 255
    6f74:	80 83       	st	Z, r24
    6f76:	91 83       	std	Z+1, r25	; 0x01
    6f78:	a2 83       	std	Z+2, r26	; 0x02
    6f7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6f7c:	8e 01       	movw	r16, r28
    6f7e:	05 53       	subi	r16, 0x35	; 53
    6f80:	1f 4f       	sbci	r17, 0xFF	; 255
    6f82:	fe 01       	movw	r30, r28
    6f84:	e1 53       	subi	r30, 0x31	; 49
    6f86:	ff 4f       	sbci	r31, 0xFF	; 255
    6f88:	60 81       	ld	r22, Z
    6f8a:	71 81       	ldd	r23, Z+1	; 0x01
    6f8c:	82 81       	ldd	r24, Z+2	; 0x02
    6f8e:	93 81       	ldd	r25, Z+3	; 0x03
    6f90:	20 e0       	ldi	r18, 0x00	; 0
    6f92:	30 e0       	ldi	r19, 0x00	; 0
    6f94:	4a ef       	ldi	r20, 0xFA	; 250
    6f96:	54 e4       	ldi	r21, 0x44	; 68
    6f98:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6f9c:	dc 01       	movw	r26, r24
    6f9e:	cb 01       	movw	r24, r22
    6fa0:	f8 01       	movw	r30, r16
    6fa2:	80 83       	st	Z, r24
    6fa4:	91 83       	std	Z+1, r25	; 0x01
    6fa6:	a2 83       	std	Z+2, r26	; 0x02
    6fa8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6faa:	fe 01       	movw	r30, r28
    6fac:	e5 53       	subi	r30, 0x35	; 53
    6fae:	ff 4f       	sbci	r31, 0xFF	; 255
    6fb0:	60 81       	ld	r22, Z
    6fb2:	71 81       	ldd	r23, Z+1	; 0x01
    6fb4:	82 81       	ldd	r24, Z+2	; 0x02
    6fb6:	93 81       	ldd	r25, Z+3	; 0x03
    6fb8:	20 e0       	ldi	r18, 0x00	; 0
    6fba:	30 e0       	ldi	r19, 0x00	; 0
    6fbc:	40 e8       	ldi	r20, 0x80	; 128
    6fbe:	5f e3       	ldi	r21, 0x3F	; 63
    6fc0:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    6fc4:	88 23       	and	r24, r24
    6fc6:	44 f4       	brge	.+16     	; 0x6fd8 <STEPPER_voidTurnOn+0x1108>
		__ticks = 1;
    6fc8:	fe 01       	movw	r30, r28
    6fca:	e7 53       	subi	r30, 0x37	; 55
    6fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    6fce:	81 e0       	ldi	r24, 0x01	; 1
    6fd0:	90 e0       	ldi	r25, 0x00	; 0
    6fd2:	91 83       	std	Z+1, r25	; 0x01
    6fd4:	80 83       	st	Z, r24
    6fd6:	64 c0       	rjmp	.+200    	; 0x70a0 <STEPPER_voidTurnOn+0x11d0>
	else if (__tmp > 65535)
    6fd8:	fe 01       	movw	r30, r28
    6fda:	e5 53       	subi	r30, 0x35	; 53
    6fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    6fde:	60 81       	ld	r22, Z
    6fe0:	71 81       	ldd	r23, Z+1	; 0x01
    6fe2:	82 81       	ldd	r24, Z+2	; 0x02
    6fe4:	93 81       	ldd	r25, Z+3	; 0x03
    6fe6:	20 e0       	ldi	r18, 0x00	; 0
    6fe8:	3f ef       	ldi	r19, 0xFF	; 255
    6fea:	4f e7       	ldi	r20, 0x7F	; 127
    6fec:	57 e4       	ldi	r21, 0x47	; 71
    6fee:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    6ff2:	18 16       	cp	r1, r24
    6ff4:	0c f0       	brlt	.+2      	; 0x6ff8 <STEPPER_voidTurnOn+0x1128>
    6ff6:	43 c0       	rjmp	.+134    	; 0x707e <STEPPER_voidTurnOn+0x11ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ff8:	fe 01       	movw	r30, r28
    6ffa:	e1 53       	subi	r30, 0x31	; 49
    6ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    6ffe:	60 81       	ld	r22, Z
    7000:	71 81       	ldd	r23, Z+1	; 0x01
    7002:	82 81       	ldd	r24, Z+2	; 0x02
    7004:	93 81       	ldd	r25, Z+3	; 0x03
    7006:	20 e0       	ldi	r18, 0x00	; 0
    7008:	30 e0       	ldi	r19, 0x00	; 0
    700a:	40 e2       	ldi	r20, 0x20	; 32
    700c:	51 e4       	ldi	r21, 0x41	; 65
    700e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    7012:	dc 01       	movw	r26, r24
    7014:	cb 01       	movw	r24, r22
    7016:	8e 01       	movw	r16, r28
    7018:	07 53       	subi	r16, 0x37	; 55
    701a:	1f 4f       	sbci	r17, 0xFF	; 255
    701c:	bc 01       	movw	r22, r24
    701e:	cd 01       	movw	r24, r26
    7020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7024:	dc 01       	movw	r26, r24
    7026:	cb 01       	movw	r24, r22
    7028:	f8 01       	movw	r30, r16
    702a:	91 83       	std	Z+1, r25	; 0x01
    702c:	80 83       	st	Z, r24
    702e:	1f c0       	rjmp	.+62     	; 0x706e <STEPPER_voidTurnOn+0x119e>
    7030:	fe 01       	movw	r30, r28
    7032:	e9 53       	subi	r30, 0x39	; 57
    7034:	ff 4f       	sbci	r31, 0xFF	; 255
    7036:	88 ec       	ldi	r24, 0xC8	; 200
    7038:	90 e0       	ldi	r25, 0x00	; 0
    703a:	91 83       	std	Z+1, r25	; 0x01
    703c:	80 83       	st	Z, r24
    703e:	fe 01       	movw	r30, r28
    7040:	e9 53       	subi	r30, 0x39	; 57
    7042:	ff 4f       	sbci	r31, 0xFF	; 255
    7044:	80 81       	ld	r24, Z
    7046:	91 81       	ldd	r25, Z+1	; 0x01
    7048:	01 97       	sbiw	r24, 0x01	; 1
    704a:	f1 f7       	brne	.-4      	; 0x7048 <STEPPER_voidTurnOn+0x1178>
    704c:	fe 01       	movw	r30, r28
    704e:	e9 53       	subi	r30, 0x39	; 57
    7050:	ff 4f       	sbci	r31, 0xFF	; 255
    7052:	91 83       	std	Z+1, r25	; 0x01
    7054:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7056:	de 01       	movw	r26, r28
    7058:	a7 53       	subi	r26, 0x37	; 55
    705a:	bf 4f       	sbci	r27, 0xFF	; 255
    705c:	fe 01       	movw	r30, r28
    705e:	e7 53       	subi	r30, 0x37	; 55
    7060:	ff 4f       	sbci	r31, 0xFF	; 255
    7062:	80 81       	ld	r24, Z
    7064:	91 81       	ldd	r25, Z+1	; 0x01
    7066:	01 97       	sbiw	r24, 0x01	; 1
    7068:	11 96       	adiw	r26, 0x01	; 1
    706a:	9c 93       	st	X, r25
    706c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    706e:	fe 01       	movw	r30, r28
    7070:	e7 53       	subi	r30, 0x37	; 55
    7072:	ff 4f       	sbci	r31, 0xFF	; 255
    7074:	80 81       	ld	r24, Z
    7076:	91 81       	ldd	r25, Z+1	; 0x01
    7078:	00 97       	sbiw	r24, 0x00	; 0
    707a:	d1 f6       	brne	.-76     	; 0x7030 <STEPPER_voidTurnOn+0x1160>
    707c:	27 c0       	rjmp	.+78     	; 0x70cc <STEPPER_voidTurnOn+0x11fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    707e:	8e 01       	movw	r16, r28
    7080:	07 53       	subi	r16, 0x37	; 55
    7082:	1f 4f       	sbci	r17, 0xFF	; 255
    7084:	fe 01       	movw	r30, r28
    7086:	e5 53       	subi	r30, 0x35	; 53
    7088:	ff 4f       	sbci	r31, 0xFF	; 255
    708a:	60 81       	ld	r22, Z
    708c:	71 81       	ldd	r23, Z+1	; 0x01
    708e:	82 81       	ldd	r24, Z+2	; 0x02
    7090:	93 81       	ldd	r25, Z+3	; 0x03
    7092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7096:	dc 01       	movw	r26, r24
    7098:	cb 01       	movw	r24, r22
    709a:	f8 01       	movw	r30, r16
    709c:	91 83       	std	Z+1, r25	; 0x01
    709e:	80 83       	st	Z, r24
    70a0:	de 01       	movw	r26, r28
    70a2:	ab 53       	subi	r26, 0x3B	; 59
    70a4:	bf 4f       	sbci	r27, 0xFF	; 255
    70a6:	fe 01       	movw	r30, r28
    70a8:	e7 53       	subi	r30, 0x37	; 55
    70aa:	ff 4f       	sbci	r31, 0xFF	; 255
    70ac:	80 81       	ld	r24, Z
    70ae:	91 81       	ldd	r25, Z+1	; 0x01
    70b0:	8d 93       	st	X+, r24
    70b2:	9c 93       	st	X, r25
    70b4:	fe 01       	movw	r30, r28
    70b6:	eb 53       	subi	r30, 0x3B	; 59
    70b8:	ff 4f       	sbci	r31, 0xFF	; 255
    70ba:	80 81       	ld	r24, Z
    70bc:	91 81       	ldd	r25, Z+1	; 0x01
    70be:	01 97       	sbiw	r24, 0x01	; 1
    70c0:	f1 f7       	brne	.-4      	; 0x70be <STEPPER_voidTurnOn+0x11ee>
    70c2:	fe 01       	movw	r30, r28
    70c4:	eb 53       	subi	r30, 0x3B	; 59
    70c6:	ff 4f       	sbci	r31, 0xFF	; 255
    70c8:	91 83       	std	Z+1, r25	; 0x01
    70ca:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_LOW  );
    70cc:	80 e0       	ldi	r24, 0x00	; 0
    70ce:	62 e0       	ldi	r22, 0x02	; 2
    70d0:	40 e0       	ldi	r20, 0x00	; 0
    70d2:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_HIGH );
    70d6:	80 e0       	ldi	r24, 0x00	; 0
    70d8:	63 e0       	ldi	r22, 0x03	; 3
    70da:	41 e0       	ldi	r20, 0x01	; 1
    70dc:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_LOW  );
    70e0:	80 e0       	ldi	r24, 0x00	; 0
    70e2:	64 e0       	ldi	r22, 0x04	; 4
    70e4:	40 e0       	ldi	r20, 0x00	; 0
    70e6:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_LOW  );
    70ea:	80 e0       	ldi	r24, 0x00	; 0
    70ec:	65 e0       	ldi	r22, 0x05	; 5
    70ee:	40 e0       	ldi	r20, 0x00	; 0
    70f0:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    70f4:	fe 01       	movw	r30, r28
    70f6:	e9 5a       	subi	r30, 0xA9	; 169
    70f8:	fe 4f       	sbci	r31, 0xFE	; 254
    70fa:	80 81       	ld	r24, Z
    70fc:	88 2f       	mov	r24, r24
    70fe:	90 e0       	ldi	r25, 0x00	; 0
    7100:	a0 e0       	ldi	r26, 0x00	; 0
    7102:	b0 e0       	ldi	r27, 0x00	; 0
    7104:	bc 01       	movw	r22, r24
    7106:	cd 01       	movw	r24, r26
    7108:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    710c:	dc 01       	movw	r26, r24
    710e:	cb 01       	movw	r24, r22
    7110:	fe 01       	movw	r30, r28
    7112:	ef 53       	subi	r30, 0x3F	; 63
    7114:	ff 4f       	sbci	r31, 0xFF	; 255
    7116:	80 83       	st	Z, r24
    7118:	91 83       	std	Z+1, r25	; 0x01
    711a:	a2 83       	std	Z+2, r26	; 0x02
    711c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    711e:	8e 01       	movw	r16, r28
    7120:	03 54       	subi	r16, 0x43	; 67
    7122:	1f 4f       	sbci	r17, 0xFF	; 255
    7124:	fe 01       	movw	r30, r28
    7126:	ef 53       	subi	r30, 0x3F	; 63
    7128:	ff 4f       	sbci	r31, 0xFF	; 255
    712a:	60 81       	ld	r22, Z
    712c:	71 81       	ldd	r23, Z+1	; 0x01
    712e:	82 81       	ldd	r24, Z+2	; 0x02
    7130:	93 81       	ldd	r25, Z+3	; 0x03
    7132:	20 e0       	ldi	r18, 0x00	; 0
    7134:	30 e0       	ldi	r19, 0x00	; 0
    7136:	4a ef       	ldi	r20, 0xFA	; 250
    7138:	54 e4       	ldi	r21, 0x44	; 68
    713a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    713e:	dc 01       	movw	r26, r24
    7140:	cb 01       	movw	r24, r22
    7142:	f8 01       	movw	r30, r16
    7144:	80 83       	st	Z, r24
    7146:	91 83       	std	Z+1, r25	; 0x01
    7148:	a2 83       	std	Z+2, r26	; 0x02
    714a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    714c:	fe 01       	movw	r30, r28
    714e:	e3 54       	subi	r30, 0x43	; 67
    7150:	ff 4f       	sbci	r31, 0xFF	; 255
    7152:	60 81       	ld	r22, Z
    7154:	71 81       	ldd	r23, Z+1	; 0x01
    7156:	82 81       	ldd	r24, Z+2	; 0x02
    7158:	93 81       	ldd	r25, Z+3	; 0x03
    715a:	20 e0       	ldi	r18, 0x00	; 0
    715c:	30 e0       	ldi	r19, 0x00	; 0
    715e:	40 e8       	ldi	r20, 0x80	; 128
    7160:	5f e3       	ldi	r21, 0x3F	; 63
    7162:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    7166:	88 23       	and	r24, r24
    7168:	44 f4       	brge	.+16     	; 0x717a <STEPPER_voidTurnOn+0x12aa>
		__ticks = 1;
    716a:	fe 01       	movw	r30, r28
    716c:	e5 54       	subi	r30, 0x45	; 69
    716e:	ff 4f       	sbci	r31, 0xFF	; 255
    7170:	81 e0       	ldi	r24, 0x01	; 1
    7172:	90 e0       	ldi	r25, 0x00	; 0
    7174:	91 83       	std	Z+1, r25	; 0x01
    7176:	80 83       	st	Z, r24
    7178:	64 c0       	rjmp	.+200    	; 0x7242 <STEPPER_voidTurnOn+0x1372>
	else if (__tmp > 65535)
    717a:	fe 01       	movw	r30, r28
    717c:	e3 54       	subi	r30, 0x43	; 67
    717e:	ff 4f       	sbci	r31, 0xFF	; 255
    7180:	60 81       	ld	r22, Z
    7182:	71 81       	ldd	r23, Z+1	; 0x01
    7184:	82 81       	ldd	r24, Z+2	; 0x02
    7186:	93 81       	ldd	r25, Z+3	; 0x03
    7188:	20 e0       	ldi	r18, 0x00	; 0
    718a:	3f ef       	ldi	r19, 0xFF	; 255
    718c:	4f e7       	ldi	r20, 0x7F	; 127
    718e:	57 e4       	ldi	r21, 0x47	; 71
    7190:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    7194:	18 16       	cp	r1, r24
    7196:	0c f0       	brlt	.+2      	; 0x719a <STEPPER_voidTurnOn+0x12ca>
    7198:	43 c0       	rjmp	.+134    	; 0x7220 <STEPPER_voidTurnOn+0x1350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    719a:	fe 01       	movw	r30, r28
    719c:	ef 53       	subi	r30, 0x3F	; 63
    719e:	ff 4f       	sbci	r31, 0xFF	; 255
    71a0:	60 81       	ld	r22, Z
    71a2:	71 81       	ldd	r23, Z+1	; 0x01
    71a4:	82 81       	ldd	r24, Z+2	; 0x02
    71a6:	93 81       	ldd	r25, Z+3	; 0x03
    71a8:	20 e0       	ldi	r18, 0x00	; 0
    71aa:	30 e0       	ldi	r19, 0x00	; 0
    71ac:	40 e2       	ldi	r20, 0x20	; 32
    71ae:	51 e4       	ldi	r21, 0x41	; 65
    71b0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    71b4:	dc 01       	movw	r26, r24
    71b6:	cb 01       	movw	r24, r22
    71b8:	8e 01       	movw	r16, r28
    71ba:	05 54       	subi	r16, 0x45	; 69
    71bc:	1f 4f       	sbci	r17, 0xFF	; 255
    71be:	bc 01       	movw	r22, r24
    71c0:	cd 01       	movw	r24, r26
    71c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    71c6:	dc 01       	movw	r26, r24
    71c8:	cb 01       	movw	r24, r22
    71ca:	f8 01       	movw	r30, r16
    71cc:	91 83       	std	Z+1, r25	; 0x01
    71ce:	80 83       	st	Z, r24
    71d0:	1f c0       	rjmp	.+62     	; 0x7210 <STEPPER_voidTurnOn+0x1340>
    71d2:	fe 01       	movw	r30, r28
    71d4:	e7 54       	subi	r30, 0x47	; 71
    71d6:	ff 4f       	sbci	r31, 0xFF	; 255
    71d8:	88 ec       	ldi	r24, 0xC8	; 200
    71da:	90 e0       	ldi	r25, 0x00	; 0
    71dc:	91 83       	std	Z+1, r25	; 0x01
    71de:	80 83       	st	Z, r24
    71e0:	fe 01       	movw	r30, r28
    71e2:	e7 54       	subi	r30, 0x47	; 71
    71e4:	ff 4f       	sbci	r31, 0xFF	; 255
    71e6:	80 81       	ld	r24, Z
    71e8:	91 81       	ldd	r25, Z+1	; 0x01
    71ea:	01 97       	sbiw	r24, 0x01	; 1
    71ec:	f1 f7       	brne	.-4      	; 0x71ea <STEPPER_voidTurnOn+0x131a>
    71ee:	fe 01       	movw	r30, r28
    71f0:	e7 54       	subi	r30, 0x47	; 71
    71f2:	ff 4f       	sbci	r31, 0xFF	; 255
    71f4:	91 83       	std	Z+1, r25	; 0x01
    71f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    71f8:	de 01       	movw	r26, r28
    71fa:	a5 54       	subi	r26, 0x45	; 69
    71fc:	bf 4f       	sbci	r27, 0xFF	; 255
    71fe:	fe 01       	movw	r30, r28
    7200:	e5 54       	subi	r30, 0x45	; 69
    7202:	ff 4f       	sbci	r31, 0xFF	; 255
    7204:	80 81       	ld	r24, Z
    7206:	91 81       	ldd	r25, Z+1	; 0x01
    7208:	01 97       	sbiw	r24, 0x01	; 1
    720a:	11 96       	adiw	r26, 0x01	; 1
    720c:	9c 93       	st	X, r25
    720e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7210:	fe 01       	movw	r30, r28
    7212:	e5 54       	subi	r30, 0x45	; 69
    7214:	ff 4f       	sbci	r31, 0xFF	; 255
    7216:	80 81       	ld	r24, Z
    7218:	91 81       	ldd	r25, Z+1	; 0x01
    721a:	00 97       	sbiw	r24, 0x00	; 0
    721c:	d1 f6       	brne	.-76     	; 0x71d2 <STEPPER_voidTurnOn+0x1302>
    721e:	27 c0       	rjmp	.+78     	; 0x726e <STEPPER_voidTurnOn+0x139e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7220:	8e 01       	movw	r16, r28
    7222:	05 54       	subi	r16, 0x45	; 69
    7224:	1f 4f       	sbci	r17, 0xFF	; 255
    7226:	fe 01       	movw	r30, r28
    7228:	e3 54       	subi	r30, 0x43	; 67
    722a:	ff 4f       	sbci	r31, 0xFF	; 255
    722c:	60 81       	ld	r22, Z
    722e:	71 81       	ldd	r23, Z+1	; 0x01
    7230:	82 81       	ldd	r24, Z+2	; 0x02
    7232:	93 81       	ldd	r25, Z+3	; 0x03
    7234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7238:	dc 01       	movw	r26, r24
    723a:	cb 01       	movw	r24, r22
    723c:	f8 01       	movw	r30, r16
    723e:	91 83       	std	Z+1, r25	; 0x01
    7240:	80 83       	st	Z, r24
    7242:	de 01       	movw	r26, r28
    7244:	a9 54       	subi	r26, 0x49	; 73
    7246:	bf 4f       	sbci	r27, 0xFF	; 255
    7248:	fe 01       	movw	r30, r28
    724a:	e5 54       	subi	r30, 0x45	; 69
    724c:	ff 4f       	sbci	r31, 0xFF	; 255
    724e:	80 81       	ld	r24, Z
    7250:	91 81       	ldd	r25, Z+1	; 0x01
    7252:	8d 93       	st	X+, r24
    7254:	9c 93       	st	X, r25
    7256:	fe 01       	movw	r30, r28
    7258:	e9 54       	subi	r30, 0x49	; 73
    725a:	ff 4f       	sbci	r31, 0xFF	; 255
    725c:	80 81       	ld	r24, Z
    725e:	91 81       	ldd	r25, Z+1	; 0x01
    7260:	01 97       	sbiw	r24, 0x01	; 1
    7262:	f1 f7       	brne	.-4      	; 0x7260 <STEPPER_voidTurnOn+0x1390>
    7264:	fe 01       	movw	r30, r28
    7266:	e9 54       	subi	r30, 0x49	; 73
    7268:	ff 4f       	sbci	r31, 0xFF	; 255
    726a:	91 83       	std	Z+1, r25	; 0x01
    726c:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_LOW  );
    726e:	80 e0       	ldi	r24, 0x00	; 0
    7270:	62 e0       	ldi	r22, 0x02	; 2
    7272:	40 e0       	ldi	r20, 0x00	; 0
    7274:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_HIGH );
    7278:	80 e0       	ldi	r24, 0x00	; 0
    727a:	63 e0       	ldi	r22, 0x03	; 3
    727c:	41 e0       	ldi	r20, 0x01	; 1
    727e:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_HIGH );
    7282:	80 e0       	ldi	r24, 0x00	; 0
    7284:	64 e0       	ldi	r22, 0x04	; 4
    7286:	41 e0       	ldi	r20, 0x01	; 1
    7288:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_LOW  );
    728c:	80 e0       	ldi	r24, 0x00	; 0
    728e:	65 e0       	ldi	r22, 0x05	; 5
    7290:	40 e0       	ldi	r20, 0x00	; 0
    7292:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    7296:	fe 01       	movw	r30, r28
    7298:	e9 5a       	subi	r30, 0xA9	; 169
    729a:	fe 4f       	sbci	r31, 0xFE	; 254
    729c:	80 81       	ld	r24, Z
    729e:	88 2f       	mov	r24, r24
    72a0:	90 e0       	ldi	r25, 0x00	; 0
    72a2:	a0 e0       	ldi	r26, 0x00	; 0
    72a4:	b0 e0       	ldi	r27, 0x00	; 0
    72a6:	bc 01       	movw	r22, r24
    72a8:	cd 01       	movw	r24, r26
    72aa:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    72ae:	dc 01       	movw	r26, r24
    72b0:	cb 01       	movw	r24, r22
    72b2:	fe 01       	movw	r30, r28
    72b4:	ed 54       	subi	r30, 0x4D	; 77
    72b6:	ff 4f       	sbci	r31, 0xFF	; 255
    72b8:	80 83       	st	Z, r24
    72ba:	91 83       	std	Z+1, r25	; 0x01
    72bc:	a2 83       	std	Z+2, r26	; 0x02
    72be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    72c0:	8e 01       	movw	r16, r28
    72c2:	01 55       	subi	r16, 0x51	; 81
    72c4:	1f 4f       	sbci	r17, 0xFF	; 255
    72c6:	fe 01       	movw	r30, r28
    72c8:	ed 54       	subi	r30, 0x4D	; 77
    72ca:	ff 4f       	sbci	r31, 0xFF	; 255
    72cc:	60 81       	ld	r22, Z
    72ce:	71 81       	ldd	r23, Z+1	; 0x01
    72d0:	82 81       	ldd	r24, Z+2	; 0x02
    72d2:	93 81       	ldd	r25, Z+3	; 0x03
    72d4:	20 e0       	ldi	r18, 0x00	; 0
    72d6:	30 e0       	ldi	r19, 0x00	; 0
    72d8:	4a ef       	ldi	r20, 0xFA	; 250
    72da:	54 e4       	ldi	r21, 0x44	; 68
    72dc:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    72e0:	dc 01       	movw	r26, r24
    72e2:	cb 01       	movw	r24, r22
    72e4:	f8 01       	movw	r30, r16
    72e6:	80 83       	st	Z, r24
    72e8:	91 83       	std	Z+1, r25	; 0x01
    72ea:	a2 83       	std	Z+2, r26	; 0x02
    72ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    72ee:	fe 01       	movw	r30, r28
    72f0:	e1 55       	subi	r30, 0x51	; 81
    72f2:	ff 4f       	sbci	r31, 0xFF	; 255
    72f4:	60 81       	ld	r22, Z
    72f6:	71 81       	ldd	r23, Z+1	; 0x01
    72f8:	82 81       	ldd	r24, Z+2	; 0x02
    72fa:	93 81       	ldd	r25, Z+3	; 0x03
    72fc:	20 e0       	ldi	r18, 0x00	; 0
    72fe:	30 e0       	ldi	r19, 0x00	; 0
    7300:	40 e8       	ldi	r20, 0x80	; 128
    7302:	5f e3       	ldi	r21, 0x3F	; 63
    7304:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    7308:	88 23       	and	r24, r24
    730a:	44 f4       	brge	.+16     	; 0x731c <STEPPER_voidTurnOn+0x144c>
		__ticks = 1;
    730c:	fe 01       	movw	r30, r28
    730e:	e3 55       	subi	r30, 0x53	; 83
    7310:	ff 4f       	sbci	r31, 0xFF	; 255
    7312:	81 e0       	ldi	r24, 0x01	; 1
    7314:	90 e0       	ldi	r25, 0x00	; 0
    7316:	91 83       	std	Z+1, r25	; 0x01
    7318:	80 83       	st	Z, r24
    731a:	64 c0       	rjmp	.+200    	; 0x73e4 <STEPPER_voidTurnOn+0x1514>
	else if (__tmp > 65535)
    731c:	fe 01       	movw	r30, r28
    731e:	e1 55       	subi	r30, 0x51	; 81
    7320:	ff 4f       	sbci	r31, 0xFF	; 255
    7322:	60 81       	ld	r22, Z
    7324:	71 81       	ldd	r23, Z+1	; 0x01
    7326:	82 81       	ldd	r24, Z+2	; 0x02
    7328:	93 81       	ldd	r25, Z+3	; 0x03
    732a:	20 e0       	ldi	r18, 0x00	; 0
    732c:	3f ef       	ldi	r19, 0xFF	; 255
    732e:	4f e7       	ldi	r20, 0x7F	; 127
    7330:	57 e4       	ldi	r21, 0x47	; 71
    7332:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    7336:	18 16       	cp	r1, r24
    7338:	0c f0       	brlt	.+2      	; 0x733c <STEPPER_voidTurnOn+0x146c>
    733a:	43 c0       	rjmp	.+134    	; 0x73c2 <STEPPER_voidTurnOn+0x14f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    733c:	fe 01       	movw	r30, r28
    733e:	ed 54       	subi	r30, 0x4D	; 77
    7340:	ff 4f       	sbci	r31, 0xFF	; 255
    7342:	60 81       	ld	r22, Z
    7344:	71 81       	ldd	r23, Z+1	; 0x01
    7346:	82 81       	ldd	r24, Z+2	; 0x02
    7348:	93 81       	ldd	r25, Z+3	; 0x03
    734a:	20 e0       	ldi	r18, 0x00	; 0
    734c:	30 e0       	ldi	r19, 0x00	; 0
    734e:	40 e2       	ldi	r20, 0x20	; 32
    7350:	51 e4       	ldi	r21, 0x41	; 65
    7352:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    7356:	dc 01       	movw	r26, r24
    7358:	cb 01       	movw	r24, r22
    735a:	8e 01       	movw	r16, r28
    735c:	03 55       	subi	r16, 0x53	; 83
    735e:	1f 4f       	sbci	r17, 0xFF	; 255
    7360:	bc 01       	movw	r22, r24
    7362:	cd 01       	movw	r24, r26
    7364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7368:	dc 01       	movw	r26, r24
    736a:	cb 01       	movw	r24, r22
    736c:	f8 01       	movw	r30, r16
    736e:	91 83       	std	Z+1, r25	; 0x01
    7370:	80 83       	st	Z, r24
    7372:	1f c0       	rjmp	.+62     	; 0x73b2 <STEPPER_voidTurnOn+0x14e2>
    7374:	fe 01       	movw	r30, r28
    7376:	e5 55       	subi	r30, 0x55	; 85
    7378:	ff 4f       	sbci	r31, 0xFF	; 255
    737a:	88 ec       	ldi	r24, 0xC8	; 200
    737c:	90 e0       	ldi	r25, 0x00	; 0
    737e:	91 83       	std	Z+1, r25	; 0x01
    7380:	80 83       	st	Z, r24
    7382:	fe 01       	movw	r30, r28
    7384:	e5 55       	subi	r30, 0x55	; 85
    7386:	ff 4f       	sbci	r31, 0xFF	; 255
    7388:	80 81       	ld	r24, Z
    738a:	91 81       	ldd	r25, Z+1	; 0x01
    738c:	01 97       	sbiw	r24, 0x01	; 1
    738e:	f1 f7       	brne	.-4      	; 0x738c <STEPPER_voidTurnOn+0x14bc>
    7390:	fe 01       	movw	r30, r28
    7392:	e5 55       	subi	r30, 0x55	; 85
    7394:	ff 4f       	sbci	r31, 0xFF	; 255
    7396:	91 83       	std	Z+1, r25	; 0x01
    7398:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    739a:	de 01       	movw	r26, r28
    739c:	a3 55       	subi	r26, 0x53	; 83
    739e:	bf 4f       	sbci	r27, 0xFF	; 255
    73a0:	fe 01       	movw	r30, r28
    73a2:	e3 55       	subi	r30, 0x53	; 83
    73a4:	ff 4f       	sbci	r31, 0xFF	; 255
    73a6:	80 81       	ld	r24, Z
    73a8:	91 81       	ldd	r25, Z+1	; 0x01
    73aa:	01 97       	sbiw	r24, 0x01	; 1
    73ac:	11 96       	adiw	r26, 0x01	; 1
    73ae:	9c 93       	st	X, r25
    73b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    73b2:	fe 01       	movw	r30, r28
    73b4:	e3 55       	subi	r30, 0x53	; 83
    73b6:	ff 4f       	sbci	r31, 0xFF	; 255
    73b8:	80 81       	ld	r24, Z
    73ba:	91 81       	ldd	r25, Z+1	; 0x01
    73bc:	00 97       	sbiw	r24, 0x00	; 0
    73be:	d1 f6       	brne	.-76     	; 0x7374 <STEPPER_voidTurnOn+0x14a4>
    73c0:	27 c0       	rjmp	.+78     	; 0x7410 <STEPPER_voidTurnOn+0x1540>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    73c2:	8e 01       	movw	r16, r28
    73c4:	03 55       	subi	r16, 0x53	; 83
    73c6:	1f 4f       	sbci	r17, 0xFF	; 255
    73c8:	fe 01       	movw	r30, r28
    73ca:	e1 55       	subi	r30, 0x51	; 81
    73cc:	ff 4f       	sbci	r31, 0xFF	; 255
    73ce:	60 81       	ld	r22, Z
    73d0:	71 81       	ldd	r23, Z+1	; 0x01
    73d2:	82 81       	ldd	r24, Z+2	; 0x02
    73d4:	93 81       	ldd	r25, Z+3	; 0x03
    73d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    73da:	dc 01       	movw	r26, r24
    73dc:	cb 01       	movw	r24, r22
    73de:	f8 01       	movw	r30, r16
    73e0:	91 83       	std	Z+1, r25	; 0x01
    73e2:	80 83       	st	Z, r24
    73e4:	de 01       	movw	r26, r28
    73e6:	a7 55       	subi	r26, 0x57	; 87
    73e8:	bf 4f       	sbci	r27, 0xFF	; 255
    73ea:	fe 01       	movw	r30, r28
    73ec:	e3 55       	subi	r30, 0x53	; 83
    73ee:	ff 4f       	sbci	r31, 0xFF	; 255
    73f0:	80 81       	ld	r24, Z
    73f2:	91 81       	ldd	r25, Z+1	; 0x01
    73f4:	8d 93       	st	X+, r24
    73f6:	9c 93       	st	X, r25
    73f8:	fe 01       	movw	r30, r28
    73fa:	e7 55       	subi	r30, 0x57	; 87
    73fc:	ff 4f       	sbci	r31, 0xFF	; 255
    73fe:	80 81       	ld	r24, Z
    7400:	91 81       	ldd	r25, Z+1	; 0x01
    7402:	01 97       	sbiw	r24, 0x01	; 1
    7404:	f1 f7       	brne	.-4      	; 0x7402 <STEPPER_voidTurnOn+0x1532>
    7406:	fe 01       	movw	r30, r28
    7408:	e7 55       	subi	r30, 0x57	; 87
    740a:	ff 4f       	sbci	r31, 0xFF	; 255
    740c:	91 83       	std	Z+1, r25	; 0x01
    740e:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_LOW  );
    7410:	80 e0       	ldi	r24, 0x00	; 0
    7412:	62 e0       	ldi	r22, 0x02	; 2
    7414:	40 e0       	ldi	r20, 0x00	; 0
    7416:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_LOW  );
    741a:	80 e0       	ldi	r24, 0x00	; 0
    741c:	63 e0       	ldi	r22, 0x03	; 3
    741e:	40 e0       	ldi	r20, 0x00	; 0
    7420:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_HIGH );
    7424:	80 e0       	ldi	r24, 0x00	; 0
    7426:	64 e0       	ldi	r22, 0x04	; 4
    7428:	41 e0       	ldi	r20, 0x01	; 1
    742a:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_LOW  );
    742e:	80 e0       	ldi	r24, 0x00	; 0
    7430:	65 e0       	ldi	r22, 0x05	; 5
    7432:	40 e0       	ldi	r20, 0x00	; 0
    7434:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    7438:	fe 01       	movw	r30, r28
    743a:	e9 5a       	subi	r30, 0xA9	; 169
    743c:	fe 4f       	sbci	r31, 0xFE	; 254
    743e:	80 81       	ld	r24, Z
    7440:	88 2f       	mov	r24, r24
    7442:	90 e0       	ldi	r25, 0x00	; 0
    7444:	a0 e0       	ldi	r26, 0x00	; 0
    7446:	b0 e0       	ldi	r27, 0x00	; 0
    7448:	bc 01       	movw	r22, r24
    744a:	cd 01       	movw	r24, r26
    744c:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    7450:	dc 01       	movw	r26, r24
    7452:	cb 01       	movw	r24, r22
    7454:	fe 01       	movw	r30, r28
    7456:	eb 55       	subi	r30, 0x5B	; 91
    7458:	ff 4f       	sbci	r31, 0xFF	; 255
    745a:	80 83       	st	Z, r24
    745c:	91 83       	std	Z+1, r25	; 0x01
    745e:	a2 83       	std	Z+2, r26	; 0x02
    7460:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7462:	8e 01       	movw	r16, r28
    7464:	0f 55       	subi	r16, 0x5F	; 95
    7466:	1f 4f       	sbci	r17, 0xFF	; 255
    7468:	fe 01       	movw	r30, r28
    746a:	eb 55       	subi	r30, 0x5B	; 91
    746c:	ff 4f       	sbci	r31, 0xFF	; 255
    746e:	60 81       	ld	r22, Z
    7470:	71 81       	ldd	r23, Z+1	; 0x01
    7472:	82 81       	ldd	r24, Z+2	; 0x02
    7474:	93 81       	ldd	r25, Z+3	; 0x03
    7476:	20 e0       	ldi	r18, 0x00	; 0
    7478:	30 e0       	ldi	r19, 0x00	; 0
    747a:	4a ef       	ldi	r20, 0xFA	; 250
    747c:	54 e4       	ldi	r21, 0x44	; 68
    747e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    7482:	dc 01       	movw	r26, r24
    7484:	cb 01       	movw	r24, r22
    7486:	f8 01       	movw	r30, r16
    7488:	80 83       	st	Z, r24
    748a:	91 83       	std	Z+1, r25	; 0x01
    748c:	a2 83       	std	Z+2, r26	; 0x02
    748e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7490:	fe 01       	movw	r30, r28
    7492:	ef 55       	subi	r30, 0x5F	; 95
    7494:	ff 4f       	sbci	r31, 0xFF	; 255
    7496:	60 81       	ld	r22, Z
    7498:	71 81       	ldd	r23, Z+1	; 0x01
    749a:	82 81       	ldd	r24, Z+2	; 0x02
    749c:	93 81       	ldd	r25, Z+3	; 0x03
    749e:	20 e0       	ldi	r18, 0x00	; 0
    74a0:	30 e0       	ldi	r19, 0x00	; 0
    74a2:	40 e8       	ldi	r20, 0x80	; 128
    74a4:	5f e3       	ldi	r21, 0x3F	; 63
    74a6:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    74aa:	88 23       	and	r24, r24
    74ac:	44 f4       	brge	.+16     	; 0x74be <STEPPER_voidTurnOn+0x15ee>
		__ticks = 1;
    74ae:	fe 01       	movw	r30, r28
    74b0:	e1 56       	subi	r30, 0x61	; 97
    74b2:	ff 4f       	sbci	r31, 0xFF	; 255
    74b4:	81 e0       	ldi	r24, 0x01	; 1
    74b6:	90 e0       	ldi	r25, 0x00	; 0
    74b8:	91 83       	std	Z+1, r25	; 0x01
    74ba:	80 83       	st	Z, r24
    74bc:	64 c0       	rjmp	.+200    	; 0x7586 <STEPPER_voidTurnOn+0x16b6>
	else if (__tmp > 65535)
    74be:	fe 01       	movw	r30, r28
    74c0:	ef 55       	subi	r30, 0x5F	; 95
    74c2:	ff 4f       	sbci	r31, 0xFF	; 255
    74c4:	60 81       	ld	r22, Z
    74c6:	71 81       	ldd	r23, Z+1	; 0x01
    74c8:	82 81       	ldd	r24, Z+2	; 0x02
    74ca:	93 81       	ldd	r25, Z+3	; 0x03
    74cc:	20 e0       	ldi	r18, 0x00	; 0
    74ce:	3f ef       	ldi	r19, 0xFF	; 255
    74d0:	4f e7       	ldi	r20, 0x7F	; 127
    74d2:	57 e4       	ldi	r21, 0x47	; 71
    74d4:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    74d8:	18 16       	cp	r1, r24
    74da:	0c f0       	brlt	.+2      	; 0x74de <STEPPER_voidTurnOn+0x160e>
    74dc:	43 c0       	rjmp	.+134    	; 0x7564 <STEPPER_voidTurnOn+0x1694>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    74de:	fe 01       	movw	r30, r28
    74e0:	eb 55       	subi	r30, 0x5B	; 91
    74e2:	ff 4f       	sbci	r31, 0xFF	; 255
    74e4:	60 81       	ld	r22, Z
    74e6:	71 81       	ldd	r23, Z+1	; 0x01
    74e8:	82 81       	ldd	r24, Z+2	; 0x02
    74ea:	93 81       	ldd	r25, Z+3	; 0x03
    74ec:	20 e0       	ldi	r18, 0x00	; 0
    74ee:	30 e0       	ldi	r19, 0x00	; 0
    74f0:	40 e2       	ldi	r20, 0x20	; 32
    74f2:	51 e4       	ldi	r21, 0x41	; 65
    74f4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    74f8:	dc 01       	movw	r26, r24
    74fa:	cb 01       	movw	r24, r22
    74fc:	8e 01       	movw	r16, r28
    74fe:	01 56       	subi	r16, 0x61	; 97
    7500:	1f 4f       	sbci	r17, 0xFF	; 255
    7502:	bc 01       	movw	r22, r24
    7504:	cd 01       	movw	r24, r26
    7506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    750a:	dc 01       	movw	r26, r24
    750c:	cb 01       	movw	r24, r22
    750e:	f8 01       	movw	r30, r16
    7510:	91 83       	std	Z+1, r25	; 0x01
    7512:	80 83       	st	Z, r24
    7514:	1f c0       	rjmp	.+62     	; 0x7554 <STEPPER_voidTurnOn+0x1684>
    7516:	fe 01       	movw	r30, r28
    7518:	e3 56       	subi	r30, 0x63	; 99
    751a:	ff 4f       	sbci	r31, 0xFF	; 255
    751c:	88 ec       	ldi	r24, 0xC8	; 200
    751e:	90 e0       	ldi	r25, 0x00	; 0
    7520:	91 83       	std	Z+1, r25	; 0x01
    7522:	80 83       	st	Z, r24
    7524:	fe 01       	movw	r30, r28
    7526:	e3 56       	subi	r30, 0x63	; 99
    7528:	ff 4f       	sbci	r31, 0xFF	; 255
    752a:	80 81       	ld	r24, Z
    752c:	91 81       	ldd	r25, Z+1	; 0x01
    752e:	01 97       	sbiw	r24, 0x01	; 1
    7530:	f1 f7       	brne	.-4      	; 0x752e <STEPPER_voidTurnOn+0x165e>
    7532:	fe 01       	movw	r30, r28
    7534:	e3 56       	subi	r30, 0x63	; 99
    7536:	ff 4f       	sbci	r31, 0xFF	; 255
    7538:	91 83       	std	Z+1, r25	; 0x01
    753a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    753c:	de 01       	movw	r26, r28
    753e:	a1 56       	subi	r26, 0x61	; 97
    7540:	bf 4f       	sbci	r27, 0xFF	; 255
    7542:	fe 01       	movw	r30, r28
    7544:	e1 56       	subi	r30, 0x61	; 97
    7546:	ff 4f       	sbci	r31, 0xFF	; 255
    7548:	80 81       	ld	r24, Z
    754a:	91 81       	ldd	r25, Z+1	; 0x01
    754c:	01 97       	sbiw	r24, 0x01	; 1
    754e:	11 96       	adiw	r26, 0x01	; 1
    7550:	9c 93       	st	X, r25
    7552:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7554:	fe 01       	movw	r30, r28
    7556:	e1 56       	subi	r30, 0x61	; 97
    7558:	ff 4f       	sbci	r31, 0xFF	; 255
    755a:	80 81       	ld	r24, Z
    755c:	91 81       	ldd	r25, Z+1	; 0x01
    755e:	00 97       	sbiw	r24, 0x00	; 0
    7560:	d1 f6       	brne	.-76     	; 0x7516 <STEPPER_voidTurnOn+0x1646>
    7562:	27 c0       	rjmp	.+78     	; 0x75b2 <STEPPER_voidTurnOn+0x16e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7564:	8e 01       	movw	r16, r28
    7566:	01 56       	subi	r16, 0x61	; 97
    7568:	1f 4f       	sbci	r17, 0xFF	; 255
    756a:	fe 01       	movw	r30, r28
    756c:	ef 55       	subi	r30, 0x5F	; 95
    756e:	ff 4f       	sbci	r31, 0xFF	; 255
    7570:	60 81       	ld	r22, Z
    7572:	71 81       	ldd	r23, Z+1	; 0x01
    7574:	82 81       	ldd	r24, Z+2	; 0x02
    7576:	93 81       	ldd	r25, Z+3	; 0x03
    7578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    757c:	dc 01       	movw	r26, r24
    757e:	cb 01       	movw	r24, r22
    7580:	f8 01       	movw	r30, r16
    7582:	91 83       	std	Z+1, r25	; 0x01
    7584:	80 83       	st	Z, r24
    7586:	de 01       	movw	r26, r28
    7588:	a5 56       	subi	r26, 0x65	; 101
    758a:	bf 4f       	sbci	r27, 0xFF	; 255
    758c:	fe 01       	movw	r30, r28
    758e:	e1 56       	subi	r30, 0x61	; 97
    7590:	ff 4f       	sbci	r31, 0xFF	; 255
    7592:	80 81       	ld	r24, Z
    7594:	91 81       	ldd	r25, Z+1	; 0x01
    7596:	8d 93       	st	X+, r24
    7598:	9c 93       	st	X, r25
    759a:	fe 01       	movw	r30, r28
    759c:	e5 56       	subi	r30, 0x65	; 101
    759e:	ff 4f       	sbci	r31, 0xFF	; 255
    75a0:	80 81       	ld	r24, Z
    75a2:	91 81       	ldd	r25, Z+1	; 0x01
    75a4:	01 97       	sbiw	r24, 0x01	; 1
    75a6:	f1 f7       	brne	.-4      	; 0x75a4 <STEPPER_voidTurnOn+0x16d4>
    75a8:	fe 01       	movw	r30, r28
    75aa:	e5 56       	subi	r30, 0x65	; 101
    75ac:	ff 4f       	sbci	r31, 0xFF	; 255
    75ae:	91 83       	std	Z+1, r25	; 0x01
    75b0:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_LOW  );
    75b2:	80 e0       	ldi	r24, 0x00	; 0
    75b4:	62 e0       	ldi	r22, 0x02	; 2
    75b6:	40 e0       	ldi	r20, 0x00	; 0
    75b8:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_LOW  );
    75bc:	80 e0       	ldi	r24, 0x00	; 0
    75be:	63 e0       	ldi	r22, 0x03	; 3
    75c0:	40 e0       	ldi	r20, 0x00	; 0
    75c2:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_HIGH );
    75c6:	80 e0       	ldi	r24, 0x00	; 0
    75c8:	64 e0       	ldi	r22, 0x04	; 4
    75ca:	41 e0       	ldi	r20, 0x01	; 1
    75cc:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_HIGH );
    75d0:	80 e0       	ldi	r24, 0x00	; 0
    75d2:	65 e0       	ldi	r22, 0x05	; 5
    75d4:	41 e0       	ldi	r20, 0x01	; 1
    75d6:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    75da:	fe 01       	movw	r30, r28
    75dc:	e9 5a       	subi	r30, 0xA9	; 169
    75de:	fe 4f       	sbci	r31, 0xFE	; 254
    75e0:	80 81       	ld	r24, Z
    75e2:	88 2f       	mov	r24, r24
    75e4:	90 e0       	ldi	r25, 0x00	; 0
    75e6:	a0 e0       	ldi	r26, 0x00	; 0
    75e8:	b0 e0       	ldi	r27, 0x00	; 0
    75ea:	bc 01       	movw	r22, r24
    75ec:	cd 01       	movw	r24, r26
    75ee:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    75f2:	dc 01       	movw	r26, r24
    75f4:	cb 01       	movw	r24, r22
    75f6:	fe 01       	movw	r30, r28
    75f8:	e9 56       	subi	r30, 0x69	; 105
    75fa:	ff 4f       	sbci	r31, 0xFF	; 255
    75fc:	80 83       	st	Z, r24
    75fe:	91 83       	std	Z+1, r25	; 0x01
    7600:	a2 83       	std	Z+2, r26	; 0x02
    7602:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7604:	8e 01       	movw	r16, r28
    7606:	0d 56       	subi	r16, 0x6D	; 109
    7608:	1f 4f       	sbci	r17, 0xFF	; 255
    760a:	fe 01       	movw	r30, r28
    760c:	e9 56       	subi	r30, 0x69	; 105
    760e:	ff 4f       	sbci	r31, 0xFF	; 255
    7610:	60 81       	ld	r22, Z
    7612:	71 81       	ldd	r23, Z+1	; 0x01
    7614:	82 81       	ldd	r24, Z+2	; 0x02
    7616:	93 81       	ldd	r25, Z+3	; 0x03
    7618:	20 e0       	ldi	r18, 0x00	; 0
    761a:	30 e0       	ldi	r19, 0x00	; 0
    761c:	4a ef       	ldi	r20, 0xFA	; 250
    761e:	54 e4       	ldi	r21, 0x44	; 68
    7620:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    7624:	dc 01       	movw	r26, r24
    7626:	cb 01       	movw	r24, r22
    7628:	f8 01       	movw	r30, r16
    762a:	80 83       	st	Z, r24
    762c:	91 83       	std	Z+1, r25	; 0x01
    762e:	a2 83       	std	Z+2, r26	; 0x02
    7630:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7632:	fe 01       	movw	r30, r28
    7634:	ed 56       	subi	r30, 0x6D	; 109
    7636:	ff 4f       	sbci	r31, 0xFF	; 255
    7638:	60 81       	ld	r22, Z
    763a:	71 81       	ldd	r23, Z+1	; 0x01
    763c:	82 81       	ldd	r24, Z+2	; 0x02
    763e:	93 81       	ldd	r25, Z+3	; 0x03
    7640:	20 e0       	ldi	r18, 0x00	; 0
    7642:	30 e0       	ldi	r19, 0x00	; 0
    7644:	40 e8       	ldi	r20, 0x80	; 128
    7646:	5f e3       	ldi	r21, 0x3F	; 63
    7648:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    764c:	88 23       	and	r24, r24
    764e:	44 f4       	brge	.+16     	; 0x7660 <STEPPER_voidTurnOn+0x1790>
		__ticks = 1;
    7650:	fe 01       	movw	r30, r28
    7652:	ef 56       	subi	r30, 0x6F	; 111
    7654:	ff 4f       	sbci	r31, 0xFF	; 255
    7656:	81 e0       	ldi	r24, 0x01	; 1
    7658:	90 e0       	ldi	r25, 0x00	; 0
    765a:	91 83       	std	Z+1, r25	; 0x01
    765c:	80 83       	st	Z, r24
    765e:	64 c0       	rjmp	.+200    	; 0x7728 <STEPPER_voidTurnOn+0x1858>
	else if (__tmp > 65535)
    7660:	fe 01       	movw	r30, r28
    7662:	ed 56       	subi	r30, 0x6D	; 109
    7664:	ff 4f       	sbci	r31, 0xFF	; 255
    7666:	60 81       	ld	r22, Z
    7668:	71 81       	ldd	r23, Z+1	; 0x01
    766a:	82 81       	ldd	r24, Z+2	; 0x02
    766c:	93 81       	ldd	r25, Z+3	; 0x03
    766e:	20 e0       	ldi	r18, 0x00	; 0
    7670:	3f ef       	ldi	r19, 0xFF	; 255
    7672:	4f e7       	ldi	r20, 0x7F	; 127
    7674:	57 e4       	ldi	r21, 0x47	; 71
    7676:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    767a:	18 16       	cp	r1, r24
    767c:	0c f0       	brlt	.+2      	; 0x7680 <STEPPER_voidTurnOn+0x17b0>
    767e:	43 c0       	rjmp	.+134    	; 0x7706 <STEPPER_voidTurnOn+0x1836>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7680:	fe 01       	movw	r30, r28
    7682:	e9 56       	subi	r30, 0x69	; 105
    7684:	ff 4f       	sbci	r31, 0xFF	; 255
    7686:	60 81       	ld	r22, Z
    7688:	71 81       	ldd	r23, Z+1	; 0x01
    768a:	82 81       	ldd	r24, Z+2	; 0x02
    768c:	93 81       	ldd	r25, Z+3	; 0x03
    768e:	20 e0       	ldi	r18, 0x00	; 0
    7690:	30 e0       	ldi	r19, 0x00	; 0
    7692:	40 e2       	ldi	r20, 0x20	; 32
    7694:	51 e4       	ldi	r21, 0x41	; 65
    7696:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    769a:	dc 01       	movw	r26, r24
    769c:	cb 01       	movw	r24, r22
    769e:	8e 01       	movw	r16, r28
    76a0:	0f 56       	subi	r16, 0x6F	; 111
    76a2:	1f 4f       	sbci	r17, 0xFF	; 255
    76a4:	bc 01       	movw	r22, r24
    76a6:	cd 01       	movw	r24, r26
    76a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    76ac:	dc 01       	movw	r26, r24
    76ae:	cb 01       	movw	r24, r22
    76b0:	f8 01       	movw	r30, r16
    76b2:	91 83       	std	Z+1, r25	; 0x01
    76b4:	80 83       	st	Z, r24
    76b6:	1f c0       	rjmp	.+62     	; 0x76f6 <STEPPER_voidTurnOn+0x1826>
    76b8:	fe 01       	movw	r30, r28
    76ba:	e1 57       	subi	r30, 0x71	; 113
    76bc:	ff 4f       	sbci	r31, 0xFF	; 255
    76be:	88 ec       	ldi	r24, 0xC8	; 200
    76c0:	90 e0       	ldi	r25, 0x00	; 0
    76c2:	91 83       	std	Z+1, r25	; 0x01
    76c4:	80 83       	st	Z, r24
    76c6:	fe 01       	movw	r30, r28
    76c8:	e1 57       	subi	r30, 0x71	; 113
    76ca:	ff 4f       	sbci	r31, 0xFF	; 255
    76cc:	80 81       	ld	r24, Z
    76ce:	91 81       	ldd	r25, Z+1	; 0x01
    76d0:	01 97       	sbiw	r24, 0x01	; 1
    76d2:	f1 f7       	brne	.-4      	; 0x76d0 <STEPPER_voidTurnOn+0x1800>
    76d4:	fe 01       	movw	r30, r28
    76d6:	e1 57       	subi	r30, 0x71	; 113
    76d8:	ff 4f       	sbci	r31, 0xFF	; 255
    76da:	91 83       	std	Z+1, r25	; 0x01
    76dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76de:	de 01       	movw	r26, r28
    76e0:	af 56       	subi	r26, 0x6F	; 111
    76e2:	bf 4f       	sbci	r27, 0xFF	; 255
    76e4:	fe 01       	movw	r30, r28
    76e6:	ef 56       	subi	r30, 0x6F	; 111
    76e8:	ff 4f       	sbci	r31, 0xFF	; 255
    76ea:	80 81       	ld	r24, Z
    76ec:	91 81       	ldd	r25, Z+1	; 0x01
    76ee:	01 97       	sbiw	r24, 0x01	; 1
    76f0:	11 96       	adiw	r26, 0x01	; 1
    76f2:	9c 93       	st	X, r25
    76f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76f6:	fe 01       	movw	r30, r28
    76f8:	ef 56       	subi	r30, 0x6F	; 111
    76fa:	ff 4f       	sbci	r31, 0xFF	; 255
    76fc:	80 81       	ld	r24, Z
    76fe:	91 81       	ldd	r25, Z+1	; 0x01
    7700:	00 97       	sbiw	r24, 0x00	; 0
    7702:	d1 f6       	brne	.-76     	; 0x76b8 <STEPPER_voidTurnOn+0x17e8>
    7704:	27 c0       	rjmp	.+78     	; 0x7754 <STEPPER_voidTurnOn+0x1884>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7706:	8e 01       	movw	r16, r28
    7708:	0f 56       	subi	r16, 0x6F	; 111
    770a:	1f 4f       	sbci	r17, 0xFF	; 255
    770c:	fe 01       	movw	r30, r28
    770e:	ed 56       	subi	r30, 0x6D	; 109
    7710:	ff 4f       	sbci	r31, 0xFF	; 255
    7712:	60 81       	ld	r22, Z
    7714:	71 81       	ldd	r23, Z+1	; 0x01
    7716:	82 81       	ldd	r24, Z+2	; 0x02
    7718:	93 81       	ldd	r25, Z+3	; 0x03
    771a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    771e:	dc 01       	movw	r26, r24
    7720:	cb 01       	movw	r24, r22
    7722:	f8 01       	movw	r30, r16
    7724:	91 83       	std	Z+1, r25	; 0x01
    7726:	80 83       	st	Z, r24
    7728:	de 01       	movw	r26, r28
    772a:	a3 57       	subi	r26, 0x73	; 115
    772c:	bf 4f       	sbci	r27, 0xFF	; 255
    772e:	fe 01       	movw	r30, r28
    7730:	ef 56       	subi	r30, 0x6F	; 111
    7732:	ff 4f       	sbci	r31, 0xFF	; 255
    7734:	80 81       	ld	r24, Z
    7736:	91 81       	ldd	r25, Z+1	; 0x01
    7738:	8d 93       	st	X+, r24
    773a:	9c 93       	st	X, r25
    773c:	fe 01       	movw	r30, r28
    773e:	e3 57       	subi	r30, 0x73	; 115
    7740:	ff 4f       	sbci	r31, 0xFF	; 255
    7742:	80 81       	ld	r24, Z
    7744:	91 81       	ldd	r25, Z+1	; 0x01
    7746:	01 97       	sbiw	r24, 0x01	; 1
    7748:	f1 f7       	brne	.-4      	; 0x7746 <STEPPER_voidTurnOn+0x1876>
    774a:	fe 01       	movw	r30, r28
    774c:	e3 57       	subi	r30, 0x73	; 115
    774e:	ff 4f       	sbci	r31, 0xFF	; 255
    7750:	91 83       	std	Z+1, r25	; 0x01
    7752:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_LOW  );
    7754:	80 e0       	ldi	r24, 0x00	; 0
    7756:	62 e0       	ldi	r22, 0x02	; 2
    7758:	40 e0       	ldi	r20, 0x00	; 0
    775a:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_LOW  );
    775e:	80 e0       	ldi	r24, 0x00	; 0
    7760:	63 e0       	ldi	r22, 0x03	; 3
    7762:	40 e0       	ldi	r20, 0x00	; 0
    7764:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_LOW  );
    7768:	80 e0       	ldi	r24, 0x00	; 0
    776a:	64 e0       	ldi	r22, 0x04	; 4
    776c:	40 e0       	ldi	r20, 0x00	; 0
    776e:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_HIGH );
    7772:	80 e0       	ldi	r24, 0x00	; 0
    7774:	65 e0       	ldi	r22, 0x05	; 5
    7776:	41 e0       	ldi	r20, 0x01	; 1
    7778:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    777c:	fe 01       	movw	r30, r28
    777e:	e9 5a       	subi	r30, 0xA9	; 169
    7780:	fe 4f       	sbci	r31, 0xFE	; 254
    7782:	80 81       	ld	r24, Z
    7784:	88 2f       	mov	r24, r24
    7786:	90 e0       	ldi	r25, 0x00	; 0
    7788:	a0 e0       	ldi	r26, 0x00	; 0
    778a:	b0 e0       	ldi	r27, 0x00	; 0
    778c:	bc 01       	movw	r22, r24
    778e:	cd 01       	movw	r24, r26
    7790:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    7794:	dc 01       	movw	r26, r24
    7796:	cb 01       	movw	r24, r22
    7798:	fe 01       	movw	r30, r28
    779a:	e7 57       	subi	r30, 0x77	; 119
    779c:	ff 4f       	sbci	r31, 0xFF	; 255
    779e:	80 83       	st	Z, r24
    77a0:	91 83       	std	Z+1, r25	; 0x01
    77a2:	a2 83       	std	Z+2, r26	; 0x02
    77a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    77a6:	8e 01       	movw	r16, r28
    77a8:	0b 57       	subi	r16, 0x7B	; 123
    77aa:	1f 4f       	sbci	r17, 0xFF	; 255
    77ac:	fe 01       	movw	r30, r28
    77ae:	e7 57       	subi	r30, 0x77	; 119
    77b0:	ff 4f       	sbci	r31, 0xFF	; 255
    77b2:	60 81       	ld	r22, Z
    77b4:	71 81       	ldd	r23, Z+1	; 0x01
    77b6:	82 81       	ldd	r24, Z+2	; 0x02
    77b8:	93 81       	ldd	r25, Z+3	; 0x03
    77ba:	20 e0       	ldi	r18, 0x00	; 0
    77bc:	30 e0       	ldi	r19, 0x00	; 0
    77be:	4a ef       	ldi	r20, 0xFA	; 250
    77c0:	54 e4       	ldi	r21, 0x44	; 68
    77c2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    77c6:	dc 01       	movw	r26, r24
    77c8:	cb 01       	movw	r24, r22
    77ca:	f8 01       	movw	r30, r16
    77cc:	80 83       	st	Z, r24
    77ce:	91 83       	std	Z+1, r25	; 0x01
    77d0:	a2 83       	std	Z+2, r26	; 0x02
    77d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    77d4:	fe 01       	movw	r30, r28
    77d6:	eb 57       	subi	r30, 0x7B	; 123
    77d8:	ff 4f       	sbci	r31, 0xFF	; 255
    77da:	60 81       	ld	r22, Z
    77dc:	71 81       	ldd	r23, Z+1	; 0x01
    77de:	82 81       	ldd	r24, Z+2	; 0x02
    77e0:	93 81       	ldd	r25, Z+3	; 0x03
    77e2:	20 e0       	ldi	r18, 0x00	; 0
    77e4:	30 e0       	ldi	r19, 0x00	; 0
    77e6:	40 e8       	ldi	r20, 0x80	; 128
    77e8:	5f e3       	ldi	r21, 0x3F	; 63
    77ea:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    77ee:	88 23       	and	r24, r24
    77f0:	44 f4       	brge	.+16     	; 0x7802 <STEPPER_voidTurnOn+0x1932>
		__ticks = 1;
    77f2:	fe 01       	movw	r30, r28
    77f4:	ed 57       	subi	r30, 0x7D	; 125
    77f6:	ff 4f       	sbci	r31, 0xFF	; 255
    77f8:	81 e0       	ldi	r24, 0x01	; 1
    77fa:	90 e0       	ldi	r25, 0x00	; 0
    77fc:	91 83       	std	Z+1, r25	; 0x01
    77fe:	80 83       	st	Z, r24
    7800:	64 c0       	rjmp	.+200    	; 0x78ca <STEPPER_voidTurnOn+0x19fa>
	else if (__tmp > 65535)
    7802:	fe 01       	movw	r30, r28
    7804:	eb 57       	subi	r30, 0x7B	; 123
    7806:	ff 4f       	sbci	r31, 0xFF	; 255
    7808:	60 81       	ld	r22, Z
    780a:	71 81       	ldd	r23, Z+1	; 0x01
    780c:	82 81       	ldd	r24, Z+2	; 0x02
    780e:	93 81       	ldd	r25, Z+3	; 0x03
    7810:	20 e0       	ldi	r18, 0x00	; 0
    7812:	3f ef       	ldi	r19, 0xFF	; 255
    7814:	4f e7       	ldi	r20, 0x7F	; 127
    7816:	57 e4       	ldi	r21, 0x47	; 71
    7818:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    781c:	18 16       	cp	r1, r24
    781e:	0c f0       	brlt	.+2      	; 0x7822 <STEPPER_voidTurnOn+0x1952>
    7820:	43 c0       	rjmp	.+134    	; 0x78a8 <STEPPER_voidTurnOn+0x19d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7822:	fe 01       	movw	r30, r28
    7824:	e7 57       	subi	r30, 0x77	; 119
    7826:	ff 4f       	sbci	r31, 0xFF	; 255
    7828:	60 81       	ld	r22, Z
    782a:	71 81       	ldd	r23, Z+1	; 0x01
    782c:	82 81       	ldd	r24, Z+2	; 0x02
    782e:	93 81       	ldd	r25, Z+3	; 0x03
    7830:	20 e0       	ldi	r18, 0x00	; 0
    7832:	30 e0       	ldi	r19, 0x00	; 0
    7834:	40 e2       	ldi	r20, 0x20	; 32
    7836:	51 e4       	ldi	r21, 0x41	; 65
    7838:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    783c:	dc 01       	movw	r26, r24
    783e:	cb 01       	movw	r24, r22
    7840:	8e 01       	movw	r16, r28
    7842:	0d 57       	subi	r16, 0x7D	; 125
    7844:	1f 4f       	sbci	r17, 0xFF	; 255
    7846:	bc 01       	movw	r22, r24
    7848:	cd 01       	movw	r24, r26
    784a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    784e:	dc 01       	movw	r26, r24
    7850:	cb 01       	movw	r24, r22
    7852:	f8 01       	movw	r30, r16
    7854:	91 83       	std	Z+1, r25	; 0x01
    7856:	80 83       	st	Z, r24
    7858:	1f c0       	rjmp	.+62     	; 0x7898 <STEPPER_voidTurnOn+0x19c8>
    785a:	fe 01       	movw	r30, r28
    785c:	ef 57       	subi	r30, 0x7F	; 127
    785e:	ff 4f       	sbci	r31, 0xFF	; 255
    7860:	88 ec       	ldi	r24, 0xC8	; 200
    7862:	90 e0       	ldi	r25, 0x00	; 0
    7864:	91 83       	std	Z+1, r25	; 0x01
    7866:	80 83       	st	Z, r24
    7868:	fe 01       	movw	r30, r28
    786a:	ef 57       	subi	r30, 0x7F	; 127
    786c:	ff 4f       	sbci	r31, 0xFF	; 255
    786e:	80 81       	ld	r24, Z
    7870:	91 81       	ldd	r25, Z+1	; 0x01
    7872:	01 97       	sbiw	r24, 0x01	; 1
    7874:	f1 f7       	brne	.-4      	; 0x7872 <STEPPER_voidTurnOn+0x19a2>
    7876:	fe 01       	movw	r30, r28
    7878:	ef 57       	subi	r30, 0x7F	; 127
    787a:	ff 4f       	sbci	r31, 0xFF	; 255
    787c:	91 83       	std	Z+1, r25	; 0x01
    787e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7880:	de 01       	movw	r26, r28
    7882:	ad 57       	subi	r26, 0x7D	; 125
    7884:	bf 4f       	sbci	r27, 0xFF	; 255
    7886:	fe 01       	movw	r30, r28
    7888:	ed 57       	subi	r30, 0x7D	; 125
    788a:	ff 4f       	sbci	r31, 0xFF	; 255
    788c:	80 81       	ld	r24, Z
    788e:	91 81       	ldd	r25, Z+1	; 0x01
    7890:	01 97       	sbiw	r24, 0x01	; 1
    7892:	11 96       	adiw	r26, 0x01	; 1
    7894:	9c 93       	st	X, r25
    7896:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7898:	fe 01       	movw	r30, r28
    789a:	ed 57       	subi	r30, 0x7D	; 125
    789c:	ff 4f       	sbci	r31, 0xFF	; 255
    789e:	80 81       	ld	r24, Z
    78a0:	91 81       	ldd	r25, Z+1	; 0x01
    78a2:	00 97       	sbiw	r24, 0x00	; 0
    78a4:	d1 f6       	brne	.-76     	; 0x785a <STEPPER_voidTurnOn+0x198a>
    78a6:	27 c0       	rjmp	.+78     	; 0x78f6 <STEPPER_voidTurnOn+0x1a26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    78a8:	8e 01       	movw	r16, r28
    78aa:	0d 57       	subi	r16, 0x7D	; 125
    78ac:	1f 4f       	sbci	r17, 0xFF	; 255
    78ae:	fe 01       	movw	r30, r28
    78b0:	eb 57       	subi	r30, 0x7B	; 123
    78b2:	ff 4f       	sbci	r31, 0xFF	; 255
    78b4:	60 81       	ld	r22, Z
    78b6:	71 81       	ldd	r23, Z+1	; 0x01
    78b8:	82 81       	ldd	r24, Z+2	; 0x02
    78ba:	93 81       	ldd	r25, Z+3	; 0x03
    78bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    78c0:	dc 01       	movw	r26, r24
    78c2:	cb 01       	movw	r24, r22
    78c4:	f8 01       	movw	r30, r16
    78c6:	91 83       	std	Z+1, r25	; 0x01
    78c8:	80 83       	st	Z, r24
    78ca:	de 01       	movw	r26, r28
    78cc:	a1 58       	subi	r26, 0x81	; 129
    78ce:	bf 4f       	sbci	r27, 0xFF	; 255
    78d0:	fe 01       	movw	r30, r28
    78d2:	ed 57       	subi	r30, 0x7D	; 125
    78d4:	ff 4f       	sbci	r31, 0xFF	; 255
    78d6:	80 81       	ld	r24, Z
    78d8:	91 81       	ldd	r25, Z+1	; 0x01
    78da:	8d 93       	st	X+, r24
    78dc:	9c 93       	st	X, r25
    78de:	fe 01       	movw	r30, r28
    78e0:	e1 58       	subi	r30, 0x81	; 129
    78e2:	ff 4f       	sbci	r31, 0xFF	; 255
    78e4:	80 81       	ld	r24, Z
    78e6:	91 81       	ldd	r25, Z+1	; 0x01
    78e8:	01 97       	sbiw	r24, 0x01	; 1
    78ea:	f1 f7       	brne	.-4      	; 0x78e8 <STEPPER_voidTurnOn+0x1a18>
    78ec:	fe 01       	movw	r30, r28
    78ee:	e1 58       	subi	r30, 0x81	; 129
    78f0:	ff 4f       	sbci	r31, 0xFF	; 255
    78f2:	91 83       	std	Z+1, r25	; 0x01
    78f4:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_HIGH );
    78f6:	80 e0       	ldi	r24, 0x00	; 0
    78f8:	62 e0       	ldi	r22, 0x02	; 2
    78fa:	41 e0       	ldi	r20, 0x01	; 1
    78fc:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_LOW  );
    7900:	80 e0       	ldi	r24, 0x00	; 0
    7902:	63 e0       	ldi	r22, 0x03	; 3
    7904:	40 e0       	ldi	r20, 0x00	; 0
    7906:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_LOW  );
    790a:	80 e0       	ldi	r24, 0x00	; 0
    790c:	64 e0       	ldi	r22, 0x04	; 4
    790e:	40 e0       	ldi	r20, 0x00	; 0
    7910:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_HIGH );
    7914:	80 e0       	ldi	r24, 0x00	; 0
    7916:	65 e0       	ldi	r22, 0x05	; 5
    7918:	41 e0       	ldi	r20, 0x01	; 1
    791a:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    791e:	fe 01       	movw	r30, r28
    7920:	e9 5a       	subi	r30, 0xA9	; 169
    7922:	fe 4f       	sbci	r31, 0xFE	; 254
    7924:	80 81       	ld	r24, Z
    7926:	88 2f       	mov	r24, r24
    7928:	90 e0       	ldi	r25, 0x00	; 0
    792a:	a0 e0       	ldi	r26, 0x00	; 0
    792c:	b0 e0       	ldi	r27, 0x00	; 0
    792e:	bc 01       	movw	r22, r24
    7930:	cd 01       	movw	r24, r26
    7932:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    7936:	dc 01       	movw	r26, r24
    7938:	cb 01       	movw	r24, r22
    793a:	fe 01       	movw	r30, r28
    793c:	e5 58       	subi	r30, 0x85	; 133
    793e:	ff 4f       	sbci	r31, 0xFF	; 255
    7940:	80 83       	st	Z, r24
    7942:	91 83       	std	Z+1, r25	; 0x01
    7944:	a2 83       	std	Z+2, r26	; 0x02
    7946:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7948:	8e 01       	movw	r16, r28
    794a:	09 58       	subi	r16, 0x89	; 137
    794c:	1f 4f       	sbci	r17, 0xFF	; 255
    794e:	fe 01       	movw	r30, r28
    7950:	e5 58       	subi	r30, 0x85	; 133
    7952:	ff 4f       	sbci	r31, 0xFF	; 255
    7954:	60 81       	ld	r22, Z
    7956:	71 81       	ldd	r23, Z+1	; 0x01
    7958:	82 81       	ldd	r24, Z+2	; 0x02
    795a:	93 81       	ldd	r25, Z+3	; 0x03
    795c:	20 e0       	ldi	r18, 0x00	; 0
    795e:	30 e0       	ldi	r19, 0x00	; 0
    7960:	4a ef       	ldi	r20, 0xFA	; 250
    7962:	54 e4       	ldi	r21, 0x44	; 68
    7964:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    7968:	dc 01       	movw	r26, r24
    796a:	cb 01       	movw	r24, r22
    796c:	f8 01       	movw	r30, r16
    796e:	80 83       	st	Z, r24
    7970:	91 83       	std	Z+1, r25	; 0x01
    7972:	a2 83       	std	Z+2, r26	; 0x02
    7974:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7976:	fe 01       	movw	r30, r28
    7978:	e9 58       	subi	r30, 0x89	; 137
    797a:	ff 4f       	sbci	r31, 0xFF	; 255
    797c:	60 81       	ld	r22, Z
    797e:	71 81       	ldd	r23, Z+1	; 0x01
    7980:	82 81       	ldd	r24, Z+2	; 0x02
    7982:	93 81       	ldd	r25, Z+3	; 0x03
    7984:	20 e0       	ldi	r18, 0x00	; 0
    7986:	30 e0       	ldi	r19, 0x00	; 0
    7988:	40 e8       	ldi	r20, 0x80	; 128
    798a:	5f e3       	ldi	r21, 0x3F	; 63
    798c:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    7990:	88 23       	and	r24, r24
    7992:	44 f4       	brge	.+16     	; 0x79a4 <STEPPER_voidTurnOn+0x1ad4>
		__ticks = 1;
    7994:	fe 01       	movw	r30, r28
    7996:	eb 58       	subi	r30, 0x8B	; 139
    7998:	ff 4f       	sbci	r31, 0xFF	; 255
    799a:	81 e0       	ldi	r24, 0x01	; 1
    799c:	90 e0       	ldi	r25, 0x00	; 0
    799e:	91 83       	std	Z+1, r25	; 0x01
    79a0:	80 83       	st	Z, r24
    79a2:	64 c0       	rjmp	.+200    	; 0x7a6c <STEPPER_voidTurnOn+0x1b9c>
	else if (__tmp > 65535)
    79a4:	fe 01       	movw	r30, r28
    79a6:	e9 58       	subi	r30, 0x89	; 137
    79a8:	ff 4f       	sbci	r31, 0xFF	; 255
    79aa:	60 81       	ld	r22, Z
    79ac:	71 81       	ldd	r23, Z+1	; 0x01
    79ae:	82 81       	ldd	r24, Z+2	; 0x02
    79b0:	93 81       	ldd	r25, Z+3	; 0x03
    79b2:	20 e0       	ldi	r18, 0x00	; 0
    79b4:	3f ef       	ldi	r19, 0xFF	; 255
    79b6:	4f e7       	ldi	r20, 0x7F	; 127
    79b8:	57 e4       	ldi	r21, 0x47	; 71
    79ba:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    79be:	18 16       	cp	r1, r24
    79c0:	0c f0       	brlt	.+2      	; 0x79c4 <STEPPER_voidTurnOn+0x1af4>
    79c2:	43 c0       	rjmp	.+134    	; 0x7a4a <STEPPER_voidTurnOn+0x1b7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    79c4:	fe 01       	movw	r30, r28
    79c6:	e5 58       	subi	r30, 0x85	; 133
    79c8:	ff 4f       	sbci	r31, 0xFF	; 255
    79ca:	60 81       	ld	r22, Z
    79cc:	71 81       	ldd	r23, Z+1	; 0x01
    79ce:	82 81       	ldd	r24, Z+2	; 0x02
    79d0:	93 81       	ldd	r25, Z+3	; 0x03
    79d2:	20 e0       	ldi	r18, 0x00	; 0
    79d4:	30 e0       	ldi	r19, 0x00	; 0
    79d6:	40 e2       	ldi	r20, 0x20	; 32
    79d8:	51 e4       	ldi	r21, 0x41	; 65
    79da:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    79de:	dc 01       	movw	r26, r24
    79e0:	cb 01       	movw	r24, r22
    79e2:	8e 01       	movw	r16, r28
    79e4:	0b 58       	subi	r16, 0x8B	; 139
    79e6:	1f 4f       	sbci	r17, 0xFF	; 255
    79e8:	bc 01       	movw	r22, r24
    79ea:	cd 01       	movw	r24, r26
    79ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    79f0:	dc 01       	movw	r26, r24
    79f2:	cb 01       	movw	r24, r22
    79f4:	f8 01       	movw	r30, r16
    79f6:	91 83       	std	Z+1, r25	; 0x01
    79f8:	80 83       	st	Z, r24
    79fa:	1f c0       	rjmp	.+62     	; 0x7a3a <STEPPER_voidTurnOn+0x1b6a>
    79fc:	fe 01       	movw	r30, r28
    79fe:	ed 58       	subi	r30, 0x8D	; 141
    7a00:	ff 4f       	sbci	r31, 0xFF	; 255
    7a02:	88 ec       	ldi	r24, 0xC8	; 200
    7a04:	90 e0       	ldi	r25, 0x00	; 0
    7a06:	91 83       	std	Z+1, r25	; 0x01
    7a08:	80 83       	st	Z, r24
    7a0a:	fe 01       	movw	r30, r28
    7a0c:	ed 58       	subi	r30, 0x8D	; 141
    7a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    7a10:	80 81       	ld	r24, Z
    7a12:	91 81       	ldd	r25, Z+1	; 0x01
    7a14:	01 97       	sbiw	r24, 0x01	; 1
    7a16:	f1 f7       	brne	.-4      	; 0x7a14 <STEPPER_voidTurnOn+0x1b44>
    7a18:	fe 01       	movw	r30, r28
    7a1a:	ed 58       	subi	r30, 0x8D	; 141
    7a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    7a1e:	91 83       	std	Z+1, r25	; 0x01
    7a20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7a22:	de 01       	movw	r26, r28
    7a24:	ab 58       	subi	r26, 0x8B	; 139
    7a26:	bf 4f       	sbci	r27, 0xFF	; 255
    7a28:	fe 01       	movw	r30, r28
    7a2a:	eb 58       	subi	r30, 0x8B	; 139
    7a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    7a2e:	80 81       	ld	r24, Z
    7a30:	91 81       	ldd	r25, Z+1	; 0x01
    7a32:	01 97       	sbiw	r24, 0x01	; 1
    7a34:	11 96       	adiw	r26, 0x01	; 1
    7a36:	9c 93       	st	X, r25
    7a38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7a3a:	fe 01       	movw	r30, r28
    7a3c:	eb 58       	subi	r30, 0x8B	; 139
    7a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    7a40:	80 81       	ld	r24, Z
    7a42:	91 81       	ldd	r25, Z+1	; 0x01
    7a44:	00 97       	sbiw	r24, 0x00	; 0
    7a46:	d1 f6       	brne	.-76     	; 0x79fc <STEPPER_voidTurnOn+0x1b2c>
    7a48:	27 c0       	rjmp	.+78     	; 0x7a98 <STEPPER_voidTurnOn+0x1bc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7a4a:	8e 01       	movw	r16, r28
    7a4c:	0b 58       	subi	r16, 0x8B	; 139
    7a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    7a50:	fe 01       	movw	r30, r28
    7a52:	e9 58       	subi	r30, 0x89	; 137
    7a54:	ff 4f       	sbci	r31, 0xFF	; 255
    7a56:	60 81       	ld	r22, Z
    7a58:	71 81       	ldd	r23, Z+1	; 0x01
    7a5a:	82 81       	ldd	r24, Z+2	; 0x02
    7a5c:	93 81       	ldd	r25, Z+3	; 0x03
    7a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7a62:	dc 01       	movw	r26, r24
    7a64:	cb 01       	movw	r24, r22
    7a66:	f8 01       	movw	r30, r16
    7a68:	91 83       	std	Z+1, r25	; 0x01
    7a6a:	80 83       	st	Z, r24
    7a6c:	de 01       	movw	r26, r28
    7a6e:	af 58       	subi	r26, 0x8F	; 143
    7a70:	bf 4f       	sbci	r27, 0xFF	; 255
    7a72:	fe 01       	movw	r30, r28
    7a74:	eb 58       	subi	r30, 0x8B	; 139
    7a76:	ff 4f       	sbci	r31, 0xFF	; 255
    7a78:	80 81       	ld	r24, Z
    7a7a:	91 81       	ldd	r25, Z+1	; 0x01
    7a7c:	8d 93       	st	X+, r24
    7a7e:	9c 93       	st	X, r25
    7a80:	fe 01       	movw	r30, r28
    7a82:	ef 58       	subi	r30, 0x8F	; 143
    7a84:	ff 4f       	sbci	r31, 0xFF	; 255
    7a86:	80 81       	ld	r24, Z
    7a88:	91 81       	ldd	r25, Z+1	; 0x01
    7a8a:	01 97       	sbiw	r24, 0x01	; 1
    7a8c:	f1 f7       	brne	.-4      	; 0x7a8a <STEPPER_voidTurnOn+0x1bba>
    7a8e:	fe 01       	movw	r30, r28
    7a90:	ef 58       	subi	r30, 0x8F	; 143
    7a92:	ff 4f       	sbci	r31, 0xFF	; 255
    7a94:	91 83       	std	Z+1, r25	; 0x01
    7a96:	80 83       	st	Z, r24
	{

		if( Copy_u8Direction == STEPPER_ANTI_CLOCK_WISE )
		{

			for( Local_u32Iterator = 0 ; Local_u32Iterator < ( ( (u32)Copy_u16Degree * 512 ) / 45 ) / 8 ; Local_u32Iterator++  )
    7a98:	9e 01       	movw	r18, r28
    7a9a:	2f 5a       	subi	r18, 0xAF	; 175
    7a9c:	3e 4f       	sbci	r19, 0xFE	; 254
    7a9e:	fe 01       	movw	r30, r28
    7aa0:	ef 5a       	subi	r30, 0xAF	; 175
    7aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    7aa4:	80 81       	ld	r24, Z
    7aa6:	91 81       	ldd	r25, Z+1	; 0x01
    7aa8:	a2 81       	ldd	r26, Z+2	; 0x02
    7aaa:	b3 81       	ldd	r27, Z+3	; 0x03
    7aac:	01 96       	adiw	r24, 0x01	; 1
    7aae:	a1 1d       	adc	r26, r1
    7ab0:	b1 1d       	adc	r27, r1
    7ab2:	f9 01       	movw	r30, r18
    7ab4:	80 83       	st	Z, r24
    7ab6:	91 83       	std	Z+1, r25	; 0x01
    7ab8:	a2 83       	std	Z+2, r26	; 0x02
    7aba:	b3 83       	std	Z+3, r27	; 0x03
    7abc:	fe 01       	movw	r30, r28
    7abe:	e8 5a       	subi	r30, 0xA8	; 168
    7ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    7ac2:	80 81       	ld	r24, Z
    7ac4:	91 81       	ldd	r25, Z+1	; 0x01
    7ac6:	cc 01       	movw	r24, r24
    7ac8:	a0 e0       	ldi	r26, 0x00	; 0
    7aca:	b0 e0       	ldi	r27, 0x00	; 0
    7acc:	07 2e       	mov	r0, r23
    7ace:	79 e0       	ldi	r23, 0x09	; 9
    7ad0:	88 0f       	add	r24, r24
    7ad2:	99 1f       	adc	r25, r25
    7ad4:	aa 1f       	adc	r26, r26
    7ad6:	bb 1f       	adc	r27, r27
    7ad8:	7a 95       	dec	r23
    7ada:	d1 f7       	brne	.-12     	; 0x7ad0 <STEPPER_voidTurnOn+0x1c00>
    7adc:	70 2d       	mov	r23, r0
    7ade:	28 e6       	ldi	r18, 0x68	; 104
    7ae0:	31 e0       	ldi	r19, 0x01	; 1
    7ae2:	40 e0       	ldi	r20, 0x00	; 0
    7ae4:	50 e0       	ldi	r21, 0x00	; 0
    7ae6:	bc 01       	movw	r22, r24
    7ae8:	cd 01       	movw	r24, r26
    7aea:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    7aee:	da 01       	movw	r26, r20
    7af0:	c9 01       	movw	r24, r18
    7af2:	9c 01       	movw	r18, r24
    7af4:	ad 01       	movw	r20, r26
    7af6:	fe 01       	movw	r30, r28
    7af8:	ef 5a       	subi	r30, 0xAF	; 175
    7afa:	fe 4f       	sbci	r31, 0xFE	; 254
    7afc:	80 81       	ld	r24, Z
    7afe:	91 81       	ldd	r25, Z+1	; 0x01
    7b00:	a2 81       	ldd	r26, Z+2	; 0x02
    7b02:	b3 81       	ldd	r27, Z+3	; 0x03
    7b04:	82 17       	cp	r24, r18
    7b06:	93 07       	cpc	r25, r19
    7b08:	a4 07       	cpc	r26, r20
    7b0a:	b5 07       	cpc	r27, r21
    7b0c:	08 f4       	brcc	.+2      	; 0x7b10 <STEPPER_voidTurnOn+0x1c40>
    7b0e:	3c c9       	rjmp	.-3464   	; 0x6d88 <STEPPER_voidTurnOn+0xeb8>
    7b10:	a1 c5       	rjmp	.+2882   	; 0x8654 <STEPPER_voidTurnOn+0x2784>
			}

		}


		else if( Copy_u8Direction == STEPPER_CLOCK_WISE )
    7b12:	fe 01       	movw	r30, r28
    7b14:	ea 5a       	subi	r30, 0xAA	; 170
    7b16:	fe 4f       	sbci	r31, 0xFE	; 254
    7b18:	80 81       	ld	r24, Z
    7b1a:	81 30       	cpi	r24, 0x01	; 1
    7b1c:	09 f0       	breq	.+2      	; 0x7b20 <STEPPER_voidTurnOn+0x1c50>
    7b1e:	9a c5       	rjmp	.+2868   	; 0x8654 <STEPPER_voidTurnOn+0x2784>
		{


			for( Local_u32Iterator = 0 ; Local_u32Iterator < ( ( (u32)Copy_u16Degree * 512 ) / 45 ) / 8 ; Local_u32Iterator++  )
    7b20:	fe 01       	movw	r30, r28
    7b22:	ef 5a       	subi	r30, 0xAF	; 175
    7b24:	fe 4f       	sbci	r31, 0xFE	; 254
    7b26:	10 82       	st	Z, r1
    7b28:	11 82       	std	Z+1, r1	; 0x01
    7b2a:	12 82       	std	Z+2, r1	; 0x02
    7b2c:	13 82       	std	Z+3, r1	; 0x03
    7b2e:	68 c5       	rjmp	.+2768   	; 0x8600 <STEPPER_voidTurnOn+0x2730>
			{
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_HIGH );
    7b30:	80 e0       	ldi	r24, 0x00	; 0
    7b32:	62 e0       	ldi	r22, 0x02	; 2
    7b34:	41 e0       	ldi	r20, 0x01	; 1
    7b36:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_LOW  );
    7b3a:	80 e0       	ldi	r24, 0x00	; 0
    7b3c:	63 e0       	ldi	r22, 0x03	; 3
    7b3e:	40 e0       	ldi	r20, 0x00	; 0
    7b40:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_LOW  );
    7b44:	80 e0       	ldi	r24, 0x00	; 0
    7b46:	64 e0       	ldi	r22, 0x04	; 4
    7b48:	40 e0       	ldi	r20, 0x00	; 0
    7b4a:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_HIGH );
    7b4e:	80 e0       	ldi	r24, 0x00	; 0
    7b50:	65 e0       	ldi	r22, 0x05	; 5
    7b52:	41 e0       	ldi	r20, 0x01	; 1
    7b54:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    7b58:	fe 01       	movw	r30, r28
    7b5a:	e9 5a       	subi	r30, 0xA9	; 169
    7b5c:	fe 4f       	sbci	r31, 0xFE	; 254
    7b5e:	80 81       	ld	r24, Z
    7b60:	88 2f       	mov	r24, r24
    7b62:	90 e0       	ldi	r25, 0x00	; 0
    7b64:	a0 e0       	ldi	r26, 0x00	; 0
    7b66:	b0 e0       	ldi	r27, 0x00	; 0
    7b68:	bc 01       	movw	r22, r24
    7b6a:	cd 01       	movw	r24, r26
    7b6c:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    7b70:	dc 01       	movw	r26, r24
    7b72:	cb 01       	movw	r24, r22
    7b74:	fe 01       	movw	r30, r28
    7b76:	e3 59       	subi	r30, 0x93	; 147
    7b78:	ff 4f       	sbci	r31, 0xFF	; 255
    7b7a:	80 83       	st	Z, r24
    7b7c:	91 83       	std	Z+1, r25	; 0x01
    7b7e:	a2 83       	std	Z+2, r26	; 0x02
    7b80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7b82:	8e 01       	movw	r16, r28
    7b84:	07 59       	subi	r16, 0x97	; 151
    7b86:	1f 4f       	sbci	r17, 0xFF	; 255
    7b88:	fe 01       	movw	r30, r28
    7b8a:	e3 59       	subi	r30, 0x93	; 147
    7b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    7b8e:	60 81       	ld	r22, Z
    7b90:	71 81       	ldd	r23, Z+1	; 0x01
    7b92:	82 81       	ldd	r24, Z+2	; 0x02
    7b94:	93 81       	ldd	r25, Z+3	; 0x03
    7b96:	20 e0       	ldi	r18, 0x00	; 0
    7b98:	30 e0       	ldi	r19, 0x00	; 0
    7b9a:	4a ef       	ldi	r20, 0xFA	; 250
    7b9c:	54 e4       	ldi	r21, 0x44	; 68
    7b9e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    7ba2:	dc 01       	movw	r26, r24
    7ba4:	cb 01       	movw	r24, r22
    7ba6:	f8 01       	movw	r30, r16
    7ba8:	80 83       	st	Z, r24
    7baa:	91 83       	std	Z+1, r25	; 0x01
    7bac:	a2 83       	std	Z+2, r26	; 0x02
    7bae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7bb0:	fe 01       	movw	r30, r28
    7bb2:	e7 59       	subi	r30, 0x97	; 151
    7bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    7bb6:	60 81       	ld	r22, Z
    7bb8:	71 81       	ldd	r23, Z+1	; 0x01
    7bba:	82 81       	ldd	r24, Z+2	; 0x02
    7bbc:	93 81       	ldd	r25, Z+3	; 0x03
    7bbe:	20 e0       	ldi	r18, 0x00	; 0
    7bc0:	30 e0       	ldi	r19, 0x00	; 0
    7bc2:	40 e8       	ldi	r20, 0x80	; 128
    7bc4:	5f e3       	ldi	r21, 0x3F	; 63
    7bc6:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    7bca:	88 23       	and	r24, r24
    7bcc:	44 f4       	brge	.+16     	; 0x7bde <STEPPER_voidTurnOn+0x1d0e>
		__ticks = 1;
    7bce:	fe 01       	movw	r30, r28
    7bd0:	e9 59       	subi	r30, 0x99	; 153
    7bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    7bd4:	81 e0       	ldi	r24, 0x01	; 1
    7bd6:	90 e0       	ldi	r25, 0x00	; 0
    7bd8:	91 83       	std	Z+1, r25	; 0x01
    7bda:	80 83       	st	Z, r24
    7bdc:	64 c0       	rjmp	.+200    	; 0x7ca6 <STEPPER_voidTurnOn+0x1dd6>
	else if (__tmp > 65535)
    7bde:	fe 01       	movw	r30, r28
    7be0:	e7 59       	subi	r30, 0x97	; 151
    7be2:	ff 4f       	sbci	r31, 0xFF	; 255
    7be4:	60 81       	ld	r22, Z
    7be6:	71 81       	ldd	r23, Z+1	; 0x01
    7be8:	82 81       	ldd	r24, Z+2	; 0x02
    7bea:	93 81       	ldd	r25, Z+3	; 0x03
    7bec:	20 e0       	ldi	r18, 0x00	; 0
    7bee:	3f ef       	ldi	r19, 0xFF	; 255
    7bf0:	4f e7       	ldi	r20, 0x7F	; 127
    7bf2:	57 e4       	ldi	r21, 0x47	; 71
    7bf4:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    7bf8:	18 16       	cp	r1, r24
    7bfa:	0c f0       	brlt	.+2      	; 0x7bfe <STEPPER_voidTurnOn+0x1d2e>
    7bfc:	43 c0       	rjmp	.+134    	; 0x7c84 <STEPPER_voidTurnOn+0x1db4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7bfe:	fe 01       	movw	r30, r28
    7c00:	e3 59       	subi	r30, 0x93	; 147
    7c02:	ff 4f       	sbci	r31, 0xFF	; 255
    7c04:	60 81       	ld	r22, Z
    7c06:	71 81       	ldd	r23, Z+1	; 0x01
    7c08:	82 81       	ldd	r24, Z+2	; 0x02
    7c0a:	93 81       	ldd	r25, Z+3	; 0x03
    7c0c:	20 e0       	ldi	r18, 0x00	; 0
    7c0e:	30 e0       	ldi	r19, 0x00	; 0
    7c10:	40 e2       	ldi	r20, 0x20	; 32
    7c12:	51 e4       	ldi	r21, 0x41	; 65
    7c14:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    7c18:	dc 01       	movw	r26, r24
    7c1a:	cb 01       	movw	r24, r22
    7c1c:	8e 01       	movw	r16, r28
    7c1e:	09 59       	subi	r16, 0x99	; 153
    7c20:	1f 4f       	sbci	r17, 0xFF	; 255
    7c22:	bc 01       	movw	r22, r24
    7c24:	cd 01       	movw	r24, r26
    7c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7c2a:	dc 01       	movw	r26, r24
    7c2c:	cb 01       	movw	r24, r22
    7c2e:	f8 01       	movw	r30, r16
    7c30:	91 83       	std	Z+1, r25	; 0x01
    7c32:	80 83       	st	Z, r24
    7c34:	1f c0       	rjmp	.+62     	; 0x7c74 <STEPPER_voidTurnOn+0x1da4>
    7c36:	fe 01       	movw	r30, r28
    7c38:	eb 59       	subi	r30, 0x9B	; 155
    7c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    7c3c:	88 ec       	ldi	r24, 0xC8	; 200
    7c3e:	90 e0       	ldi	r25, 0x00	; 0
    7c40:	91 83       	std	Z+1, r25	; 0x01
    7c42:	80 83       	st	Z, r24
    7c44:	fe 01       	movw	r30, r28
    7c46:	eb 59       	subi	r30, 0x9B	; 155
    7c48:	ff 4f       	sbci	r31, 0xFF	; 255
    7c4a:	80 81       	ld	r24, Z
    7c4c:	91 81       	ldd	r25, Z+1	; 0x01
    7c4e:	01 97       	sbiw	r24, 0x01	; 1
    7c50:	f1 f7       	brne	.-4      	; 0x7c4e <STEPPER_voidTurnOn+0x1d7e>
    7c52:	fe 01       	movw	r30, r28
    7c54:	eb 59       	subi	r30, 0x9B	; 155
    7c56:	ff 4f       	sbci	r31, 0xFF	; 255
    7c58:	91 83       	std	Z+1, r25	; 0x01
    7c5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7c5c:	de 01       	movw	r26, r28
    7c5e:	a9 59       	subi	r26, 0x99	; 153
    7c60:	bf 4f       	sbci	r27, 0xFF	; 255
    7c62:	fe 01       	movw	r30, r28
    7c64:	e9 59       	subi	r30, 0x99	; 153
    7c66:	ff 4f       	sbci	r31, 0xFF	; 255
    7c68:	80 81       	ld	r24, Z
    7c6a:	91 81       	ldd	r25, Z+1	; 0x01
    7c6c:	01 97       	sbiw	r24, 0x01	; 1
    7c6e:	11 96       	adiw	r26, 0x01	; 1
    7c70:	9c 93       	st	X, r25
    7c72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7c74:	fe 01       	movw	r30, r28
    7c76:	e9 59       	subi	r30, 0x99	; 153
    7c78:	ff 4f       	sbci	r31, 0xFF	; 255
    7c7a:	80 81       	ld	r24, Z
    7c7c:	91 81       	ldd	r25, Z+1	; 0x01
    7c7e:	00 97       	sbiw	r24, 0x00	; 0
    7c80:	d1 f6       	brne	.-76     	; 0x7c36 <STEPPER_voidTurnOn+0x1d66>
    7c82:	27 c0       	rjmp	.+78     	; 0x7cd2 <STEPPER_voidTurnOn+0x1e02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7c84:	8e 01       	movw	r16, r28
    7c86:	09 59       	subi	r16, 0x99	; 153
    7c88:	1f 4f       	sbci	r17, 0xFF	; 255
    7c8a:	fe 01       	movw	r30, r28
    7c8c:	e7 59       	subi	r30, 0x97	; 151
    7c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    7c90:	60 81       	ld	r22, Z
    7c92:	71 81       	ldd	r23, Z+1	; 0x01
    7c94:	82 81       	ldd	r24, Z+2	; 0x02
    7c96:	93 81       	ldd	r25, Z+3	; 0x03
    7c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7c9c:	dc 01       	movw	r26, r24
    7c9e:	cb 01       	movw	r24, r22
    7ca0:	f8 01       	movw	r30, r16
    7ca2:	91 83       	std	Z+1, r25	; 0x01
    7ca4:	80 83       	st	Z, r24
    7ca6:	de 01       	movw	r26, r28
    7ca8:	ad 59       	subi	r26, 0x9D	; 157
    7caa:	bf 4f       	sbci	r27, 0xFF	; 255
    7cac:	fe 01       	movw	r30, r28
    7cae:	e9 59       	subi	r30, 0x99	; 153
    7cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    7cb2:	80 81       	ld	r24, Z
    7cb4:	91 81       	ldd	r25, Z+1	; 0x01
    7cb6:	8d 93       	st	X+, r24
    7cb8:	9c 93       	st	X, r25
    7cba:	fe 01       	movw	r30, r28
    7cbc:	ed 59       	subi	r30, 0x9D	; 157
    7cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    7cc0:	80 81       	ld	r24, Z
    7cc2:	91 81       	ldd	r25, Z+1	; 0x01
    7cc4:	01 97       	sbiw	r24, 0x01	; 1
    7cc6:	f1 f7       	brne	.-4      	; 0x7cc4 <STEPPER_voidTurnOn+0x1df4>
    7cc8:	fe 01       	movw	r30, r28
    7cca:	ed 59       	subi	r30, 0x9D	; 157
    7ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    7cce:	91 83       	std	Z+1, r25	; 0x01
    7cd0:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_LOW  );
    7cd2:	80 e0       	ldi	r24, 0x00	; 0
    7cd4:	62 e0       	ldi	r22, 0x02	; 2
    7cd6:	40 e0       	ldi	r20, 0x00	; 0
    7cd8:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_LOW  );
    7cdc:	80 e0       	ldi	r24, 0x00	; 0
    7cde:	63 e0       	ldi	r22, 0x03	; 3
    7ce0:	40 e0       	ldi	r20, 0x00	; 0
    7ce2:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_LOW  );
    7ce6:	80 e0       	ldi	r24, 0x00	; 0
    7ce8:	64 e0       	ldi	r22, 0x04	; 4
    7cea:	40 e0       	ldi	r20, 0x00	; 0
    7cec:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_HIGH );
    7cf0:	80 e0       	ldi	r24, 0x00	; 0
    7cf2:	65 e0       	ldi	r22, 0x05	; 5
    7cf4:	41 e0       	ldi	r20, 0x01	; 1
    7cf6:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    7cfa:	fe 01       	movw	r30, r28
    7cfc:	e9 5a       	subi	r30, 0xA9	; 169
    7cfe:	fe 4f       	sbci	r31, 0xFE	; 254
    7d00:	80 81       	ld	r24, Z
    7d02:	88 2f       	mov	r24, r24
    7d04:	90 e0       	ldi	r25, 0x00	; 0
    7d06:	a0 e0       	ldi	r26, 0x00	; 0
    7d08:	b0 e0       	ldi	r27, 0x00	; 0
    7d0a:	bc 01       	movw	r22, r24
    7d0c:	cd 01       	movw	r24, r26
    7d0e:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    7d12:	dc 01       	movw	r26, r24
    7d14:	cb 01       	movw	r24, r22
    7d16:	fe 01       	movw	r30, r28
    7d18:	e1 5a       	subi	r30, 0xA1	; 161
    7d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    7d1c:	80 83       	st	Z, r24
    7d1e:	91 83       	std	Z+1, r25	; 0x01
    7d20:	a2 83       	std	Z+2, r26	; 0x02
    7d22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7d24:	8e 01       	movw	r16, r28
    7d26:	05 5a       	subi	r16, 0xA5	; 165
    7d28:	1f 4f       	sbci	r17, 0xFF	; 255
    7d2a:	fe 01       	movw	r30, r28
    7d2c:	e1 5a       	subi	r30, 0xA1	; 161
    7d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    7d30:	60 81       	ld	r22, Z
    7d32:	71 81       	ldd	r23, Z+1	; 0x01
    7d34:	82 81       	ldd	r24, Z+2	; 0x02
    7d36:	93 81       	ldd	r25, Z+3	; 0x03
    7d38:	20 e0       	ldi	r18, 0x00	; 0
    7d3a:	30 e0       	ldi	r19, 0x00	; 0
    7d3c:	4a ef       	ldi	r20, 0xFA	; 250
    7d3e:	54 e4       	ldi	r21, 0x44	; 68
    7d40:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    7d44:	dc 01       	movw	r26, r24
    7d46:	cb 01       	movw	r24, r22
    7d48:	f8 01       	movw	r30, r16
    7d4a:	80 83       	st	Z, r24
    7d4c:	91 83       	std	Z+1, r25	; 0x01
    7d4e:	a2 83       	std	Z+2, r26	; 0x02
    7d50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7d52:	fe 01       	movw	r30, r28
    7d54:	e5 5a       	subi	r30, 0xA5	; 165
    7d56:	ff 4f       	sbci	r31, 0xFF	; 255
    7d58:	60 81       	ld	r22, Z
    7d5a:	71 81       	ldd	r23, Z+1	; 0x01
    7d5c:	82 81       	ldd	r24, Z+2	; 0x02
    7d5e:	93 81       	ldd	r25, Z+3	; 0x03
    7d60:	20 e0       	ldi	r18, 0x00	; 0
    7d62:	30 e0       	ldi	r19, 0x00	; 0
    7d64:	40 e8       	ldi	r20, 0x80	; 128
    7d66:	5f e3       	ldi	r21, 0x3F	; 63
    7d68:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    7d6c:	88 23       	and	r24, r24
    7d6e:	44 f4       	brge	.+16     	; 0x7d80 <STEPPER_voidTurnOn+0x1eb0>
		__ticks = 1;
    7d70:	fe 01       	movw	r30, r28
    7d72:	e7 5a       	subi	r30, 0xA7	; 167
    7d74:	ff 4f       	sbci	r31, 0xFF	; 255
    7d76:	81 e0       	ldi	r24, 0x01	; 1
    7d78:	90 e0       	ldi	r25, 0x00	; 0
    7d7a:	91 83       	std	Z+1, r25	; 0x01
    7d7c:	80 83       	st	Z, r24
    7d7e:	64 c0       	rjmp	.+200    	; 0x7e48 <STEPPER_voidTurnOn+0x1f78>
	else if (__tmp > 65535)
    7d80:	fe 01       	movw	r30, r28
    7d82:	e5 5a       	subi	r30, 0xA5	; 165
    7d84:	ff 4f       	sbci	r31, 0xFF	; 255
    7d86:	60 81       	ld	r22, Z
    7d88:	71 81       	ldd	r23, Z+1	; 0x01
    7d8a:	82 81       	ldd	r24, Z+2	; 0x02
    7d8c:	93 81       	ldd	r25, Z+3	; 0x03
    7d8e:	20 e0       	ldi	r18, 0x00	; 0
    7d90:	3f ef       	ldi	r19, 0xFF	; 255
    7d92:	4f e7       	ldi	r20, 0x7F	; 127
    7d94:	57 e4       	ldi	r21, 0x47	; 71
    7d96:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    7d9a:	18 16       	cp	r1, r24
    7d9c:	0c f0       	brlt	.+2      	; 0x7da0 <STEPPER_voidTurnOn+0x1ed0>
    7d9e:	43 c0       	rjmp	.+134    	; 0x7e26 <STEPPER_voidTurnOn+0x1f56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7da0:	fe 01       	movw	r30, r28
    7da2:	e1 5a       	subi	r30, 0xA1	; 161
    7da4:	ff 4f       	sbci	r31, 0xFF	; 255
    7da6:	60 81       	ld	r22, Z
    7da8:	71 81       	ldd	r23, Z+1	; 0x01
    7daa:	82 81       	ldd	r24, Z+2	; 0x02
    7dac:	93 81       	ldd	r25, Z+3	; 0x03
    7dae:	20 e0       	ldi	r18, 0x00	; 0
    7db0:	30 e0       	ldi	r19, 0x00	; 0
    7db2:	40 e2       	ldi	r20, 0x20	; 32
    7db4:	51 e4       	ldi	r21, 0x41	; 65
    7db6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    7dba:	dc 01       	movw	r26, r24
    7dbc:	cb 01       	movw	r24, r22
    7dbe:	8e 01       	movw	r16, r28
    7dc0:	07 5a       	subi	r16, 0xA7	; 167
    7dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    7dc4:	bc 01       	movw	r22, r24
    7dc6:	cd 01       	movw	r24, r26
    7dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7dcc:	dc 01       	movw	r26, r24
    7dce:	cb 01       	movw	r24, r22
    7dd0:	f8 01       	movw	r30, r16
    7dd2:	91 83       	std	Z+1, r25	; 0x01
    7dd4:	80 83       	st	Z, r24
    7dd6:	1f c0       	rjmp	.+62     	; 0x7e16 <STEPPER_voidTurnOn+0x1f46>
    7dd8:	fe 01       	movw	r30, r28
    7dda:	e9 5a       	subi	r30, 0xA9	; 169
    7ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    7dde:	88 ec       	ldi	r24, 0xC8	; 200
    7de0:	90 e0       	ldi	r25, 0x00	; 0
    7de2:	91 83       	std	Z+1, r25	; 0x01
    7de4:	80 83       	st	Z, r24
    7de6:	fe 01       	movw	r30, r28
    7de8:	e9 5a       	subi	r30, 0xA9	; 169
    7dea:	ff 4f       	sbci	r31, 0xFF	; 255
    7dec:	80 81       	ld	r24, Z
    7dee:	91 81       	ldd	r25, Z+1	; 0x01
    7df0:	01 97       	sbiw	r24, 0x01	; 1
    7df2:	f1 f7       	brne	.-4      	; 0x7df0 <STEPPER_voidTurnOn+0x1f20>
    7df4:	fe 01       	movw	r30, r28
    7df6:	e9 5a       	subi	r30, 0xA9	; 169
    7df8:	ff 4f       	sbci	r31, 0xFF	; 255
    7dfa:	91 83       	std	Z+1, r25	; 0x01
    7dfc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7dfe:	de 01       	movw	r26, r28
    7e00:	a7 5a       	subi	r26, 0xA7	; 167
    7e02:	bf 4f       	sbci	r27, 0xFF	; 255
    7e04:	fe 01       	movw	r30, r28
    7e06:	e7 5a       	subi	r30, 0xA7	; 167
    7e08:	ff 4f       	sbci	r31, 0xFF	; 255
    7e0a:	80 81       	ld	r24, Z
    7e0c:	91 81       	ldd	r25, Z+1	; 0x01
    7e0e:	01 97       	sbiw	r24, 0x01	; 1
    7e10:	11 96       	adiw	r26, 0x01	; 1
    7e12:	9c 93       	st	X, r25
    7e14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7e16:	fe 01       	movw	r30, r28
    7e18:	e7 5a       	subi	r30, 0xA7	; 167
    7e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    7e1c:	80 81       	ld	r24, Z
    7e1e:	91 81       	ldd	r25, Z+1	; 0x01
    7e20:	00 97       	sbiw	r24, 0x00	; 0
    7e22:	d1 f6       	brne	.-76     	; 0x7dd8 <STEPPER_voidTurnOn+0x1f08>
    7e24:	27 c0       	rjmp	.+78     	; 0x7e74 <STEPPER_voidTurnOn+0x1fa4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7e26:	8e 01       	movw	r16, r28
    7e28:	07 5a       	subi	r16, 0xA7	; 167
    7e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    7e2c:	fe 01       	movw	r30, r28
    7e2e:	e5 5a       	subi	r30, 0xA5	; 165
    7e30:	ff 4f       	sbci	r31, 0xFF	; 255
    7e32:	60 81       	ld	r22, Z
    7e34:	71 81       	ldd	r23, Z+1	; 0x01
    7e36:	82 81       	ldd	r24, Z+2	; 0x02
    7e38:	93 81       	ldd	r25, Z+3	; 0x03
    7e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7e3e:	dc 01       	movw	r26, r24
    7e40:	cb 01       	movw	r24, r22
    7e42:	f8 01       	movw	r30, r16
    7e44:	91 83       	std	Z+1, r25	; 0x01
    7e46:	80 83       	st	Z, r24
    7e48:	de 01       	movw	r26, r28
    7e4a:	ab 5a       	subi	r26, 0xAB	; 171
    7e4c:	bf 4f       	sbci	r27, 0xFF	; 255
    7e4e:	fe 01       	movw	r30, r28
    7e50:	e7 5a       	subi	r30, 0xA7	; 167
    7e52:	ff 4f       	sbci	r31, 0xFF	; 255
    7e54:	80 81       	ld	r24, Z
    7e56:	91 81       	ldd	r25, Z+1	; 0x01
    7e58:	8d 93       	st	X+, r24
    7e5a:	9c 93       	st	X, r25
    7e5c:	fe 01       	movw	r30, r28
    7e5e:	eb 5a       	subi	r30, 0xAB	; 171
    7e60:	ff 4f       	sbci	r31, 0xFF	; 255
    7e62:	80 81       	ld	r24, Z
    7e64:	91 81       	ldd	r25, Z+1	; 0x01
    7e66:	01 97       	sbiw	r24, 0x01	; 1
    7e68:	f1 f7       	brne	.-4      	; 0x7e66 <STEPPER_voidTurnOn+0x1f96>
    7e6a:	fe 01       	movw	r30, r28
    7e6c:	eb 5a       	subi	r30, 0xAB	; 171
    7e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    7e70:	91 83       	std	Z+1, r25	; 0x01
    7e72:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_LOW  );
    7e74:	80 e0       	ldi	r24, 0x00	; 0
    7e76:	62 e0       	ldi	r22, 0x02	; 2
    7e78:	40 e0       	ldi	r20, 0x00	; 0
    7e7a:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_LOW  );
    7e7e:	80 e0       	ldi	r24, 0x00	; 0
    7e80:	63 e0       	ldi	r22, 0x03	; 3
    7e82:	40 e0       	ldi	r20, 0x00	; 0
    7e84:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_HIGH );
    7e88:	80 e0       	ldi	r24, 0x00	; 0
    7e8a:	64 e0       	ldi	r22, 0x04	; 4
    7e8c:	41 e0       	ldi	r20, 0x01	; 1
    7e8e:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_HIGH );
    7e92:	80 e0       	ldi	r24, 0x00	; 0
    7e94:	65 e0       	ldi	r22, 0x05	; 5
    7e96:	41 e0       	ldi	r20, 0x01	; 1
    7e98:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    7e9c:	fe 01       	movw	r30, r28
    7e9e:	e9 5a       	subi	r30, 0xA9	; 169
    7ea0:	fe 4f       	sbci	r31, 0xFE	; 254
    7ea2:	80 81       	ld	r24, Z
    7ea4:	88 2f       	mov	r24, r24
    7ea6:	90 e0       	ldi	r25, 0x00	; 0
    7ea8:	a0 e0       	ldi	r26, 0x00	; 0
    7eaa:	b0 e0       	ldi	r27, 0x00	; 0
    7eac:	bc 01       	movw	r22, r24
    7eae:	cd 01       	movw	r24, r26
    7eb0:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    7eb4:	dc 01       	movw	r26, r24
    7eb6:	cb 01       	movw	r24, r22
    7eb8:	fe 01       	movw	r30, r28
    7eba:	ef 5a       	subi	r30, 0xAF	; 175
    7ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    7ebe:	80 83       	st	Z, r24
    7ec0:	91 83       	std	Z+1, r25	; 0x01
    7ec2:	a2 83       	std	Z+2, r26	; 0x02
    7ec4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7ec6:	8e 01       	movw	r16, r28
    7ec8:	03 5b       	subi	r16, 0xB3	; 179
    7eca:	1f 4f       	sbci	r17, 0xFF	; 255
    7ecc:	fe 01       	movw	r30, r28
    7ece:	ef 5a       	subi	r30, 0xAF	; 175
    7ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    7ed2:	60 81       	ld	r22, Z
    7ed4:	71 81       	ldd	r23, Z+1	; 0x01
    7ed6:	82 81       	ldd	r24, Z+2	; 0x02
    7ed8:	93 81       	ldd	r25, Z+3	; 0x03
    7eda:	20 e0       	ldi	r18, 0x00	; 0
    7edc:	30 e0       	ldi	r19, 0x00	; 0
    7ede:	4a ef       	ldi	r20, 0xFA	; 250
    7ee0:	54 e4       	ldi	r21, 0x44	; 68
    7ee2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    7ee6:	dc 01       	movw	r26, r24
    7ee8:	cb 01       	movw	r24, r22
    7eea:	f8 01       	movw	r30, r16
    7eec:	80 83       	st	Z, r24
    7eee:	91 83       	std	Z+1, r25	; 0x01
    7ef0:	a2 83       	std	Z+2, r26	; 0x02
    7ef2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7ef4:	fe 01       	movw	r30, r28
    7ef6:	e3 5b       	subi	r30, 0xB3	; 179
    7ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    7efa:	60 81       	ld	r22, Z
    7efc:	71 81       	ldd	r23, Z+1	; 0x01
    7efe:	82 81       	ldd	r24, Z+2	; 0x02
    7f00:	93 81       	ldd	r25, Z+3	; 0x03
    7f02:	20 e0       	ldi	r18, 0x00	; 0
    7f04:	30 e0       	ldi	r19, 0x00	; 0
    7f06:	40 e8       	ldi	r20, 0x80	; 128
    7f08:	5f e3       	ldi	r21, 0x3F	; 63
    7f0a:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    7f0e:	88 23       	and	r24, r24
    7f10:	44 f4       	brge	.+16     	; 0x7f22 <STEPPER_voidTurnOn+0x2052>
		__ticks = 1;
    7f12:	fe 01       	movw	r30, r28
    7f14:	e5 5b       	subi	r30, 0xB5	; 181
    7f16:	ff 4f       	sbci	r31, 0xFF	; 255
    7f18:	81 e0       	ldi	r24, 0x01	; 1
    7f1a:	90 e0       	ldi	r25, 0x00	; 0
    7f1c:	91 83       	std	Z+1, r25	; 0x01
    7f1e:	80 83       	st	Z, r24
    7f20:	64 c0       	rjmp	.+200    	; 0x7fea <STEPPER_voidTurnOn+0x211a>
	else if (__tmp > 65535)
    7f22:	fe 01       	movw	r30, r28
    7f24:	e3 5b       	subi	r30, 0xB3	; 179
    7f26:	ff 4f       	sbci	r31, 0xFF	; 255
    7f28:	60 81       	ld	r22, Z
    7f2a:	71 81       	ldd	r23, Z+1	; 0x01
    7f2c:	82 81       	ldd	r24, Z+2	; 0x02
    7f2e:	93 81       	ldd	r25, Z+3	; 0x03
    7f30:	20 e0       	ldi	r18, 0x00	; 0
    7f32:	3f ef       	ldi	r19, 0xFF	; 255
    7f34:	4f e7       	ldi	r20, 0x7F	; 127
    7f36:	57 e4       	ldi	r21, 0x47	; 71
    7f38:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    7f3c:	18 16       	cp	r1, r24
    7f3e:	0c f0       	brlt	.+2      	; 0x7f42 <STEPPER_voidTurnOn+0x2072>
    7f40:	43 c0       	rjmp	.+134    	; 0x7fc8 <STEPPER_voidTurnOn+0x20f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7f42:	fe 01       	movw	r30, r28
    7f44:	ef 5a       	subi	r30, 0xAF	; 175
    7f46:	ff 4f       	sbci	r31, 0xFF	; 255
    7f48:	60 81       	ld	r22, Z
    7f4a:	71 81       	ldd	r23, Z+1	; 0x01
    7f4c:	82 81       	ldd	r24, Z+2	; 0x02
    7f4e:	93 81       	ldd	r25, Z+3	; 0x03
    7f50:	20 e0       	ldi	r18, 0x00	; 0
    7f52:	30 e0       	ldi	r19, 0x00	; 0
    7f54:	40 e2       	ldi	r20, 0x20	; 32
    7f56:	51 e4       	ldi	r21, 0x41	; 65
    7f58:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    7f5c:	dc 01       	movw	r26, r24
    7f5e:	cb 01       	movw	r24, r22
    7f60:	8e 01       	movw	r16, r28
    7f62:	05 5b       	subi	r16, 0xB5	; 181
    7f64:	1f 4f       	sbci	r17, 0xFF	; 255
    7f66:	bc 01       	movw	r22, r24
    7f68:	cd 01       	movw	r24, r26
    7f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7f6e:	dc 01       	movw	r26, r24
    7f70:	cb 01       	movw	r24, r22
    7f72:	f8 01       	movw	r30, r16
    7f74:	91 83       	std	Z+1, r25	; 0x01
    7f76:	80 83       	st	Z, r24
    7f78:	1f c0       	rjmp	.+62     	; 0x7fb8 <STEPPER_voidTurnOn+0x20e8>
    7f7a:	fe 01       	movw	r30, r28
    7f7c:	e7 5b       	subi	r30, 0xB7	; 183
    7f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    7f80:	88 ec       	ldi	r24, 0xC8	; 200
    7f82:	90 e0       	ldi	r25, 0x00	; 0
    7f84:	91 83       	std	Z+1, r25	; 0x01
    7f86:	80 83       	st	Z, r24
    7f88:	fe 01       	movw	r30, r28
    7f8a:	e7 5b       	subi	r30, 0xB7	; 183
    7f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    7f8e:	80 81       	ld	r24, Z
    7f90:	91 81       	ldd	r25, Z+1	; 0x01
    7f92:	01 97       	sbiw	r24, 0x01	; 1
    7f94:	f1 f7       	brne	.-4      	; 0x7f92 <STEPPER_voidTurnOn+0x20c2>
    7f96:	fe 01       	movw	r30, r28
    7f98:	e7 5b       	subi	r30, 0xB7	; 183
    7f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    7f9c:	91 83       	std	Z+1, r25	; 0x01
    7f9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7fa0:	de 01       	movw	r26, r28
    7fa2:	a5 5b       	subi	r26, 0xB5	; 181
    7fa4:	bf 4f       	sbci	r27, 0xFF	; 255
    7fa6:	fe 01       	movw	r30, r28
    7fa8:	e5 5b       	subi	r30, 0xB5	; 181
    7faa:	ff 4f       	sbci	r31, 0xFF	; 255
    7fac:	80 81       	ld	r24, Z
    7fae:	91 81       	ldd	r25, Z+1	; 0x01
    7fb0:	01 97       	sbiw	r24, 0x01	; 1
    7fb2:	11 96       	adiw	r26, 0x01	; 1
    7fb4:	9c 93       	st	X, r25
    7fb6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7fb8:	fe 01       	movw	r30, r28
    7fba:	e5 5b       	subi	r30, 0xB5	; 181
    7fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    7fbe:	80 81       	ld	r24, Z
    7fc0:	91 81       	ldd	r25, Z+1	; 0x01
    7fc2:	00 97       	sbiw	r24, 0x00	; 0
    7fc4:	d1 f6       	brne	.-76     	; 0x7f7a <STEPPER_voidTurnOn+0x20aa>
    7fc6:	27 c0       	rjmp	.+78     	; 0x8016 <STEPPER_voidTurnOn+0x2146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7fc8:	8e 01       	movw	r16, r28
    7fca:	05 5b       	subi	r16, 0xB5	; 181
    7fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    7fce:	fe 01       	movw	r30, r28
    7fd0:	e3 5b       	subi	r30, 0xB3	; 179
    7fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    7fd4:	60 81       	ld	r22, Z
    7fd6:	71 81       	ldd	r23, Z+1	; 0x01
    7fd8:	82 81       	ldd	r24, Z+2	; 0x02
    7fda:	93 81       	ldd	r25, Z+3	; 0x03
    7fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7fe0:	dc 01       	movw	r26, r24
    7fe2:	cb 01       	movw	r24, r22
    7fe4:	f8 01       	movw	r30, r16
    7fe6:	91 83       	std	Z+1, r25	; 0x01
    7fe8:	80 83       	st	Z, r24
    7fea:	de 01       	movw	r26, r28
    7fec:	a9 5b       	subi	r26, 0xB9	; 185
    7fee:	bf 4f       	sbci	r27, 0xFF	; 255
    7ff0:	fe 01       	movw	r30, r28
    7ff2:	e5 5b       	subi	r30, 0xB5	; 181
    7ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    7ff6:	80 81       	ld	r24, Z
    7ff8:	91 81       	ldd	r25, Z+1	; 0x01
    7ffa:	8d 93       	st	X+, r24
    7ffc:	9c 93       	st	X, r25
    7ffe:	fe 01       	movw	r30, r28
    8000:	e9 5b       	subi	r30, 0xB9	; 185
    8002:	ff 4f       	sbci	r31, 0xFF	; 255
    8004:	80 81       	ld	r24, Z
    8006:	91 81       	ldd	r25, Z+1	; 0x01
    8008:	01 97       	sbiw	r24, 0x01	; 1
    800a:	f1 f7       	brne	.-4      	; 0x8008 <STEPPER_voidTurnOn+0x2138>
    800c:	fe 01       	movw	r30, r28
    800e:	e9 5b       	subi	r30, 0xB9	; 185
    8010:	ff 4f       	sbci	r31, 0xFF	; 255
    8012:	91 83       	std	Z+1, r25	; 0x01
    8014:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_LOW  );
    8016:	80 e0       	ldi	r24, 0x00	; 0
    8018:	62 e0       	ldi	r22, 0x02	; 2
    801a:	40 e0       	ldi	r20, 0x00	; 0
    801c:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_LOW  );
    8020:	80 e0       	ldi	r24, 0x00	; 0
    8022:	63 e0       	ldi	r22, 0x03	; 3
    8024:	40 e0       	ldi	r20, 0x00	; 0
    8026:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_HIGH );
    802a:	80 e0       	ldi	r24, 0x00	; 0
    802c:	64 e0       	ldi	r22, 0x04	; 4
    802e:	41 e0       	ldi	r20, 0x01	; 1
    8030:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_LOW  );
    8034:	80 e0       	ldi	r24, 0x00	; 0
    8036:	65 e0       	ldi	r22, 0x05	; 5
    8038:	40 e0       	ldi	r20, 0x00	; 0
    803a:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    803e:	fe 01       	movw	r30, r28
    8040:	e9 5a       	subi	r30, 0xA9	; 169
    8042:	fe 4f       	sbci	r31, 0xFE	; 254
    8044:	80 81       	ld	r24, Z
    8046:	88 2f       	mov	r24, r24
    8048:	90 e0       	ldi	r25, 0x00	; 0
    804a:	a0 e0       	ldi	r26, 0x00	; 0
    804c:	b0 e0       	ldi	r27, 0x00	; 0
    804e:	bc 01       	movw	r22, r24
    8050:	cd 01       	movw	r24, r26
    8052:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    8056:	dc 01       	movw	r26, r24
    8058:	cb 01       	movw	r24, r22
    805a:	fe 01       	movw	r30, r28
    805c:	ed 5b       	subi	r30, 0xBD	; 189
    805e:	ff 4f       	sbci	r31, 0xFF	; 255
    8060:	80 83       	st	Z, r24
    8062:	91 83       	std	Z+1, r25	; 0x01
    8064:	a2 83       	std	Z+2, r26	; 0x02
    8066:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8068:	8e 01       	movw	r16, r28
    806a:	01 5c       	subi	r16, 0xC1	; 193
    806c:	1f 4f       	sbci	r17, 0xFF	; 255
    806e:	fe 01       	movw	r30, r28
    8070:	ed 5b       	subi	r30, 0xBD	; 189
    8072:	ff 4f       	sbci	r31, 0xFF	; 255
    8074:	60 81       	ld	r22, Z
    8076:	71 81       	ldd	r23, Z+1	; 0x01
    8078:	82 81       	ldd	r24, Z+2	; 0x02
    807a:	93 81       	ldd	r25, Z+3	; 0x03
    807c:	20 e0       	ldi	r18, 0x00	; 0
    807e:	30 e0       	ldi	r19, 0x00	; 0
    8080:	4a ef       	ldi	r20, 0xFA	; 250
    8082:	54 e4       	ldi	r21, 0x44	; 68
    8084:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    8088:	dc 01       	movw	r26, r24
    808a:	cb 01       	movw	r24, r22
    808c:	f8 01       	movw	r30, r16
    808e:	80 83       	st	Z, r24
    8090:	91 83       	std	Z+1, r25	; 0x01
    8092:	a2 83       	std	Z+2, r26	; 0x02
    8094:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8096:	fe 01       	movw	r30, r28
    8098:	ff 96       	adiw	r30, 0x3f	; 63
    809a:	60 81       	ld	r22, Z
    809c:	71 81       	ldd	r23, Z+1	; 0x01
    809e:	82 81       	ldd	r24, Z+2	; 0x02
    80a0:	93 81       	ldd	r25, Z+3	; 0x03
    80a2:	20 e0       	ldi	r18, 0x00	; 0
    80a4:	30 e0       	ldi	r19, 0x00	; 0
    80a6:	40 e8       	ldi	r20, 0x80	; 128
    80a8:	5f e3       	ldi	r21, 0x3F	; 63
    80aa:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    80ae:	88 23       	and	r24, r24
    80b0:	2c f4       	brge	.+10     	; 0x80bc <STEPPER_voidTurnOn+0x21ec>
		__ticks = 1;
    80b2:	81 e0       	ldi	r24, 0x01	; 1
    80b4:	90 e0       	ldi	r25, 0x00	; 0
    80b6:	9e af       	std	Y+62, r25	; 0x3e
    80b8:	8d af       	std	Y+61, r24	; 0x3d
    80ba:	46 c0       	rjmp	.+140    	; 0x8148 <STEPPER_voidTurnOn+0x2278>
	else if (__tmp > 65535)
    80bc:	fe 01       	movw	r30, r28
    80be:	ff 96       	adiw	r30, 0x3f	; 63
    80c0:	60 81       	ld	r22, Z
    80c2:	71 81       	ldd	r23, Z+1	; 0x01
    80c4:	82 81       	ldd	r24, Z+2	; 0x02
    80c6:	93 81       	ldd	r25, Z+3	; 0x03
    80c8:	20 e0       	ldi	r18, 0x00	; 0
    80ca:	3f ef       	ldi	r19, 0xFF	; 255
    80cc:	4f e7       	ldi	r20, 0x7F	; 127
    80ce:	57 e4       	ldi	r21, 0x47	; 71
    80d0:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    80d4:	18 16       	cp	r1, r24
    80d6:	64 f5       	brge	.+88     	; 0x8130 <STEPPER_voidTurnOn+0x2260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    80d8:	fe 01       	movw	r30, r28
    80da:	ed 5b       	subi	r30, 0xBD	; 189
    80dc:	ff 4f       	sbci	r31, 0xFF	; 255
    80de:	60 81       	ld	r22, Z
    80e0:	71 81       	ldd	r23, Z+1	; 0x01
    80e2:	82 81       	ldd	r24, Z+2	; 0x02
    80e4:	93 81       	ldd	r25, Z+3	; 0x03
    80e6:	20 e0       	ldi	r18, 0x00	; 0
    80e8:	30 e0       	ldi	r19, 0x00	; 0
    80ea:	40 e2       	ldi	r20, 0x20	; 32
    80ec:	51 e4       	ldi	r21, 0x41	; 65
    80ee:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    80f2:	dc 01       	movw	r26, r24
    80f4:	cb 01       	movw	r24, r22
    80f6:	bc 01       	movw	r22, r24
    80f8:	cd 01       	movw	r24, r26
    80fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    80fe:	dc 01       	movw	r26, r24
    8100:	cb 01       	movw	r24, r22
    8102:	9e af       	std	Y+62, r25	; 0x3e
    8104:	8d af       	std	Y+61, r24	; 0x3d
    8106:	0f c0       	rjmp	.+30     	; 0x8126 <STEPPER_voidTurnOn+0x2256>
    8108:	88 ec       	ldi	r24, 0xC8	; 200
    810a:	90 e0       	ldi	r25, 0x00	; 0
    810c:	9c af       	std	Y+60, r25	; 0x3c
    810e:	8b af       	std	Y+59, r24	; 0x3b
    8110:	8b ad       	ldd	r24, Y+59	; 0x3b
    8112:	9c ad       	ldd	r25, Y+60	; 0x3c
    8114:	01 97       	sbiw	r24, 0x01	; 1
    8116:	f1 f7       	brne	.-4      	; 0x8114 <STEPPER_voidTurnOn+0x2244>
    8118:	9c af       	std	Y+60, r25	; 0x3c
    811a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    811c:	8d ad       	ldd	r24, Y+61	; 0x3d
    811e:	9e ad       	ldd	r25, Y+62	; 0x3e
    8120:	01 97       	sbiw	r24, 0x01	; 1
    8122:	9e af       	std	Y+62, r25	; 0x3e
    8124:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8126:	8d ad       	ldd	r24, Y+61	; 0x3d
    8128:	9e ad       	ldd	r25, Y+62	; 0x3e
    812a:	00 97       	sbiw	r24, 0x00	; 0
    812c:	69 f7       	brne	.-38     	; 0x8108 <STEPPER_voidTurnOn+0x2238>
    812e:	16 c0       	rjmp	.+44     	; 0x815c <STEPPER_voidTurnOn+0x228c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8130:	fe 01       	movw	r30, r28
    8132:	ff 96       	adiw	r30, 0x3f	; 63
    8134:	60 81       	ld	r22, Z
    8136:	71 81       	ldd	r23, Z+1	; 0x01
    8138:	82 81       	ldd	r24, Z+2	; 0x02
    813a:	93 81       	ldd	r25, Z+3	; 0x03
    813c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8140:	dc 01       	movw	r26, r24
    8142:	cb 01       	movw	r24, r22
    8144:	9e af       	std	Y+62, r25	; 0x3e
    8146:	8d af       	std	Y+61, r24	; 0x3d
    8148:	8d ad       	ldd	r24, Y+61	; 0x3d
    814a:	9e ad       	ldd	r25, Y+62	; 0x3e
    814c:	9a af       	std	Y+58, r25	; 0x3a
    814e:	89 af       	std	Y+57, r24	; 0x39
    8150:	89 ad       	ldd	r24, Y+57	; 0x39
    8152:	9a ad       	ldd	r25, Y+58	; 0x3a
    8154:	01 97       	sbiw	r24, 0x01	; 1
    8156:	f1 f7       	brne	.-4      	; 0x8154 <STEPPER_voidTurnOn+0x2284>
    8158:	9a af       	std	Y+58, r25	; 0x3a
    815a:	89 af       	std	Y+57, r24	; 0x39

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_LOW  );
    815c:	80 e0       	ldi	r24, 0x00	; 0
    815e:	62 e0       	ldi	r22, 0x02	; 2
    8160:	40 e0       	ldi	r20, 0x00	; 0
    8162:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_HIGH );
    8166:	80 e0       	ldi	r24, 0x00	; 0
    8168:	63 e0       	ldi	r22, 0x03	; 3
    816a:	41 e0       	ldi	r20, 0x01	; 1
    816c:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_HIGH );
    8170:	80 e0       	ldi	r24, 0x00	; 0
    8172:	64 e0       	ldi	r22, 0x04	; 4
    8174:	41 e0       	ldi	r20, 0x01	; 1
    8176:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_LOW  );
    817a:	80 e0       	ldi	r24, 0x00	; 0
    817c:	65 e0       	ldi	r22, 0x05	; 5
    817e:	40 e0       	ldi	r20, 0x00	; 0
    8180:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    8184:	fe 01       	movw	r30, r28
    8186:	e9 5a       	subi	r30, 0xA9	; 169
    8188:	fe 4f       	sbci	r31, 0xFE	; 254
    818a:	80 81       	ld	r24, Z
    818c:	88 2f       	mov	r24, r24
    818e:	90 e0       	ldi	r25, 0x00	; 0
    8190:	a0 e0       	ldi	r26, 0x00	; 0
    8192:	b0 e0       	ldi	r27, 0x00	; 0
    8194:	bc 01       	movw	r22, r24
    8196:	cd 01       	movw	r24, r26
    8198:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    819c:	dc 01       	movw	r26, r24
    819e:	cb 01       	movw	r24, r22
    81a0:	8d ab       	std	Y+53, r24	; 0x35
    81a2:	9e ab       	std	Y+54, r25	; 0x36
    81a4:	af ab       	std	Y+55, r26	; 0x37
    81a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    81a8:	6d a9       	ldd	r22, Y+53	; 0x35
    81aa:	7e a9       	ldd	r23, Y+54	; 0x36
    81ac:	8f a9       	ldd	r24, Y+55	; 0x37
    81ae:	98 ad       	ldd	r25, Y+56	; 0x38
    81b0:	20 e0       	ldi	r18, 0x00	; 0
    81b2:	30 e0       	ldi	r19, 0x00	; 0
    81b4:	4a ef       	ldi	r20, 0xFA	; 250
    81b6:	54 e4       	ldi	r21, 0x44	; 68
    81b8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    81bc:	dc 01       	movw	r26, r24
    81be:	cb 01       	movw	r24, r22
    81c0:	89 ab       	std	Y+49, r24	; 0x31
    81c2:	9a ab       	std	Y+50, r25	; 0x32
    81c4:	ab ab       	std	Y+51, r26	; 0x33
    81c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    81c8:	69 a9       	ldd	r22, Y+49	; 0x31
    81ca:	7a a9       	ldd	r23, Y+50	; 0x32
    81cc:	8b a9       	ldd	r24, Y+51	; 0x33
    81ce:	9c a9       	ldd	r25, Y+52	; 0x34
    81d0:	20 e0       	ldi	r18, 0x00	; 0
    81d2:	30 e0       	ldi	r19, 0x00	; 0
    81d4:	40 e8       	ldi	r20, 0x80	; 128
    81d6:	5f e3       	ldi	r21, 0x3F	; 63
    81d8:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    81dc:	88 23       	and	r24, r24
    81de:	2c f4       	brge	.+10     	; 0x81ea <STEPPER_voidTurnOn+0x231a>
		__ticks = 1;
    81e0:	81 e0       	ldi	r24, 0x01	; 1
    81e2:	90 e0       	ldi	r25, 0x00	; 0
    81e4:	98 ab       	std	Y+48, r25	; 0x30
    81e6:	8f a7       	std	Y+47, r24	; 0x2f
    81e8:	3f c0       	rjmp	.+126    	; 0x8268 <STEPPER_voidTurnOn+0x2398>
	else if (__tmp > 65535)
    81ea:	69 a9       	ldd	r22, Y+49	; 0x31
    81ec:	7a a9       	ldd	r23, Y+50	; 0x32
    81ee:	8b a9       	ldd	r24, Y+51	; 0x33
    81f0:	9c a9       	ldd	r25, Y+52	; 0x34
    81f2:	20 e0       	ldi	r18, 0x00	; 0
    81f4:	3f ef       	ldi	r19, 0xFF	; 255
    81f6:	4f e7       	ldi	r20, 0x7F	; 127
    81f8:	57 e4       	ldi	r21, 0x47	; 71
    81fa:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    81fe:	18 16       	cp	r1, r24
    8200:	4c f5       	brge	.+82     	; 0x8254 <STEPPER_voidTurnOn+0x2384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8202:	6d a9       	ldd	r22, Y+53	; 0x35
    8204:	7e a9       	ldd	r23, Y+54	; 0x36
    8206:	8f a9       	ldd	r24, Y+55	; 0x37
    8208:	98 ad       	ldd	r25, Y+56	; 0x38
    820a:	20 e0       	ldi	r18, 0x00	; 0
    820c:	30 e0       	ldi	r19, 0x00	; 0
    820e:	40 e2       	ldi	r20, 0x20	; 32
    8210:	51 e4       	ldi	r21, 0x41	; 65
    8212:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    8216:	dc 01       	movw	r26, r24
    8218:	cb 01       	movw	r24, r22
    821a:	bc 01       	movw	r22, r24
    821c:	cd 01       	movw	r24, r26
    821e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8222:	dc 01       	movw	r26, r24
    8224:	cb 01       	movw	r24, r22
    8226:	98 ab       	std	Y+48, r25	; 0x30
    8228:	8f a7       	std	Y+47, r24	; 0x2f
    822a:	0f c0       	rjmp	.+30     	; 0x824a <STEPPER_voidTurnOn+0x237a>
    822c:	88 ec       	ldi	r24, 0xC8	; 200
    822e:	90 e0       	ldi	r25, 0x00	; 0
    8230:	9e a7       	std	Y+46, r25	; 0x2e
    8232:	8d a7       	std	Y+45, r24	; 0x2d
    8234:	8d a5       	ldd	r24, Y+45	; 0x2d
    8236:	9e a5       	ldd	r25, Y+46	; 0x2e
    8238:	01 97       	sbiw	r24, 0x01	; 1
    823a:	f1 f7       	brne	.-4      	; 0x8238 <STEPPER_voidTurnOn+0x2368>
    823c:	9e a7       	std	Y+46, r25	; 0x2e
    823e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8240:	8f a5       	ldd	r24, Y+47	; 0x2f
    8242:	98 a9       	ldd	r25, Y+48	; 0x30
    8244:	01 97       	sbiw	r24, 0x01	; 1
    8246:	98 ab       	std	Y+48, r25	; 0x30
    8248:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    824a:	8f a5       	ldd	r24, Y+47	; 0x2f
    824c:	98 a9       	ldd	r25, Y+48	; 0x30
    824e:	00 97       	sbiw	r24, 0x00	; 0
    8250:	69 f7       	brne	.-38     	; 0x822c <STEPPER_voidTurnOn+0x235c>
    8252:	14 c0       	rjmp	.+40     	; 0x827c <STEPPER_voidTurnOn+0x23ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8254:	69 a9       	ldd	r22, Y+49	; 0x31
    8256:	7a a9       	ldd	r23, Y+50	; 0x32
    8258:	8b a9       	ldd	r24, Y+51	; 0x33
    825a:	9c a9       	ldd	r25, Y+52	; 0x34
    825c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8260:	dc 01       	movw	r26, r24
    8262:	cb 01       	movw	r24, r22
    8264:	98 ab       	std	Y+48, r25	; 0x30
    8266:	8f a7       	std	Y+47, r24	; 0x2f
    8268:	8f a5       	ldd	r24, Y+47	; 0x2f
    826a:	98 a9       	ldd	r25, Y+48	; 0x30
    826c:	9c a7       	std	Y+44, r25	; 0x2c
    826e:	8b a7       	std	Y+43, r24	; 0x2b
    8270:	8b a5       	ldd	r24, Y+43	; 0x2b
    8272:	9c a5       	ldd	r25, Y+44	; 0x2c
    8274:	01 97       	sbiw	r24, 0x01	; 1
    8276:	f1 f7       	brne	.-4      	; 0x8274 <STEPPER_voidTurnOn+0x23a4>
    8278:	9c a7       	std	Y+44, r25	; 0x2c
    827a:	8b a7       	std	Y+43, r24	; 0x2b

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_LOW  );
    827c:	80 e0       	ldi	r24, 0x00	; 0
    827e:	62 e0       	ldi	r22, 0x02	; 2
    8280:	40 e0       	ldi	r20, 0x00	; 0
    8282:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_HIGH );
    8286:	80 e0       	ldi	r24, 0x00	; 0
    8288:	63 e0       	ldi	r22, 0x03	; 3
    828a:	41 e0       	ldi	r20, 0x01	; 1
    828c:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_LOW  );
    8290:	80 e0       	ldi	r24, 0x00	; 0
    8292:	64 e0       	ldi	r22, 0x04	; 4
    8294:	40 e0       	ldi	r20, 0x00	; 0
    8296:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_LOW  );
    829a:	80 e0       	ldi	r24, 0x00	; 0
    829c:	65 e0       	ldi	r22, 0x05	; 5
    829e:	40 e0       	ldi	r20, 0x00	; 0
    82a0:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    82a4:	fe 01       	movw	r30, r28
    82a6:	e9 5a       	subi	r30, 0xA9	; 169
    82a8:	fe 4f       	sbci	r31, 0xFE	; 254
    82aa:	80 81       	ld	r24, Z
    82ac:	88 2f       	mov	r24, r24
    82ae:	90 e0       	ldi	r25, 0x00	; 0
    82b0:	a0 e0       	ldi	r26, 0x00	; 0
    82b2:	b0 e0       	ldi	r27, 0x00	; 0
    82b4:	bc 01       	movw	r22, r24
    82b6:	cd 01       	movw	r24, r26
    82b8:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    82bc:	dc 01       	movw	r26, r24
    82be:	cb 01       	movw	r24, r22
    82c0:	8f a3       	std	Y+39, r24	; 0x27
    82c2:	98 a7       	std	Y+40, r25	; 0x28
    82c4:	a9 a7       	std	Y+41, r26	; 0x29
    82c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    82c8:	6f a1       	ldd	r22, Y+39	; 0x27
    82ca:	78 a5       	ldd	r23, Y+40	; 0x28
    82cc:	89 a5       	ldd	r24, Y+41	; 0x29
    82ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    82d0:	20 e0       	ldi	r18, 0x00	; 0
    82d2:	30 e0       	ldi	r19, 0x00	; 0
    82d4:	4a ef       	ldi	r20, 0xFA	; 250
    82d6:	54 e4       	ldi	r21, 0x44	; 68
    82d8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    82dc:	dc 01       	movw	r26, r24
    82de:	cb 01       	movw	r24, r22
    82e0:	8b a3       	std	Y+35, r24	; 0x23
    82e2:	9c a3       	std	Y+36, r25	; 0x24
    82e4:	ad a3       	std	Y+37, r26	; 0x25
    82e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    82e8:	6b a1       	ldd	r22, Y+35	; 0x23
    82ea:	7c a1       	ldd	r23, Y+36	; 0x24
    82ec:	8d a1       	ldd	r24, Y+37	; 0x25
    82ee:	9e a1       	ldd	r25, Y+38	; 0x26
    82f0:	20 e0       	ldi	r18, 0x00	; 0
    82f2:	30 e0       	ldi	r19, 0x00	; 0
    82f4:	40 e8       	ldi	r20, 0x80	; 128
    82f6:	5f e3       	ldi	r21, 0x3F	; 63
    82f8:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    82fc:	88 23       	and	r24, r24
    82fe:	2c f4       	brge	.+10     	; 0x830a <STEPPER_voidTurnOn+0x243a>
		__ticks = 1;
    8300:	81 e0       	ldi	r24, 0x01	; 1
    8302:	90 e0       	ldi	r25, 0x00	; 0
    8304:	9a a3       	std	Y+34, r25	; 0x22
    8306:	89 a3       	std	Y+33, r24	; 0x21
    8308:	3f c0       	rjmp	.+126    	; 0x8388 <STEPPER_voidTurnOn+0x24b8>
	else if (__tmp > 65535)
    830a:	6b a1       	ldd	r22, Y+35	; 0x23
    830c:	7c a1       	ldd	r23, Y+36	; 0x24
    830e:	8d a1       	ldd	r24, Y+37	; 0x25
    8310:	9e a1       	ldd	r25, Y+38	; 0x26
    8312:	20 e0       	ldi	r18, 0x00	; 0
    8314:	3f ef       	ldi	r19, 0xFF	; 255
    8316:	4f e7       	ldi	r20, 0x7F	; 127
    8318:	57 e4       	ldi	r21, 0x47	; 71
    831a:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    831e:	18 16       	cp	r1, r24
    8320:	4c f5       	brge	.+82     	; 0x8374 <STEPPER_voidTurnOn+0x24a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8322:	6f a1       	ldd	r22, Y+39	; 0x27
    8324:	78 a5       	ldd	r23, Y+40	; 0x28
    8326:	89 a5       	ldd	r24, Y+41	; 0x29
    8328:	9a a5       	ldd	r25, Y+42	; 0x2a
    832a:	20 e0       	ldi	r18, 0x00	; 0
    832c:	30 e0       	ldi	r19, 0x00	; 0
    832e:	40 e2       	ldi	r20, 0x20	; 32
    8330:	51 e4       	ldi	r21, 0x41	; 65
    8332:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    8336:	dc 01       	movw	r26, r24
    8338:	cb 01       	movw	r24, r22
    833a:	bc 01       	movw	r22, r24
    833c:	cd 01       	movw	r24, r26
    833e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8342:	dc 01       	movw	r26, r24
    8344:	cb 01       	movw	r24, r22
    8346:	9a a3       	std	Y+34, r25	; 0x22
    8348:	89 a3       	std	Y+33, r24	; 0x21
    834a:	0f c0       	rjmp	.+30     	; 0x836a <STEPPER_voidTurnOn+0x249a>
    834c:	88 ec       	ldi	r24, 0xC8	; 200
    834e:	90 e0       	ldi	r25, 0x00	; 0
    8350:	98 a3       	std	Y+32, r25	; 0x20
    8352:	8f 8f       	std	Y+31, r24	; 0x1f
    8354:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8356:	98 a1       	ldd	r25, Y+32	; 0x20
    8358:	01 97       	sbiw	r24, 0x01	; 1
    835a:	f1 f7       	brne	.-4      	; 0x8358 <STEPPER_voidTurnOn+0x2488>
    835c:	98 a3       	std	Y+32, r25	; 0x20
    835e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8360:	89 a1       	ldd	r24, Y+33	; 0x21
    8362:	9a a1       	ldd	r25, Y+34	; 0x22
    8364:	01 97       	sbiw	r24, 0x01	; 1
    8366:	9a a3       	std	Y+34, r25	; 0x22
    8368:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    836a:	89 a1       	ldd	r24, Y+33	; 0x21
    836c:	9a a1       	ldd	r25, Y+34	; 0x22
    836e:	00 97       	sbiw	r24, 0x00	; 0
    8370:	69 f7       	brne	.-38     	; 0x834c <STEPPER_voidTurnOn+0x247c>
    8372:	14 c0       	rjmp	.+40     	; 0x839c <STEPPER_voidTurnOn+0x24cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8374:	6b a1       	ldd	r22, Y+35	; 0x23
    8376:	7c a1       	ldd	r23, Y+36	; 0x24
    8378:	8d a1       	ldd	r24, Y+37	; 0x25
    837a:	9e a1       	ldd	r25, Y+38	; 0x26
    837c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8380:	dc 01       	movw	r26, r24
    8382:	cb 01       	movw	r24, r22
    8384:	9a a3       	std	Y+34, r25	; 0x22
    8386:	89 a3       	std	Y+33, r24	; 0x21
    8388:	89 a1       	ldd	r24, Y+33	; 0x21
    838a:	9a a1       	ldd	r25, Y+34	; 0x22
    838c:	9e 8f       	std	Y+30, r25	; 0x1e
    838e:	8d 8f       	std	Y+29, r24	; 0x1d
    8390:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8392:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8394:	01 97       	sbiw	r24, 0x01	; 1
    8396:	f1 f7       	brne	.-4      	; 0x8394 <STEPPER_voidTurnOn+0x24c4>
    8398:	9e 8f       	std	Y+30, r25	; 0x1e
    839a:	8d 8f       	std	Y+29, r24	; 0x1d

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_HIGH );
    839c:	80 e0       	ldi	r24, 0x00	; 0
    839e:	62 e0       	ldi	r22, 0x02	; 2
    83a0:	41 e0       	ldi	r20, 0x01	; 1
    83a2:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_HIGH );
    83a6:	80 e0       	ldi	r24, 0x00	; 0
    83a8:	63 e0       	ldi	r22, 0x03	; 3
    83aa:	41 e0       	ldi	r20, 0x01	; 1
    83ac:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_LOW  );
    83b0:	80 e0       	ldi	r24, 0x00	; 0
    83b2:	64 e0       	ldi	r22, 0x04	; 4
    83b4:	40 e0       	ldi	r20, 0x00	; 0
    83b6:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_LOW  );
    83ba:	80 e0       	ldi	r24, 0x00	; 0
    83bc:	65 e0       	ldi	r22, 0x05	; 5
    83be:	40 e0       	ldi	r20, 0x00	; 0
    83c0:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    83c4:	fe 01       	movw	r30, r28
    83c6:	e9 5a       	subi	r30, 0xA9	; 169
    83c8:	fe 4f       	sbci	r31, 0xFE	; 254
    83ca:	80 81       	ld	r24, Z
    83cc:	88 2f       	mov	r24, r24
    83ce:	90 e0       	ldi	r25, 0x00	; 0
    83d0:	a0 e0       	ldi	r26, 0x00	; 0
    83d2:	b0 e0       	ldi	r27, 0x00	; 0
    83d4:	bc 01       	movw	r22, r24
    83d6:	cd 01       	movw	r24, r26
    83d8:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    83dc:	dc 01       	movw	r26, r24
    83de:	cb 01       	movw	r24, r22
    83e0:	89 8f       	std	Y+25, r24	; 0x19
    83e2:	9a 8f       	std	Y+26, r25	; 0x1a
    83e4:	ab 8f       	std	Y+27, r26	; 0x1b
    83e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    83e8:	69 8d       	ldd	r22, Y+25	; 0x19
    83ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    83ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    83ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    83f0:	20 e0       	ldi	r18, 0x00	; 0
    83f2:	30 e0       	ldi	r19, 0x00	; 0
    83f4:	4a ef       	ldi	r20, 0xFA	; 250
    83f6:	54 e4       	ldi	r21, 0x44	; 68
    83f8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    83fc:	dc 01       	movw	r26, r24
    83fe:	cb 01       	movw	r24, r22
    8400:	8d 8b       	std	Y+21, r24	; 0x15
    8402:	9e 8b       	std	Y+22, r25	; 0x16
    8404:	af 8b       	std	Y+23, r26	; 0x17
    8406:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    8408:	6d 89       	ldd	r22, Y+21	; 0x15
    840a:	7e 89       	ldd	r23, Y+22	; 0x16
    840c:	8f 89       	ldd	r24, Y+23	; 0x17
    840e:	98 8d       	ldd	r25, Y+24	; 0x18
    8410:	20 e0       	ldi	r18, 0x00	; 0
    8412:	30 e0       	ldi	r19, 0x00	; 0
    8414:	40 e8       	ldi	r20, 0x80	; 128
    8416:	5f e3       	ldi	r21, 0x3F	; 63
    8418:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    841c:	88 23       	and	r24, r24
    841e:	2c f4       	brge	.+10     	; 0x842a <STEPPER_voidTurnOn+0x255a>
		__ticks = 1;
    8420:	81 e0       	ldi	r24, 0x01	; 1
    8422:	90 e0       	ldi	r25, 0x00	; 0
    8424:	9c 8b       	std	Y+20, r25	; 0x14
    8426:	8b 8b       	std	Y+19, r24	; 0x13
    8428:	3f c0       	rjmp	.+126    	; 0x84a8 <STEPPER_voidTurnOn+0x25d8>
	else if (__tmp > 65535)
    842a:	6d 89       	ldd	r22, Y+21	; 0x15
    842c:	7e 89       	ldd	r23, Y+22	; 0x16
    842e:	8f 89       	ldd	r24, Y+23	; 0x17
    8430:	98 8d       	ldd	r25, Y+24	; 0x18
    8432:	20 e0       	ldi	r18, 0x00	; 0
    8434:	3f ef       	ldi	r19, 0xFF	; 255
    8436:	4f e7       	ldi	r20, 0x7F	; 127
    8438:	57 e4       	ldi	r21, 0x47	; 71
    843a:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    843e:	18 16       	cp	r1, r24
    8440:	4c f5       	brge	.+82     	; 0x8494 <STEPPER_voidTurnOn+0x25c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8442:	69 8d       	ldd	r22, Y+25	; 0x19
    8444:	7a 8d       	ldd	r23, Y+26	; 0x1a
    8446:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8448:	9c 8d       	ldd	r25, Y+28	; 0x1c
    844a:	20 e0       	ldi	r18, 0x00	; 0
    844c:	30 e0       	ldi	r19, 0x00	; 0
    844e:	40 e2       	ldi	r20, 0x20	; 32
    8450:	51 e4       	ldi	r21, 0x41	; 65
    8452:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    8456:	dc 01       	movw	r26, r24
    8458:	cb 01       	movw	r24, r22
    845a:	bc 01       	movw	r22, r24
    845c:	cd 01       	movw	r24, r26
    845e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8462:	dc 01       	movw	r26, r24
    8464:	cb 01       	movw	r24, r22
    8466:	9c 8b       	std	Y+20, r25	; 0x14
    8468:	8b 8b       	std	Y+19, r24	; 0x13
    846a:	0f c0       	rjmp	.+30     	; 0x848a <STEPPER_voidTurnOn+0x25ba>
    846c:	88 ec       	ldi	r24, 0xC8	; 200
    846e:	90 e0       	ldi	r25, 0x00	; 0
    8470:	9a 8b       	std	Y+18, r25	; 0x12
    8472:	89 8b       	std	Y+17, r24	; 0x11
    8474:	89 89       	ldd	r24, Y+17	; 0x11
    8476:	9a 89       	ldd	r25, Y+18	; 0x12
    8478:	01 97       	sbiw	r24, 0x01	; 1
    847a:	f1 f7       	brne	.-4      	; 0x8478 <STEPPER_voidTurnOn+0x25a8>
    847c:	9a 8b       	std	Y+18, r25	; 0x12
    847e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8480:	8b 89       	ldd	r24, Y+19	; 0x13
    8482:	9c 89       	ldd	r25, Y+20	; 0x14
    8484:	01 97       	sbiw	r24, 0x01	; 1
    8486:	9c 8b       	std	Y+20, r25	; 0x14
    8488:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    848a:	8b 89       	ldd	r24, Y+19	; 0x13
    848c:	9c 89       	ldd	r25, Y+20	; 0x14
    848e:	00 97       	sbiw	r24, 0x00	; 0
    8490:	69 f7       	brne	.-38     	; 0x846c <STEPPER_voidTurnOn+0x259c>
    8492:	14 c0       	rjmp	.+40     	; 0x84bc <STEPPER_voidTurnOn+0x25ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8494:	6d 89       	ldd	r22, Y+21	; 0x15
    8496:	7e 89       	ldd	r23, Y+22	; 0x16
    8498:	8f 89       	ldd	r24, Y+23	; 0x17
    849a:	98 8d       	ldd	r25, Y+24	; 0x18
    849c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    84a0:	dc 01       	movw	r26, r24
    84a2:	cb 01       	movw	r24, r22
    84a4:	9c 8b       	std	Y+20, r25	; 0x14
    84a6:	8b 8b       	std	Y+19, r24	; 0x13
    84a8:	8b 89       	ldd	r24, Y+19	; 0x13
    84aa:	9c 89       	ldd	r25, Y+20	; 0x14
    84ac:	98 8b       	std	Y+16, r25	; 0x10
    84ae:	8f 87       	std	Y+15, r24	; 0x0f
    84b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    84b2:	98 89       	ldd	r25, Y+16	; 0x10
    84b4:	01 97       	sbiw	r24, 0x01	; 1
    84b6:	f1 f7       	brne	.-4      	; 0x84b4 <STEPPER_voidTurnOn+0x25e4>
    84b8:	98 8b       	std	Y+16, r25	; 0x10
    84ba:	8f 87       	std	Y+15, r24	; 0x0f

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_HIGH );
    84bc:	80 e0       	ldi	r24, 0x00	; 0
    84be:	62 e0       	ldi	r22, 0x02	; 2
    84c0:	41 e0       	ldi	r20, 0x01	; 1
    84c2:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_LOW  );
    84c6:	80 e0       	ldi	r24, 0x00	; 0
    84c8:	63 e0       	ldi	r22, 0x03	; 3
    84ca:	40 e0       	ldi	r20, 0x00	; 0
    84cc:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_LOW  );
    84d0:	80 e0       	ldi	r24, 0x00	; 0
    84d2:	64 e0       	ldi	r22, 0x04	; 4
    84d4:	40 e0       	ldi	r20, 0x00	; 0
    84d6:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_LOW  );
    84da:	80 e0       	ldi	r24, 0x00	; 0
    84dc:	65 e0       	ldi	r22, 0x05	; 5
    84de:	40 e0       	ldi	r20, 0x00	; 0
    84e0:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
				_delay_ms( Copy_u8Speed );
    84e4:	fe 01       	movw	r30, r28
    84e6:	e9 5a       	subi	r30, 0xA9	; 169
    84e8:	fe 4f       	sbci	r31, 0xFE	; 254
    84ea:	80 81       	ld	r24, Z
    84ec:	88 2f       	mov	r24, r24
    84ee:	90 e0       	ldi	r25, 0x00	; 0
    84f0:	a0 e0       	ldi	r26, 0x00	; 0
    84f2:	b0 e0       	ldi	r27, 0x00	; 0
    84f4:	bc 01       	movw	r22, r24
    84f6:	cd 01       	movw	r24, r26
    84f8:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__floatunsisf>
    84fc:	dc 01       	movw	r26, r24
    84fe:	cb 01       	movw	r24, r22
    8500:	8b 87       	std	Y+11, r24	; 0x0b
    8502:	9c 87       	std	Y+12, r25	; 0x0c
    8504:	ad 87       	std	Y+13, r26	; 0x0d
    8506:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8508:	6b 85       	ldd	r22, Y+11	; 0x0b
    850a:	7c 85       	ldd	r23, Y+12	; 0x0c
    850c:	8d 85       	ldd	r24, Y+13	; 0x0d
    850e:	9e 85       	ldd	r25, Y+14	; 0x0e
    8510:	20 e0       	ldi	r18, 0x00	; 0
    8512:	30 e0       	ldi	r19, 0x00	; 0
    8514:	4a ef       	ldi	r20, 0xFA	; 250
    8516:	54 e4       	ldi	r21, 0x44	; 68
    8518:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    851c:	dc 01       	movw	r26, r24
    851e:	cb 01       	movw	r24, r22
    8520:	8f 83       	std	Y+7, r24	; 0x07
    8522:	98 87       	std	Y+8, r25	; 0x08
    8524:	a9 87       	std	Y+9, r26	; 0x09
    8526:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    8528:	6f 81       	ldd	r22, Y+7	; 0x07
    852a:	78 85       	ldd	r23, Y+8	; 0x08
    852c:	89 85       	ldd	r24, Y+9	; 0x09
    852e:	9a 85       	ldd	r25, Y+10	; 0x0a
    8530:	20 e0       	ldi	r18, 0x00	; 0
    8532:	30 e0       	ldi	r19, 0x00	; 0
    8534:	40 e8       	ldi	r20, 0x80	; 128
    8536:	5f e3       	ldi	r21, 0x3F	; 63
    8538:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    853c:	88 23       	and	r24, r24
    853e:	2c f4       	brge	.+10     	; 0x854a <STEPPER_voidTurnOn+0x267a>
		__ticks = 1;
    8540:	81 e0       	ldi	r24, 0x01	; 1
    8542:	90 e0       	ldi	r25, 0x00	; 0
    8544:	9e 83       	std	Y+6, r25	; 0x06
    8546:	8d 83       	std	Y+5, r24	; 0x05
    8548:	3f c0       	rjmp	.+126    	; 0x85c8 <STEPPER_voidTurnOn+0x26f8>
	else if (__tmp > 65535)
    854a:	6f 81       	ldd	r22, Y+7	; 0x07
    854c:	78 85       	ldd	r23, Y+8	; 0x08
    854e:	89 85       	ldd	r24, Y+9	; 0x09
    8550:	9a 85       	ldd	r25, Y+10	; 0x0a
    8552:	20 e0       	ldi	r18, 0x00	; 0
    8554:	3f ef       	ldi	r19, 0xFF	; 255
    8556:	4f e7       	ldi	r20, 0x7F	; 127
    8558:	57 e4       	ldi	r21, 0x47	; 71
    855a:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    855e:	18 16       	cp	r1, r24
    8560:	4c f5       	brge	.+82     	; 0x85b4 <STEPPER_voidTurnOn+0x26e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8562:	6b 85       	ldd	r22, Y+11	; 0x0b
    8564:	7c 85       	ldd	r23, Y+12	; 0x0c
    8566:	8d 85       	ldd	r24, Y+13	; 0x0d
    8568:	9e 85       	ldd	r25, Y+14	; 0x0e
    856a:	20 e0       	ldi	r18, 0x00	; 0
    856c:	30 e0       	ldi	r19, 0x00	; 0
    856e:	40 e2       	ldi	r20, 0x20	; 32
    8570:	51 e4       	ldi	r21, 0x41	; 65
    8572:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    8576:	dc 01       	movw	r26, r24
    8578:	cb 01       	movw	r24, r22
    857a:	bc 01       	movw	r22, r24
    857c:	cd 01       	movw	r24, r26
    857e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8582:	dc 01       	movw	r26, r24
    8584:	cb 01       	movw	r24, r22
    8586:	9e 83       	std	Y+6, r25	; 0x06
    8588:	8d 83       	std	Y+5, r24	; 0x05
    858a:	0f c0       	rjmp	.+30     	; 0x85aa <STEPPER_voidTurnOn+0x26da>
    858c:	88 ec       	ldi	r24, 0xC8	; 200
    858e:	90 e0       	ldi	r25, 0x00	; 0
    8590:	9c 83       	std	Y+4, r25	; 0x04
    8592:	8b 83       	std	Y+3, r24	; 0x03
    8594:	8b 81       	ldd	r24, Y+3	; 0x03
    8596:	9c 81       	ldd	r25, Y+4	; 0x04
    8598:	01 97       	sbiw	r24, 0x01	; 1
    859a:	f1 f7       	brne	.-4      	; 0x8598 <STEPPER_voidTurnOn+0x26c8>
    859c:	9c 83       	std	Y+4, r25	; 0x04
    859e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    85a0:	8d 81       	ldd	r24, Y+5	; 0x05
    85a2:	9e 81       	ldd	r25, Y+6	; 0x06
    85a4:	01 97       	sbiw	r24, 0x01	; 1
    85a6:	9e 83       	std	Y+6, r25	; 0x06
    85a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    85aa:	8d 81       	ldd	r24, Y+5	; 0x05
    85ac:	9e 81       	ldd	r25, Y+6	; 0x06
    85ae:	00 97       	sbiw	r24, 0x00	; 0
    85b0:	69 f7       	brne	.-38     	; 0x858c <STEPPER_voidTurnOn+0x26bc>
    85b2:	14 c0       	rjmp	.+40     	; 0x85dc <STEPPER_voidTurnOn+0x270c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    85b4:	6f 81       	ldd	r22, Y+7	; 0x07
    85b6:	78 85       	ldd	r23, Y+8	; 0x08
    85b8:	89 85       	ldd	r24, Y+9	; 0x09
    85ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    85bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    85c0:	dc 01       	movw	r26, r24
    85c2:	cb 01       	movw	r24, r22
    85c4:	9e 83       	std	Y+6, r25	; 0x06
    85c6:	8d 83       	std	Y+5, r24	; 0x05
    85c8:	8d 81       	ldd	r24, Y+5	; 0x05
    85ca:	9e 81       	ldd	r25, Y+6	; 0x06
    85cc:	9a 83       	std	Y+2, r25	; 0x02
    85ce:	89 83       	std	Y+1, r24	; 0x01
    85d0:	89 81       	ldd	r24, Y+1	; 0x01
    85d2:	9a 81       	ldd	r25, Y+2	; 0x02
    85d4:	01 97       	sbiw	r24, 0x01	; 1
    85d6:	f1 f7       	brne	.-4      	; 0x85d4 <STEPPER_voidTurnOn+0x2704>
    85d8:	9a 83       	std	Y+2, r25	; 0x02
    85da:	89 83       	std	Y+1, r24	; 0x01

		else if( Copy_u8Direction == STEPPER_CLOCK_WISE )
		{


			for( Local_u32Iterator = 0 ; Local_u32Iterator < ( ( (u32)Copy_u16Degree * 512 ) / 45 ) / 8 ; Local_u32Iterator++  )
    85dc:	9e 01       	movw	r18, r28
    85de:	2f 5a       	subi	r18, 0xAF	; 175
    85e0:	3e 4f       	sbci	r19, 0xFE	; 254
    85e2:	fe 01       	movw	r30, r28
    85e4:	ef 5a       	subi	r30, 0xAF	; 175
    85e6:	fe 4f       	sbci	r31, 0xFE	; 254
    85e8:	80 81       	ld	r24, Z
    85ea:	91 81       	ldd	r25, Z+1	; 0x01
    85ec:	a2 81       	ldd	r26, Z+2	; 0x02
    85ee:	b3 81       	ldd	r27, Z+3	; 0x03
    85f0:	01 96       	adiw	r24, 0x01	; 1
    85f2:	a1 1d       	adc	r26, r1
    85f4:	b1 1d       	adc	r27, r1
    85f6:	f9 01       	movw	r30, r18
    85f8:	80 83       	st	Z, r24
    85fa:	91 83       	std	Z+1, r25	; 0x01
    85fc:	a2 83       	std	Z+2, r26	; 0x02
    85fe:	b3 83       	std	Z+3, r27	; 0x03
    8600:	fe 01       	movw	r30, r28
    8602:	e8 5a       	subi	r30, 0xA8	; 168
    8604:	fe 4f       	sbci	r31, 0xFE	; 254
    8606:	80 81       	ld	r24, Z
    8608:	91 81       	ldd	r25, Z+1	; 0x01
    860a:	cc 01       	movw	r24, r24
    860c:	a0 e0       	ldi	r26, 0x00	; 0
    860e:	b0 e0       	ldi	r27, 0x00	; 0
    8610:	07 2e       	mov	r0, r23
    8612:	79 e0       	ldi	r23, 0x09	; 9
    8614:	88 0f       	add	r24, r24
    8616:	99 1f       	adc	r25, r25
    8618:	aa 1f       	adc	r26, r26
    861a:	bb 1f       	adc	r27, r27
    861c:	7a 95       	dec	r23
    861e:	d1 f7       	brne	.-12     	; 0x8614 <STEPPER_voidTurnOn+0x2744>
    8620:	70 2d       	mov	r23, r0
    8622:	28 e6       	ldi	r18, 0x68	; 104
    8624:	31 e0       	ldi	r19, 0x01	; 1
    8626:	40 e0       	ldi	r20, 0x00	; 0
    8628:	50 e0       	ldi	r21, 0x00	; 0
    862a:	bc 01       	movw	r22, r24
    862c:	cd 01       	movw	r24, r26
    862e:	0e 94 17 4c 	call	0x982e	; 0x982e <__udivmodsi4>
    8632:	da 01       	movw	r26, r20
    8634:	c9 01       	movw	r24, r18
    8636:	9c 01       	movw	r18, r24
    8638:	ad 01       	movw	r20, r26
    863a:	fe 01       	movw	r30, r28
    863c:	ef 5a       	subi	r30, 0xAF	; 175
    863e:	fe 4f       	sbci	r31, 0xFE	; 254
    8640:	80 81       	ld	r24, Z
    8642:	91 81       	ldd	r25, Z+1	; 0x01
    8644:	a2 81       	ldd	r26, Z+2	; 0x02
    8646:	b3 81       	ldd	r27, Z+3	; 0x03
    8648:	82 17       	cp	r24, r18
    864a:	93 07       	cpc	r25, r19
    864c:	a4 07       	cpc	r26, r20
    864e:	b5 07       	cpc	r27, r21
    8650:	08 f4       	brcc	.+2      	; 0x8654 <STEPPER_voidTurnOn+0x2784>
    8652:	6e ca       	rjmp	.-2852   	; 0x7b30 <STEPPER_voidTurnOn+0x1c60>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_LOW  );
				_delay_ms( Copy_u8Speed );
			}
		}
	}
}
    8654:	c7 5a       	subi	r28, 0xA7	; 167
    8656:	de 4f       	sbci	r29, 0xFE	; 254
    8658:	0f b6       	in	r0, 0x3f	; 63
    865a:	f8 94       	cli
    865c:	de bf       	out	0x3e, r29	; 62
    865e:	0f be       	out	0x3f, r0	; 63
    8660:	cd bf       	out	0x3d, r28	; 61
    8662:	cf 91       	pop	r28
    8664:	df 91       	pop	r29
    8666:	1f 91       	pop	r17
    8668:	0f 91       	pop	r16
    866a:	08 95       	ret

0000866c <STEPPER_voidTurnOff>:


void STEPPER_voidTurnOff ( void )
{
    866c:	df 93       	push	r29
    866e:	cf 93       	push	r28
    8670:	cd b7       	in	r28, 0x3d	; 61
    8672:	de b7       	in	r29, 0x3e	; 62
	/* Set pin value Low (Stepper motor Turn off) */
	DIO_enumSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,STEPPER_PIN_LOW);
    8674:	80 e0       	ldi	r24, 0x00	; 0
    8676:	62 e0       	ldi	r22, 0x02	; 2
    8678:	40 e0       	ldi	r20, 0x00	; 0
    867a:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(STEPPER_PORT,STEPPER_PINK_PIN,STEPPER_PIN_LOW);
    867e:	80 e0       	ldi	r24, 0x00	; 0
    8680:	63 e0       	ldi	r22, 0x03	; 3
    8682:	40 e0       	ldi	r20, 0x00	; 0
    8684:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(STEPPER_PORT,STEPPER_ORANGE_PIN,STEPPER_PIN_LOW);
    8688:	80 e0       	ldi	r24, 0x00	; 0
    868a:	65 e0       	ldi	r22, 0x05	; 5
    868c:	40 e0       	ldi	r20, 0x00	; 0
    868e:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(STEPPER_PORT,STEPPER_YELLOW_PIN,STEPPER_PIN_LOW);
    8692:	80 e0       	ldi	r24, 0x00	; 0
    8694:	64 e0       	ldi	r22, 0x04	; 4
    8696:	40 e0       	ldi	r20, 0x00	; 0
    8698:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
}
    869c:	cf 91       	pop	r28
    869e:	df 91       	pop	r29
    86a0:	08 95       	ret

000086a2 <TIMER0_voidInit>:
static void (*Timer0_pvCallBackFuncCTCMode)(void) = NULL;
static void (*Timer0_pvCallBackFuncOverFlowMode)(void) = NULL;


void TIMER0_voidInit()
{
    86a2:	df 93       	push	r29
    86a4:	cf 93       	push	r28
    86a6:	cd b7       	in	r28, 0x3d	; 61
    86a8:	de b7       	in	r29, 0x3e	; 62


#elif TIMER0_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE

	/*Initialize Waveform Generation Mode as Fast PWM Mode*/
	SET_BIT(TCCR0_REG , TCCR0_WGM00) ;
    86aa:	a3 e5       	ldi	r26, 0x53	; 83
    86ac:	b0 e0       	ldi	r27, 0x00	; 0
    86ae:	e3 e5       	ldi	r30, 0x53	; 83
    86b0:	f0 e0       	ldi	r31, 0x00	; 0
    86b2:	80 81       	ld	r24, Z
    86b4:	80 64       	ori	r24, 0x40	; 64
    86b6:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG , TCCR0_WGM01) ;
    86b8:	a3 e5       	ldi	r26, 0x53	; 83
    86ba:	b0 e0       	ldi	r27, 0x00	; 0
    86bc:	e3 e5       	ldi	r30, 0x53	; 83
    86be:	f0 e0       	ldi	r31, 0x00	; 0
    86c0:	80 81       	ld	r24, Z
    86c2:	88 60       	ori	r24, 0x08	; 8
    86c4:	8c 93       	st	X, r24
	/*Set CTC Fast PWM MODE*/
#if TIMER0_CTC_PWM_MODE == TIMER_OC_DISCONNECTED
	CLR_BIT(TCCR0_REG , TCCR0_COM00) ;
	CLR_BIT(TCCR0_REG , TCCR0_COM01) ;
#elif TIMER0_CTC_PWM_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
	CLR_BIT(TCCR0_REG , TCCR0_COM00) ;
    86c6:	a3 e5       	ldi	r26, 0x53	; 83
    86c8:	b0 e0       	ldi	r27, 0x00	; 0
    86ca:	e3 e5       	ldi	r30, 0x53	; 83
    86cc:	f0 e0       	ldi	r31, 0x00	; 0
    86ce:	80 81       	ld	r24, Z
    86d0:	8f 7e       	andi	r24, 0xEF	; 239
    86d2:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG , TCCR0_COM01) ;
    86d4:	a3 e5       	ldi	r26, 0x53	; 83
    86d6:	b0 e0       	ldi	r27, 0x00	; 0
    86d8:	e3 e5       	ldi	r30, 0x53	; 83
    86da:	f0 e0       	ldi	r31, 0x00	; 0
    86dc:	80 81       	ld	r24, Z
    86de:	80 62       	ori	r24, 0x20	; 32
    86e0:	8c 93       	st	X, r24
#else
#error "Wrong TIMER0_CTC_PWM_MODE Config"
#endif

	/*Set the Required CTC Value*/
	OCR0_REG = TIMER0_CTC_VAL;
    86e2:	ec e5       	ldi	r30, 0x5C	; 92
    86e4:	f0 e0       	ldi	r31, 0x00	; 0
    86e6:	10 82       	st	Z, r1
	#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

#endif

	/*Set the Required Pre_scaler*/
	TCCR0_REG &= TIMER_PRESCALER_MASK ;
    86e8:	a3 e5       	ldi	r26, 0x53	; 83
    86ea:	b0 e0       	ldi	r27, 0x00	; 0
    86ec:	e3 e5       	ldi	r30, 0x53	; 83
    86ee:	f0 e0       	ldi	r31, 0x00	; 0
    86f0:	80 81       	ld	r24, Z
    86f2:	88 7f       	andi	r24, 0xF8	; 248
    86f4:	8c 93       	st	X, r24
	TCCR0_REG |= TIMER0_PRESCALER ;
    86f6:	a3 e5       	ldi	r26, 0x53	; 83
    86f8:	b0 e0       	ldi	r27, 0x00	; 0
    86fa:	e3 e5       	ldi	r30, 0x53	; 83
    86fc:	f0 e0       	ldi	r31, 0x00	; 0
    86fe:	80 81       	ld	r24, Z
    8700:	82 60       	ori	r24, 0x02	; 2
    8702:	8c 93       	st	X, r24
}
    8704:	cf 91       	pop	r28
    8706:	df 91       	pop	r29
    8708:	08 95       	ret

0000870a <TIMER0_voidSetPreloadValue>:


void TIMER0_voidSetPreloadValue (u8 Copy_u8PreloadValue)
{
    870a:	df 93       	push	r29
    870c:	cf 93       	push	r28
    870e:	0f 92       	push	r0
    8710:	cd b7       	in	r28, 0x3d	; 61
    8712:	de b7       	in	r29, 0x3e	; 62
    8714:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_REG = Copy_u8PreloadValue;
    8716:	e2 e5       	ldi	r30, 0x52	; 82
    8718:	f0 e0       	ldi	r31, 0x00	; 0
    871a:	89 81       	ldd	r24, Y+1	; 0x01
    871c:	80 83       	st	Z, r24
}
    871e:	0f 90       	pop	r0
    8720:	cf 91       	pop	r28
    8722:	df 91       	pop	r29
    8724:	08 95       	ret

00008726 <TIMER0_voidSetCompMatchValue>:

void TIMER0_voidSetCompMatchValue(u8 Copy_u8CTCValue)
{
    8726:	df 93       	push	r29
    8728:	cf 93       	push	r28
    872a:	0f 92       	push	r0
    872c:	cd b7       	in	r28, 0x3d	; 61
    872e:	de b7       	in	r29, 0x3e	; 62
    8730:	89 83       	std	Y+1, r24	; 0x01

	OCR0_REG = Copy_u8CTCValue;
    8732:	ec e5       	ldi	r30, 0x5C	; 92
    8734:	f0 e0       	ldi	r31, 0x00	; 0
    8736:	89 81       	ldd	r24, Y+1	; 0x01
    8738:	80 83       	st	Z, r24

}
    873a:	0f 90       	pop	r0
    873c:	cf 91       	pop	r28
    873e:	df 91       	pop	r29
    8740:	08 95       	ret

00008742 <TIMER0_u8SetCallBackCTCMode>:


u8 TIMER0_u8SetCallBackCTCMode(void (*Copy_pvCallBackFunc)(void))
{
    8742:	df 93       	push	r29
    8744:	cf 93       	push	r28
    8746:	00 d0       	rcall	.+0      	; 0x8748 <TIMER0_u8SetCallBackCTCMode+0x6>
    8748:	0f 92       	push	r0
    874a:	cd b7       	in	r28, 0x3d	; 61
    874c:	de b7       	in	r29, 0x3e	; 62
    874e:	9b 83       	std	Y+3, r25	; 0x03
    8750:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    8752:	81 e0       	ldi	r24, 0x01	; 1
    8754:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    8756:	8a 81       	ldd	r24, Y+2	; 0x02
    8758:	9b 81       	ldd	r25, Y+3	; 0x03
    875a:	00 97       	sbiw	r24, 0x00	; 0
    875c:	39 f0       	breq	.+14     	; 0x876c <TIMER0_u8SetCallBackCTCMode+0x2a>
	{
		Timer0_pvCallBackFuncCTCMode = Copy_pvCallBackFunc;
    875e:	8a 81       	ldd	r24, Y+2	; 0x02
    8760:	9b 81       	ldd	r25, Y+3	; 0x03
    8762:	90 93 52 02 	sts	0x0252, r25
    8766:	80 93 51 02 	sts	0x0251, r24
    876a:	01 c0       	rjmp	.+2      	; 0x876e <TIMER0_u8SetCallBackCTCMode+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    876c:	19 82       	std	Y+1, r1	; 0x01

	}

	return Local_u8ErrorState;
    876e:	89 81       	ldd	r24, Y+1	; 0x01
}
    8770:	0f 90       	pop	r0
    8772:	0f 90       	pop	r0
    8774:	0f 90       	pop	r0
    8776:	cf 91       	pop	r28
    8778:	df 91       	pop	r29
    877a:	08 95       	ret

0000877c <__vector_10>:


/*TIMER0 CTC Mode ISR*/
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    877c:	1f 92       	push	r1
    877e:	0f 92       	push	r0
    8780:	0f b6       	in	r0, 0x3f	; 63
    8782:	0f 92       	push	r0
    8784:	11 24       	eor	r1, r1
    8786:	2f 93       	push	r18
    8788:	3f 93       	push	r19
    878a:	4f 93       	push	r20
    878c:	5f 93       	push	r21
    878e:	6f 93       	push	r22
    8790:	7f 93       	push	r23
    8792:	8f 93       	push	r24
    8794:	9f 93       	push	r25
    8796:	af 93       	push	r26
    8798:	bf 93       	push	r27
    879a:	ef 93       	push	r30
    879c:	ff 93       	push	r31
    879e:	df 93       	push	r29
    87a0:	cf 93       	push	r28
    87a2:	cd b7       	in	r28, 0x3d	; 61
    87a4:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_pvCallBackFuncCTCMode != NULL)
    87a6:	80 91 51 02 	lds	r24, 0x0251
    87aa:	90 91 52 02 	lds	r25, 0x0252
    87ae:	00 97       	sbiw	r24, 0x00	; 0
    87b0:	29 f0       	breq	.+10     	; 0x87bc <__vector_10+0x40>
	{
		Timer0_pvCallBackFuncCTCMode();
    87b2:	e0 91 51 02 	lds	r30, 0x0251
    87b6:	f0 91 52 02 	lds	r31, 0x0252
    87ba:	09 95       	icall
	}
}
    87bc:	cf 91       	pop	r28
    87be:	df 91       	pop	r29
    87c0:	ff 91       	pop	r31
    87c2:	ef 91       	pop	r30
    87c4:	bf 91       	pop	r27
    87c6:	af 91       	pop	r26
    87c8:	9f 91       	pop	r25
    87ca:	8f 91       	pop	r24
    87cc:	7f 91       	pop	r23
    87ce:	6f 91       	pop	r22
    87d0:	5f 91       	pop	r21
    87d2:	4f 91       	pop	r20
    87d4:	3f 91       	pop	r19
    87d6:	2f 91       	pop	r18
    87d8:	0f 90       	pop	r0
    87da:	0f be       	out	0x3f, r0	; 63
    87dc:	0f 90       	pop	r0
    87de:	1f 90       	pop	r1
    87e0:	18 95       	reti

000087e2 <TIMER0_u8SetCallBackOverFlowMode>:



u8 TIMER0_u8SetCallBackOverFlowMode(void (*Copy_pvCallBackFunc)(void))
{
    87e2:	df 93       	push	r29
    87e4:	cf 93       	push	r28
    87e6:	00 d0       	rcall	.+0      	; 0x87e8 <TIMER0_u8SetCallBackOverFlowMode+0x6>
    87e8:	0f 92       	push	r0
    87ea:	cd b7       	in	r28, 0x3d	; 61
    87ec:	de b7       	in	r29, 0x3e	; 62
    87ee:	9b 83       	std	Y+3, r25	; 0x03
    87f0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    87f2:	81 e0       	ldi	r24, 0x01	; 1
    87f4:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    87f6:	8a 81       	ldd	r24, Y+2	; 0x02
    87f8:	9b 81       	ldd	r25, Y+3	; 0x03
    87fa:	00 97       	sbiw	r24, 0x00	; 0
    87fc:	39 f0       	breq	.+14     	; 0x880c <TIMER0_u8SetCallBackOverFlowMode+0x2a>
	{
		Timer0_pvCallBackFuncOverFlowMode = Copy_pvCallBackFunc;
    87fe:	8a 81       	ldd	r24, Y+2	; 0x02
    8800:	9b 81       	ldd	r25, Y+3	; 0x03
    8802:	90 93 54 02 	sts	0x0254, r25
    8806:	80 93 53 02 	sts	0x0253, r24
    880a:	01 c0       	rjmp	.+2      	; 0x880e <TIMER0_u8SetCallBackOverFlowMode+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    880c:	19 82       	std	Y+1, r1	; 0x01

	}

	return Local_u8ErrorState;
    880e:	89 81       	ldd	r24, Y+1	; 0x01
}
    8810:	0f 90       	pop	r0
    8812:	0f 90       	pop	r0
    8814:	0f 90       	pop	r0
    8816:	cf 91       	pop	r28
    8818:	df 91       	pop	r29
    881a:	08 95       	ret

0000881c <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    881c:	1f 92       	push	r1
    881e:	0f 92       	push	r0
    8820:	0f b6       	in	r0, 0x3f	; 63
    8822:	0f 92       	push	r0
    8824:	11 24       	eor	r1, r1
    8826:	2f 93       	push	r18
    8828:	3f 93       	push	r19
    882a:	4f 93       	push	r20
    882c:	5f 93       	push	r21
    882e:	6f 93       	push	r22
    8830:	7f 93       	push	r23
    8832:	8f 93       	push	r24
    8834:	9f 93       	push	r25
    8836:	af 93       	push	r26
    8838:	bf 93       	push	r27
    883a:	ef 93       	push	r30
    883c:	ff 93       	push	r31
    883e:	df 93       	push	r29
    8840:	cf 93       	push	r28
    8842:	cd b7       	in	r28, 0x3d	; 61
    8844:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_pvCallBackFuncOverFlowMode != NULL)
    8846:	80 91 53 02 	lds	r24, 0x0253
    884a:	90 91 54 02 	lds	r25, 0x0254
    884e:	00 97       	sbiw	r24, 0x00	; 0
    8850:	29 f0       	breq	.+10     	; 0x885c <__vector_11+0x40>
	{
		Timer0_pvCallBackFuncOverFlowMode();
    8852:	e0 91 53 02 	lds	r30, 0x0253
    8856:	f0 91 54 02 	lds	r31, 0x0254
    885a:	09 95       	icall
	}
}
    885c:	cf 91       	pop	r28
    885e:	df 91       	pop	r29
    8860:	ff 91       	pop	r31
    8862:	ef 91       	pop	r30
    8864:	bf 91       	pop	r27
    8866:	af 91       	pop	r26
    8868:	9f 91       	pop	r25
    886a:	8f 91       	pop	r24
    886c:	7f 91       	pop	r23
    886e:	6f 91       	pop	r22
    8870:	5f 91       	pop	r21
    8872:	4f 91       	pop	r20
    8874:	3f 91       	pop	r19
    8876:	2f 91       	pop	r18
    8878:	0f 90       	pop	r0
    887a:	0f be       	out	0x3f, r0	; 63
    887c:	0f 90       	pop	r0
    887e:	1f 90       	pop	r1
    8880:	18 95       	reti

00008882 <TIMER1_voidInit>:
#include "Timer1_interface.h"
#include "Timer1_private.h"  				//Hint: must include the file private before file configuration
#include "Timer1_register.h"

void TIMER1_voidInit(void)
{
    8882:	df 93       	push	r29
    8884:	cf 93       	push	r28
    8886:	cd b7       	in	r28, 0x3d	; 61
    8888:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1A_REG,TCCR1A_WGM10);
	SET_BIT(TCCR1A_REG,TCCR1A_WGM11);
	SET_BIT(TCCR1B_REG,TCCR1B_WGM12);
	SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
	CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
    888a:	af e4       	ldi	r26, 0x4F	; 79
    888c:	b0 e0       	ldi	r27, 0x00	; 0
    888e:	ef e4       	ldi	r30, 0x4F	; 79
    8890:	f0 e0       	ldi	r31, 0x00	; 0
    8892:	80 81       	ld	r24, Z
    8894:	8e 7f       	andi	r24, 0xFE	; 254
    8896:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,TCCR1A_WGM11);
    8898:	af e4       	ldi	r26, 0x4F	; 79
    889a:	b0 e0       	ldi	r27, 0x00	; 0
    889c:	ef e4       	ldi	r30, 0x4F	; 79
    889e:	f0 e0       	ldi	r31, 0x00	; 0
    88a0:	80 81       	ld	r24, Z
    88a2:	82 60       	ori	r24, 0x02	; 2
    88a4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,TCCR1B_WGM12);
    88a6:	ae e4       	ldi	r26, 0x4E	; 78
    88a8:	b0 e0       	ldi	r27, 0x00	; 0
    88aa:	ee e4       	ldi	r30, 0x4E	; 78
    88ac:	f0 e0       	ldi	r31, 0x00	; 0
    88ae:	80 81       	ld	r24, Z
    88b0:	88 60       	ori	r24, 0x08	; 8
    88b2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
    88b4:	ae e4       	ldi	r26, 0x4E	; 78
    88b6:	b0 e0       	ldi	r27, 0x00	; 0
    88b8:	ee e4       	ldi	r30, 0x4E	; 78
    88ba:	f0 e0       	ldi	r31, 0x00	; 0
    88bc:	80 81       	ld	r24, Z
    88be:	80 61       	ori	r24, 0x10	; 16
    88c0:	8c 93       	st	X, r24
#else
#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
#endif

	/*Set the require CTC Values*/
	OCR1A_REG = TIMER1_CTCA_VAL ;
    88c2:	ea e4       	ldi	r30, 0x4A	; 74
    88c4:	f0 e0       	ldi	r31, 0x00	; 0
    88c6:	11 82       	std	Z+1, r1	; 0x01
    88c8:	10 82       	st	Z, r1
	OCR1B_REG = TIMER1_CTCB_VAL ;
    88ca:	e8 e4       	ldi	r30, 0x48	; 72
    88cc:	f0 e0       	ldi	r31, 0x00	; 0
    88ce:	11 82       	std	Z+1, r1	; 0x01
    88d0:	10 82       	st	Z, r1


	/*Set ICR1*/
#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
	ICR1_REG = TIMER1_ICR1_VAL ;
    88d2:	e6 e4       	ldi	r30, 0x46	; 70
    88d4:	f0 e0       	ldi	r31, 0x00	; 0
    88d6:	80 e2       	ldi	r24, 0x20	; 32
    88d8:	9e e4       	ldi	r25, 0x4E	; 78
    88da:	91 83       	std	Z+1, r25	; 0x01
    88dc:	80 83       	st	Z, r24
	/*Set OCR1A mode*/
#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
	CLR_BIT(TCCR1A_REG , TCCR1A_COM1A0) ;
	CLR_BIT(TCCR1A_REG , TCCR1A_COM1A1) ;
#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
	CLR_BIT(TCCR1A_REG , TCCR1A_COM1A0) ;
    88de:	af e4       	ldi	r26, 0x4F	; 79
    88e0:	b0 e0       	ldi	r27, 0x00	; 0
    88e2:	ef e4       	ldi	r30, 0x4F	; 79
    88e4:	f0 e0       	ldi	r31, 0x00	; 0
    88e6:	80 81       	ld	r24, Z
    88e8:	8f 7b       	andi	r24, 0xBF	; 191
    88ea:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG , TCCR1A_COM1A1) ;
    88ec:	af e4       	ldi	r26, 0x4F	; 79
    88ee:	b0 e0       	ldi	r27, 0x00	; 0
    88f0:	ef e4       	ldi	r30, 0x4F	; 79
    88f2:	f0 e0       	ldi	r31, 0x00	; 0
    88f4:	80 81       	ld	r24, Z
    88f6:	80 68       	ori	r24, 0x80	; 128
    88f8:	8c 93       	st	X, r24
	/*Set OCR1B mode*/
#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
	CLR_BIT(TCCR1A_REG , TCCR1A_COM1B0) ;
	CLR_BIT(TCCR1A_REG , TCCR1A_COM1B1) ;
#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
	CLR_BIT(TCCR1A_REG , TCCR1A_COM1B0) ;
    88fa:	af e4       	ldi	r26, 0x4F	; 79
    88fc:	b0 e0       	ldi	r27, 0x00	; 0
    88fe:	ef e4       	ldi	r30, 0x4F	; 79
    8900:	f0 e0       	ldi	r31, 0x00	; 0
    8902:	80 81       	ld	r24, Z
    8904:	8f 7e       	andi	r24, 0xEF	; 239
    8906:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG , TCCR1A_COM1B1) ;
    8908:	af e4       	ldi	r26, 0x4F	; 79
    890a:	b0 e0       	ldi	r27, 0x00	; 0
    890c:	ef e4       	ldi	r30, 0x4F	; 79
    890e:	f0 e0       	ldi	r31, 0x00	; 0
    8910:	80 81       	ld	r24, Z
    8912:	80 62       	ori	r24, 0x20	; 32
    8914:	8c 93       	st	X, r24
#error "Wrong TIMER1_OCR1B_MODE Config"
#endif

	/*Timer1 PWM Interrupt Enable*/
#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
	CLR_BIT(TIMSK_REG , TIMSK_TOIE1) ;
    8916:	a9 e5       	ldi	r26, 0x59	; 89
    8918:	b0 e0       	ldi	r27, 0x00	; 0
    891a:	e9 e5       	ldi	r30, 0x59	; 89
    891c:	f0 e0       	ldi	r31, 0x00	; 0
    891e:	80 81       	ld	r24, Z
    8920:	8b 7f       	andi	r24, 0xFB	; 251
    8922:	8c 93       	st	X, r24
#else
#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
#endif

#if TIMER1_CTCA_INTERRUPT == DISABLE
	CLR_BIT(TIMSK_REG , TIMSK_OCIE1A) ;
    8924:	a9 e5       	ldi	r26, 0x59	; 89
    8926:	b0 e0       	ldi	r27, 0x00	; 0
    8928:	e9 e5       	ldi	r30, 0x59	; 89
    892a:	f0 e0       	ldi	r31, 0x00	; 0
    892c:	80 81       	ld	r24, Z
    892e:	8f 7e       	andi	r24, 0xEF	; 239
    8930:	8c 93       	st	X, r24
#else
#error "Wrong TIMER1_CTCA_INTERRUPT Config"
#endif

#if TIMER1_CTCB_INTERRUPT == DISABLE
	CLR_BIT(TIMSK_REG , TIMSK_OCIE1B) ;
    8932:	a9 e5       	ldi	r26, 0x59	; 89
    8934:	b0 e0       	ldi	r27, 0x00	; 0
    8936:	e9 e5       	ldi	r30, 0x59	; 89
    8938:	f0 e0       	ldi	r31, 0x00	; 0
    893a:	80 81       	ld	r24, Z
    893c:	87 7f       	andi	r24, 0xF7	; 247
    893e:	8c 93       	st	X, r24
#else
#error "Wrong TIMER1_CTCB_INTERRUPT Config"
#endif

#if TIMER1_ICR_INTERRUPT == DISABLE
	CLR_BIT(TIMSK_REG , TIMSK_TICIE1) ;
    8940:	a9 e5       	ldi	r26, 0x59	; 89
    8942:	b0 e0       	ldi	r27, 0x00	; 0
    8944:	e9 e5       	ldi	r30, 0x59	; 89
    8946:	f0 e0       	ldi	r31, 0x00	; 0
    8948:	80 81       	ld	r24, Z
    894a:	8f 7d       	andi	r24, 0xDF	; 223
    894c:	8c 93       	st	X, r24
#else
#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
#endif

	/*Set the Required Pre_scaler*/
	TCCR1B_REG &=TIMER_PRESCALER_MASK;
    894e:	ae e4       	ldi	r26, 0x4E	; 78
    8950:	b0 e0       	ldi	r27, 0x00	; 0
    8952:	ee e4       	ldi	r30, 0x4E	; 78
    8954:	f0 e0       	ldi	r31, 0x00	; 0
    8956:	80 81       	ld	r24, Z
    8958:	88 7f       	andi	r24, 0xF8	; 248
    895a:	8c 93       	st	X, r24
	TCCR1B_REG |=TIMER1_PRESCALER;
    895c:	ae e4       	ldi	r26, 0x4E	; 78
    895e:	b0 e0       	ldi	r27, 0x00	; 0
    8960:	ee e4       	ldi	r30, 0x4E	; 78
    8962:	f0 e0       	ldi	r31, 0x00	; 0
    8964:	80 81       	ld	r24, Z
    8966:	82 60       	ori	r24, 0x02	; 2
    8968:	8c 93       	st	X, r24

}
    896a:	cf 91       	pop	r28
    896c:	df 91       	pop	r29
    896e:	08 95       	ret

00008970 <TIMER1_voidSetPreloadValue>:
void TIMER1_voidSetPreloadValue (u16 Copy_u16PreloadValue)
{
    8970:	df 93       	push	r29
    8972:	cf 93       	push	r28
    8974:	00 d0       	rcall	.+0      	; 0x8976 <TIMER1_voidSetPreloadValue+0x6>
    8976:	cd b7       	in	r28, 0x3d	; 61
    8978:	de b7       	in	r29, 0x3e	; 62
    897a:	9a 83       	std	Y+2, r25	; 0x02
    897c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_REG = Copy_u16PreloadValue;
    897e:	ec e4       	ldi	r30, 0x4C	; 76
    8980:	f0 e0       	ldi	r31, 0x00	; 0
    8982:	89 81       	ldd	r24, Y+1	; 0x01
    8984:	9a 81       	ldd	r25, Y+2	; 0x02
    8986:	91 83       	std	Z+1, r25	; 0x01
    8988:	80 83       	st	Z, r24
}
    898a:	0f 90       	pop	r0
    898c:	0f 90       	pop	r0
    898e:	cf 91       	pop	r28
    8990:	df 91       	pop	r29
    8992:	08 95       	ret

00008994 <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1 (u16 Copy_u16ICR1)
{
    8994:	df 93       	push	r29
    8996:	cf 93       	push	r28
    8998:	00 d0       	rcall	.+0      	; 0x899a <TIMER1_voidSetICR1+0x6>
    899a:	cd b7       	in	r28, 0x3d	; 61
    899c:	de b7       	in	r29, 0x3e	; 62
    899e:	9a 83       	std	Y+2, r25	; 0x02
    89a0:	89 83       	std	Y+1, r24	; 0x01
	ICR1_REG = Copy_u16ICR1;
    89a2:	e6 e4       	ldi	r30, 0x46	; 70
    89a4:	f0 e0       	ldi	r31, 0x00	; 0
    89a6:	89 81       	ldd	r24, Y+1	; 0x01
    89a8:	9a 81       	ldd	r25, Y+2	; 0x02
    89aa:	91 83       	std	Z+1, r25	; 0x01
    89ac:	80 83       	st	Z, r24
}
    89ae:	0f 90       	pop	r0
    89b0:	0f 90       	pop	r0
    89b2:	cf 91       	pop	r28
    89b4:	df 91       	pop	r29
    89b6:	08 95       	ret

000089b8 <TIMER1_voidSetValueCompMatchChannel_A>:


void TIMER1_voidSetValueCompMatchChannel_A (u16 Copy_u16CTCA)
{
    89b8:	df 93       	push	r29
    89ba:	cf 93       	push	r28
    89bc:	00 d0       	rcall	.+0      	; 0x89be <TIMER1_voidSetValueCompMatchChannel_A+0x6>
    89be:	cd b7       	in	r28, 0x3d	; 61
    89c0:	de b7       	in	r29, 0x3e	; 62
    89c2:	9a 83       	std	Y+2, r25	; 0x02
    89c4:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_REG = Copy_u16CTCA;
    89c6:	ea e4       	ldi	r30, 0x4A	; 74
    89c8:	f0 e0       	ldi	r31, 0x00	; 0
    89ca:	89 81       	ldd	r24, Y+1	; 0x01
    89cc:	9a 81       	ldd	r25, Y+2	; 0x02
    89ce:	91 83       	std	Z+1, r25	; 0x01
    89d0:	80 83       	st	Z, r24
}
    89d2:	0f 90       	pop	r0
    89d4:	0f 90       	pop	r0
    89d6:	cf 91       	pop	r28
    89d8:	df 91       	pop	r29
    89da:	08 95       	ret

000089dc <TIMER1_voidSetValueCompMatchChannel_B>:

void TIMER1_voidSetValueCompMatchChannel_B (u16 Copy_u16CTCB)
{
    89dc:	df 93       	push	r29
    89de:	cf 93       	push	r28
    89e0:	00 d0       	rcall	.+0      	; 0x89e2 <TIMER1_voidSetValueCompMatchChannel_B+0x6>
    89e2:	cd b7       	in	r28, 0x3d	; 61
    89e4:	de b7       	in	r29, 0x3e	; 62
    89e6:	9a 83       	std	Y+2, r25	; 0x02
    89e8:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_REG = Copy_u16CTCB;
    89ea:	e8 e4       	ldi	r30, 0x48	; 72
    89ec:	f0 e0       	ldi	r31, 0x00	; 0
    89ee:	89 81       	ldd	r24, Y+1	; 0x01
    89f0:	9a 81       	ldd	r25, Y+2	; 0x02
    89f2:	91 83       	std	Z+1, r25	; 0x01
    89f4:	80 83       	st	Z, r24
}
    89f6:	0f 90       	pop	r0
    89f8:	0f 90       	pop	r0
    89fa:	cf 91       	pop	r28
    89fc:	df 91       	pop	r29
    89fe:	08 95       	ret

00008a00 <main>:

u16 ConvertArrayToValue(u8 Copy_u8Number[], u8 Local_u8SizeNumber);


int main ()
{
    8a00:	0f 93       	push	r16
    8a02:	1f 93       	push	r17
    8a04:	df 93       	push	r29
    8a06:	cf 93       	push	r28
    8a08:	cd b7       	in	r28, 0x3d	; 61
    8a0a:	de b7       	in	r29, 0x3e	; 62
    8a0c:	cf 59       	subi	r28, 0x9F	; 159
    8a0e:	d0 40       	sbci	r29, 0x00	; 0
    8a10:	0f b6       	in	r0, 0x3f	; 63
    8a12:	f8 94       	cli
    8a14:	de bf       	out	0x3e, r29	; 62
    8a16:	0f be       	out	0x3f, r0	; 63
    8a18:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8CounterLoginID = 0 ;				//counter for first array stored ID login
    8a1a:	fe 01       	movw	r30, r28
    8a1c:	e9 59       	subi	r30, 0x99	; 153
    8a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    8a20:	10 82       	st	Z, r1
	u8 Local_u8CounterLoginPass = 0 ;			//counter for second array stored  pass login
    8a22:	fe 01       	movw	r30, r28
    8a24:	ea 59       	subi	r30, 0x9A	; 154
    8a26:	ff 4f       	sbci	r31, 0xFF	; 255
    8a28:	10 82       	st	Z, r1
	u8 Local_u8CounterCheckLoginID = 0 ;		//counter for check first array stored ID login
    8a2a:	fe 01       	movw	r30, r28
    8a2c:	eb 59       	subi	r30, 0x9B	; 155
    8a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    8a30:	10 82       	st	Z, r1
	u8 Local_u8CounterCheckLoginPass = 0 ;		//counter for check second array stored pass login
    8a32:	fe 01       	movw	r30, r28
    8a34:	ec 59       	subi	r30, 0x9C	; 156
    8a36:	ff 4f       	sbci	r31, 0xFF	; 255
    8a38:	10 82       	st	Z, r1
	u8 Local_u8KeypadValue ;					//Local return check valued



	/*objects for the two LED detector the system (Green -> Start & Red -> Closed)*/
	LED_T LED_RedClosedSys 		={LED_PORTD , LED_PIN1 ,LED_SOURCE };
    8a3a:	ce 01       	movw	r24, r28
    8a3c:	88 57       	subi	r24, 0x78	; 120
    8a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    8a40:	cf 56       	subi	r28, 0x6F	; 111
    8a42:	df 4f       	sbci	r29, 0xFF	; 255
    8a44:	99 83       	std	Y+1, r25	; 0x01
    8a46:	88 83       	st	Y, r24
    8a48:	c1 59       	subi	r28, 0x91	; 145
    8a4a:	d0 40       	sbci	r29, 0x00	; 0
    8a4c:	88 e3       	ldi	r24, 0x38	; 56
    8a4e:	92 e0       	ldi	r25, 0x02	; 2
    8a50:	cd 56       	subi	r28, 0x6D	; 109
    8a52:	df 4f       	sbci	r29, 0xFF	; 255
    8a54:	99 83       	std	Y+1, r25	; 0x01
    8a56:	88 83       	st	Y, r24
    8a58:	c3 59       	subi	r28, 0x93	; 147
    8a5a:	d0 40       	sbci	r29, 0x00	; 0
    8a5c:	93 e0       	ldi	r25, 0x03	; 3
    8a5e:	cb 56       	subi	r28, 0x6B	; 107
    8a60:	df 4f       	sbci	r29, 0xFF	; 255
    8a62:	98 83       	st	Y, r25
    8a64:	c5 59       	subi	r28, 0x95	; 149
    8a66:	d0 40       	sbci	r29, 0x00	; 0
    8a68:	cd 56       	subi	r28, 0x6D	; 109
    8a6a:	df 4f       	sbci	r29, 0xFF	; 255
    8a6c:	e8 81       	ld	r30, Y
    8a6e:	f9 81       	ldd	r31, Y+1	; 0x01
    8a70:	c3 59       	subi	r28, 0x93	; 147
    8a72:	d0 40       	sbci	r29, 0x00	; 0
    8a74:	00 80       	ld	r0, Z
    8a76:	cd 56       	subi	r28, 0x6D	; 109
    8a78:	df 4f       	sbci	r29, 0xFF	; 255
    8a7a:	88 81       	ld	r24, Y
    8a7c:	99 81       	ldd	r25, Y+1	; 0x01
    8a7e:	c3 59       	subi	r28, 0x93	; 147
    8a80:	d0 40       	sbci	r29, 0x00	; 0
    8a82:	01 96       	adiw	r24, 0x01	; 1
    8a84:	cd 56       	subi	r28, 0x6D	; 109
    8a86:	df 4f       	sbci	r29, 0xFF	; 255
    8a88:	99 83       	std	Y+1, r25	; 0x01
    8a8a:	88 83       	st	Y, r24
    8a8c:	c3 59       	subi	r28, 0x93	; 147
    8a8e:	d0 40       	sbci	r29, 0x00	; 0
    8a90:	cf 56       	subi	r28, 0x6F	; 111
    8a92:	df 4f       	sbci	r29, 0xFF	; 255
    8a94:	e8 81       	ld	r30, Y
    8a96:	f9 81       	ldd	r31, Y+1	; 0x01
    8a98:	c1 59       	subi	r28, 0x91	; 145
    8a9a:	d0 40       	sbci	r29, 0x00	; 0
    8a9c:	00 82       	st	Z, r0
    8a9e:	cf 56       	subi	r28, 0x6F	; 111
    8aa0:	df 4f       	sbci	r29, 0xFF	; 255
    8aa2:	88 81       	ld	r24, Y
    8aa4:	99 81       	ldd	r25, Y+1	; 0x01
    8aa6:	c1 59       	subi	r28, 0x91	; 145
    8aa8:	d0 40       	sbci	r29, 0x00	; 0
    8aaa:	01 96       	adiw	r24, 0x01	; 1
    8aac:	cf 56       	subi	r28, 0x6F	; 111
    8aae:	df 4f       	sbci	r29, 0xFF	; 255
    8ab0:	99 83       	std	Y+1, r25	; 0x01
    8ab2:	88 83       	st	Y, r24
    8ab4:	c1 59       	subi	r28, 0x91	; 145
    8ab6:	d0 40       	sbci	r29, 0x00	; 0
    8ab8:	cb 56       	subi	r28, 0x6B	; 107
    8aba:	df 4f       	sbci	r29, 0xFF	; 255
    8abc:	98 81       	ld	r25, Y
    8abe:	c5 59       	subi	r28, 0x95	; 149
    8ac0:	d0 40       	sbci	r29, 0x00	; 0
    8ac2:	91 50       	subi	r25, 0x01	; 1
    8ac4:	cb 56       	subi	r28, 0x6B	; 107
    8ac6:	df 4f       	sbci	r29, 0xFF	; 255
    8ac8:	98 83       	st	Y, r25
    8aca:	c5 59       	subi	r28, 0x95	; 149
    8acc:	d0 40       	sbci	r29, 0x00	; 0
    8ace:	cb 56       	subi	r28, 0x6B	; 107
    8ad0:	df 4f       	sbci	r29, 0xFF	; 255
    8ad2:	e8 81       	ld	r30, Y
    8ad4:	c5 59       	subi	r28, 0x95	; 149
    8ad6:	d0 40       	sbci	r29, 0x00	; 0
    8ad8:	ee 23       	and	r30, r30
    8ada:	31 f6       	brne	.-116    	; 0x8a68 <main+0x68>
	LED_T LED_GreenStartSys 	={LED_PORTD , LED_PIN0 ,LED_SOURCE };
    8adc:	ce 01       	movw	r24, r28
    8ade:	85 57       	subi	r24, 0x75	; 117
    8ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    8ae2:	ca 56       	subi	r28, 0x6A	; 106
    8ae4:	df 4f       	sbci	r29, 0xFF	; 255
    8ae6:	99 83       	std	Y+1, r25	; 0x01
    8ae8:	88 83       	st	Y, r24
    8aea:	c6 59       	subi	r28, 0x96	; 150
    8aec:	d0 40       	sbci	r29, 0x00	; 0
    8aee:	85 e3       	ldi	r24, 0x35	; 53
    8af0:	92 e0       	ldi	r25, 0x02	; 2
    8af2:	c8 56       	subi	r28, 0x68	; 104
    8af4:	df 4f       	sbci	r29, 0xFF	; 255
    8af6:	99 83       	std	Y+1, r25	; 0x01
    8af8:	88 83       	st	Y, r24
    8afa:	c8 59       	subi	r28, 0x98	; 152
    8afc:	d0 40       	sbci	r29, 0x00	; 0
    8afe:	93 e0       	ldi	r25, 0x03	; 3
    8b00:	c6 56       	subi	r28, 0x66	; 102
    8b02:	df 4f       	sbci	r29, 0xFF	; 255
    8b04:	98 83       	st	Y, r25
    8b06:	ca 59       	subi	r28, 0x9A	; 154
    8b08:	d0 40       	sbci	r29, 0x00	; 0
    8b0a:	c8 56       	subi	r28, 0x68	; 104
    8b0c:	df 4f       	sbci	r29, 0xFF	; 255
    8b0e:	e8 81       	ld	r30, Y
    8b10:	f9 81       	ldd	r31, Y+1	; 0x01
    8b12:	c8 59       	subi	r28, 0x98	; 152
    8b14:	d0 40       	sbci	r29, 0x00	; 0
    8b16:	00 80       	ld	r0, Z
    8b18:	c8 56       	subi	r28, 0x68	; 104
    8b1a:	df 4f       	sbci	r29, 0xFF	; 255
    8b1c:	88 81       	ld	r24, Y
    8b1e:	99 81       	ldd	r25, Y+1	; 0x01
    8b20:	c8 59       	subi	r28, 0x98	; 152
    8b22:	d0 40       	sbci	r29, 0x00	; 0
    8b24:	01 96       	adiw	r24, 0x01	; 1
    8b26:	c8 56       	subi	r28, 0x68	; 104
    8b28:	df 4f       	sbci	r29, 0xFF	; 255
    8b2a:	99 83       	std	Y+1, r25	; 0x01
    8b2c:	88 83       	st	Y, r24
    8b2e:	c8 59       	subi	r28, 0x98	; 152
    8b30:	d0 40       	sbci	r29, 0x00	; 0
    8b32:	ca 56       	subi	r28, 0x6A	; 106
    8b34:	df 4f       	sbci	r29, 0xFF	; 255
    8b36:	e8 81       	ld	r30, Y
    8b38:	f9 81       	ldd	r31, Y+1	; 0x01
    8b3a:	c6 59       	subi	r28, 0x96	; 150
    8b3c:	d0 40       	sbci	r29, 0x00	; 0
    8b3e:	00 82       	st	Z, r0
    8b40:	ca 56       	subi	r28, 0x6A	; 106
    8b42:	df 4f       	sbci	r29, 0xFF	; 255
    8b44:	88 81       	ld	r24, Y
    8b46:	99 81       	ldd	r25, Y+1	; 0x01
    8b48:	c6 59       	subi	r28, 0x96	; 150
    8b4a:	d0 40       	sbci	r29, 0x00	; 0
    8b4c:	01 96       	adiw	r24, 0x01	; 1
    8b4e:	ca 56       	subi	r28, 0x6A	; 106
    8b50:	df 4f       	sbci	r29, 0xFF	; 255
    8b52:	99 83       	std	Y+1, r25	; 0x01
    8b54:	88 83       	st	Y, r24
    8b56:	c6 59       	subi	r28, 0x96	; 150
    8b58:	d0 40       	sbci	r29, 0x00	; 0
    8b5a:	c6 56       	subi	r28, 0x66	; 102
    8b5c:	df 4f       	sbci	r29, 0xFF	; 255
    8b5e:	98 81       	ld	r25, Y
    8b60:	ca 59       	subi	r28, 0x9A	; 154
    8b62:	d0 40       	sbci	r29, 0x00	; 0
    8b64:	91 50       	subi	r25, 0x01	; 1
    8b66:	c6 56       	subi	r28, 0x66	; 102
    8b68:	df 4f       	sbci	r29, 0xFF	; 255
    8b6a:	98 83       	st	Y, r25
    8b6c:	ca 59       	subi	r28, 0x9A	; 154
    8b6e:	d0 40       	sbci	r29, 0x00	; 0
    8b70:	c6 56       	subi	r28, 0x66	; 102
    8b72:	df 4f       	sbci	r29, 0xFF	; 255
    8b74:	e8 81       	ld	r30, Y
    8b76:	ca 59       	subi	r28, 0x9A	; 154
    8b78:	d0 40       	sbci	r29, 0x00	; 0
    8b7a:	ee 23       	and	r30, r30
    8b7c:	31 f6       	brne	.-116    	; 0x8b0a <main+0x10a>
	/*initialization The Pins To LED the System*/
	LED_voidPinInit		(&LED_GreenStartSys);
    8b7e:	ce 01       	movw	r24, r28
    8b80:	85 57       	subi	r24, 0x75	; 117
    8b82:	9f 4f       	sbci	r25, 0xFF	; 255
    8b84:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <LED_voidPinInit>
	LED_voidPinInit		(&LED_RedClosedSys);
    8b88:	ce 01       	movw	r24, r28
    8b8a:	88 57       	subi	r24, 0x78	; 120
    8b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    8b8e:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <LED_voidPinInit>


	/*objects for the DCMotor*/
	DCMOTOR_CONFIG DC_MOTOR ={ DCMOTOR_PORTA , DCMOTOR_PIN7 , DCMOTOR_PIN6};
    8b92:	ce 01       	movw	r24, r28
    8b94:	82 57       	subi	r24, 0x72	; 114
    8b96:	9f 4f       	sbci	r25, 0xFF	; 255
    8b98:	c5 56       	subi	r28, 0x65	; 101
    8b9a:	df 4f       	sbci	r29, 0xFF	; 255
    8b9c:	99 83       	std	Y+1, r25	; 0x01
    8b9e:	88 83       	st	Y, r24
    8ba0:	cb 59       	subi	r28, 0x9B	; 155
    8ba2:	d0 40       	sbci	r29, 0x00	; 0
    8ba4:	82 e3       	ldi	r24, 0x32	; 50
    8ba6:	92 e0       	ldi	r25, 0x02	; 2
    8ba8:	c3 56       	subi	r28, 0x63	; 99
    8baa:	df 4f       	sbci	r29, 0xFF	; 255
    8bac:	99 83       	std	Y+1, r25	; 0x01
    8bae:	88 83       	st	Y, r24
    8bb0:	cd 59       	subi	r28, 0x9D	; 157
    8bb2:	d0 40       	sbci	r29, 0x00	; 0
    8bb4:	93 e0       	ldi	r25, 0x03	; 3
    8bb6:	c1 56       	subi	r28, 0x61	; 97
    8bb8:	df 4f       	sbci	r29, 0xFF	; 255
    8bba:	98 83       	st	Y, r25
    8bbc:	cf 59       	subi	r28, 0x9F	; 159
    8bbe:	d0 40       	sbci	r29, 0x00	; 0
    8bc0:	c3 56       	subi	r28, 0x63	; 99
    8bc2:	df 4f       	sbci	r29, 0xFF	; 255
    8bc4:	e8 81       	ld	r30, Y
    8bc6:	f9 81       	ldd	r31, Y+1	; 0x01
    8bc8:	cd 59       	subi	r28, 0x9D	; 157
    8bca:	d0 40       	sbci	r29, 0x00	; 0
    8bcc:	00 80       	ld	r0, Z
    8bce:	c3 56       	subi	r28, 0x63	; 99
    8bd0:	df 4f       	sbci	r29, 0xFF	; 255
    8bd2:	88 81       	ld	r24, Y
    8bd4:	99 81       	ldd	r25, Y+1	; 0x01
    8bd6:	cd 59       	subi	r28, 0x9D	; 157
    8bd8:	d0 40       	sbci	r29, 0x00	; 0
    8bda:	01 96       	adiw	r24, 0x01	; 1
    8bdc:	c3 56       	subi	r28, 0x63	; 99
    8bde:	df 4f       	sbci	r29, 0xFF	; 255
    8be0:	99 83       	std	Y+1, r25	; 0x01
    8be2:	88 83       	st	Y, r24
    8be4:	cd 59       	subi	r28, 0x9D	; 157
    8be6:	d0 40       	sbci	r29, 0x00	; 0
    8be8:	c5 56       	subi	r28, 0x65	; 101
    8bea:	df 4f       	sbci	r29, 0xFF	; 255
    8bec:	e8 81       	ld	r30, Y
    8bee:	f9 81       	ldd	r31, Y+1	; 0x01
    8bf0:	cb 59       	subi	r28, 0x9B	; 155
    8bf2:	d0 40       	sbci	r29, 0x00	; 0
    8bf4:	00 82       	st	Z, r0
    8bf6:	c5 56       	subi	r28, 0x65	; 101
    8bf8:	df 4f       	sbci	r29, 0xFF	; 255
    8bfa:	88 81       	ld	r24, Y
    8bfc:	99 81       	ldd	r25, Y+1	; 0x01
    8bfe:	cb 59       	subi	r28, 0x9B	; 155
    8c00:	d0 40       	sbci	r29, 0x00	; 0
    8c02:	01 96       	adiw	r24, 0x01	; 1
    8c04:	c5 56       	subi	r28, 0x65	; 101
    8c06:	df 4f       	sbci	r29, 0xFF	; 255
    8c08:	99 83       	std	Y+1, r25	; 0x01
    8c0a:	88 83       	st	Y, r24
    8c0c:	cb 59       	subi	r28, 0x9B	; 155
    8c0e:	d0 40       	sbci	r29, 0x00	; 0
    8c10:	c1 56       	subi	r28, 0x61	; 97
    8c12:	df 4f       	sbci	r29, 0xFF	; 255
    8c14:	98 81       	ld	r25, Y
    8c16:	cf 59       	subi	r28, 0x9F	; 159
    8c18:	d0 40       	sbci	r29, 0x00	; 0
    8c1a:	91 50       	subi	r25, 0x01	; 1
    8c1c:	c1 56       	subi	r28, 0x61	; 97
    8c1e:	df 4f       	sbci	r29, 0xFF	; 255
    8c20:	98 83       	st	Y, r25
    8c22:	cf 59       	subi	r28, 0x9F	; 159
    8c24:	d0 40       	sbci	r29, 0x00	; 0
    8c26:	c1 56       	subi	r28, 0x61	; 97
    8c28:	df 4f       	sbci	r29, 0xFF	; 255
    8c2a:	e8 81       	ld	r30, Y
    8c2c:	cf 59       	subi	r28, 0x9F	; 159
    8c2e:	d0 40       	sbci	r29, 0x00	; 0
    8c30:	ee 23       	and	r30, r30
    8c32:	31 f6       	brne	.-116    	; 0x8bc0 <main+0x1c0>
	DCMOTOR_voidInit(&DC_MOTOR);
    8c34:	ce 01       	movw	r24, r28
    8c36:	82 57       	subi	r24, 0x72	; 114
    8c38:	9f 4f       	sbci	r25, 0xFF	; 255
    8c3a:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <DCMOTOR_voidInit>


	/*for External interrupt enable*/
	EXTI_voidINT0Init();
    8c3e:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <EXTI_voidINT0Init>
	EXTI_voidINT1Init();
    8c42:	0e 94 e7 26 	call	0x4dce	; 0x4dce <EXTI_voidINT1Init>
	GIE_voidEnable();
    8c46:	0e 94 9a 29 	call	0x5334	; 0x5334 <GIE_voidEnable>
	/*Pull_up in EXTI*/
	DIO_enumSetPinValue(DIO_PORTD,DIO_PIN2,DIO_HIGH);
    8c4a:	83 e0       	ldi	r24, 0x03	; 3
    8c4c:	62 e0       	ldi	r22, 0x02	; 2
    8c4e:	41 e0       	ldi	r20, 0x01	; 1
    8c50:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DIO_PORTD,DIO_PIN3,DIO_HIGH);
    8c54:	83 e0       	ldi	r24, 0x03	; 3
    8c56:	63 e0       	ldi	r22, 0x03	; 3
    8c58:	41 e0       	ldi	r20, 0x01	; 1
    8c5a:	0e 94 a1 20 	call	0x4142	; 0x4142 <DIO_enumSetPinValue>
	/*Registration Function*/
	EXTI_u8ExtISetCallBackINT0(&INT0ISR);
    8c5e:	8e e8       	ldi	r24, 0x8E	; 142
    8c60:	9b e4       	ldi	r25, 0x4B	; 75
    8c62:	0e 94 aa 28 	call	0x5154	; 0x5154 <EXTI_u8ExtISetCallBackINT0>
	EXTI_u8ExtISetCallBackINT1(&INT1ISR);
    8c66:	88 e9       	ldi	r24, 0x98	; 152
    8c68:	9b e4       	ldi	r25, 0x4B	; 75
    8c6a:	0e 94 c7 28 	call	0x518e	; 0x518e <EXTI_u8ExtISetCallBackINT1>


	/*initialization Pin Servo_Motor connect with OCR1B*/
	SERVO_voidInit(SERVO_OC1B_PIN4);
    8c6e:	84 e0       	ldi	r24, 0x04	; 4
    8c70:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <SERVO_voidInit>

	/*initialization LCD & Keypad & Stepper_Motor & DC_Motor */
	CLCD_voidInit();
    8c74:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <CLCD_voidInit>
	KPD_voidInit();
    8c78:	0e 94 b6 29 	call	0x536c	; 0x536c <KPD_voidInit>
	STEPPER_voidInit();
    8c7c:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <STEPPER_voidInit>



	while(1)
	{
		Local_u8CounterLoginID = 0 ;				//counter for first array stored pass login
    8c80:	fe 01       	movw	r30, r28
    8c82:	e9 59       	subi	r30, 0x99	; 153
    8c84:	ff 4f       	sbci	r31, 0xFF	; 255
    8c86:	10 82       	st	Z, r1
		Local_u8CounterLoginPass = 0 ;				//counter for second array stored  pass
    8c88:	fe 01       	movw	r30, r28
    8c8a:	ea 59       	subi	r30, 0x9A	; 154
    8c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    8c8e:	10 82       	st	Z, r1
		Local_u8CounterCheckLoginID = 0 ;			//counter for first array stored pass login
    8c90:	fe 01       	movw	r30, r28
    8c92:	eb 59       	subi	r30, 0x9B	; 155
    8c94:	ff 4f       	sbci	r31, 0xFF	; 255
    8c96:	10 82       	st	Z, r1
		Local_u8CounterCheckLoginPass = 0 ;			//counter for second array stored  pass
    8c98:	fe 01       	movw	r30, r28
    8c9a:	ec 59       	subi	r30, 0x9C	; 156
    8c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    8c9e:	10 82       	st	Z, r1


		if (Local_u8Start_closedSystem == 1)
    8ca0:	80 91 55 02 	lds	r24, 0x0255
    8ca4:	81 30       	cpi	r24, 0x01	; 1
    8ca6:	09 f0       	breq	.+2      	; 0x8caa <main+0x2aa>
    8ca8:	17 c5       	rjmp	.+2606   	; 0x96d8 <main+0xcd8>
		{
			LED_voidPinTurnOn(&LED_GreenStartSys);
    8caa:	ce 01       	movw	r24, r28
    8cac:	85 57       	subi	r24, 0x75	; 117
    8cae:	9f 4f       	sbci	r25, 0xFF	; 255
    8cb0:	0e 94 04 2b 	call	0x5608	; 0x5608 <LED_voidPinTurnOn>
			LED_voidPinTurnOff(&LED_RedClosedSys);
    8cb4:	ce 01       	movw	r24, r28
    8cb6:	88 57       	subi	r24, 0x78	; 120
    8cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    8cba:	0e 94 2f 2b 	call	0x565e	; 0x565e <LED_voidPinTurnOff>

			CLCD_voidSendString("Start System...");
    8cbe:	8f e8       	ldi	r24, 0x8F	; 143
    8cc0:	90 e0       	ldi	r25, 0x00	; 0
    8cc2:	0e 94 9e 19 	call	0x333c	; 0x333c <CLCD_voidSendString>
			CLCD_voidSendStringPosition(" Welcome Member ",1,0);
    8cc6:	8f e9       	ldi	r24, 0x9F	; 159
    8cc8:	90 e0       	ldi	r25, 0x00	; 0
    8cca:	61 e0       	ldi	r22, 0x01	; 1
    8ccc:	40 e0       	ldi	r20, 0x00	; 0
    8cce:	0e 94 02 1a 	call	0x3404	; 0x3404 <CLCD_voidSendStringPosition>
    8cd2:	fe 01       	movw	r30, r28
    8cd4:	e1 5a       	subi	r30, 0xA1	; 161
    8cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    8cd8:	80 e0       	ldi	r24, 0x00	; 0
    8cda:	90 e0       	ldi	r25, 0x00	; 0
    8cdc:	aa ef       	ldi	r26, 0xFA	; 250
    8cde:	b4 e4       	ldi	r27, 0x44	; 68
    8ce0:	80 83       	st	Z, r24
    8ce2:	91 83       	std	Z+1, r25	; 0x01
    8ce4:	a2 83       	std	Z+2, r26	; 0x02
    8ce6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8ce8:	8e 01       	movw	r16, r28
    8cea:	05 5a       	subi	r16, 0xA5	; 165
    8cec:	1f 4f       	sbci	r17, 0xFF	; 255
    8cee:	fe 01       	movw	r30, r28
    8cf0:	e1 5a       	subi	r30, 0xA1	; 161
    8cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    8cf4:	60 81       	ld	r22, Z
    8cf6:	71 81       	ldd	r23, Z+1	; 0x01
    8cf8:	82 81       	ldd	r24, Z+2	; 0x02
    8cfa:	93 81       	ldd	r25, Z+3	; 0x03
    8cfc:	20 e0       	ldi	r18, 0x00	; 0
    8cfe:	30 e0       	ldi	r19, 0x00	; 0
    8d00:	4a ef       	ldi	r20, 0xFA	; 250
    8d02:	54 e4       	ldi	r21, 0x44	; 68
    8d04:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    8d08:	dc 01       	movw	r26, r24
    8d0a:	cb 01       	movw	r24, r22
    8d0c:	f8 01       	movw	r30, r16
    8d0e:	80 83       	st	Z, r24
    8d10:	91 83       	std	Z+1, r25	; 0x01
    8d12:	a2 83       	std	Z+2, r26	; 0x02
    8d14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8d16:	fe 01       	movw	r30, r28
    8d18:	e5 5a       	subi	r30, 0xA5	; 165
    8d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    8d1c:	60 81       	ld	r22, Z
    8d1e:	71 81       	ldd	r23, Z+1	; 0x01
    8d20:	82 81       	ldd	r24, Z+2	; 0x02
    8d22:	93 81       	ldd	r25, Z+3	; 0x03
    8d24:	20 e0       	ldi	r18, 0x00	; 0
    8d26:	30 e0       	ldi	r19, 0x00	; 0
    8d28:	40 e8       	ldi	r20, 0x80	; 128
    8d2a:	5f e3       	ldi	r21, 0x3F	; 63
    8d2c:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    8d30:	88 23       	and	r24, r24
    8d32:	44 f4       	brge	.+16     	; 0x8d44 <main+0x344>
		__ticks = 1;
    8d34:	fe 01       	movw	r30, r28
    8d36:	e7 5a       	subi	r30, 0xA7	; 167
    8d38:	ff 4f       	sbci	r31, 0xFF	; 255
    8d3a:	81 e0       	ldi	r24, 0x01	; 1
    8d3c:	90 e0       	ldi	r25, 0x00	; 0
    8d3e:	91 83       	std	Z+1, r25	; 0x01
    8d40:	80 83       	st	Z, r24
    8d42:	64 c0       	rjmp	.+200    	; 0x8e0c <main+0x40c>
	else if (__tmp > 65535)
    8d44:	fe 01       	movw	r30, r28
    8d46:	e5 5a       	subi	r30, 0xA5	; 165
    8d48:	ff 4f       	sbci	r31, 0xFF	; 255
    8d4a:	60 81       	ld	r22, Z
    8d4c:	71 81       	ldd	r23, Z+1	; 0x01
    8d4e:	82 81       	ldd	r24, Z+2	; 0x02
    8d50:	93 81       	ldd	r25, Z+3	; 0x03
    8d52:	20 e0       	ldi	r18, 0x00	; 0
    8d54:	3f ef       	ldi	r19, 0xFF	; 255
    8d56:	4f e7       	ldi	r20, 0x7F	; 127
    8d58:	57 e4       	ldi	r21, 0x47	; 71
    8d5a:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    8d5e:	18 16       	cp	r1, r24
    8d60:	0c f0       	brlt	.+2      	; 0x8d64 <main+0x364>
    8d62:	43 c0       	rjmp	.+134    	; 0x8dea <main+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8d64:	fe 01       	movw	r30, r28
    8d66:	e1 5a       	subi	r30, 0xA1	; 161
    8d68:	ff 4f       	sbci	r31, 0xFF	; 255
    8d6a:	60 81       	ld	r22, Z
    8d6c:	71 81       	ldd	r23, Z+1	; 0x01
    8d6e:	82 81       	ldd	r24, Z+2	; 0x02
    8d70:	93 81       	ldd	r25, Z+3	; 0x03
    8d72:	20 e0       	ldi	r18, 0x00	; 0
    8d74:	30 e0       	ldi	r19, 0x00	; 0
    8d76:	40 e2       	ldi	r20, 0x20	; 32
    8d78:	51 e4       	ldi	r21, 0x41	; 65
    8d7a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    8d7e:	dc 01       	movw	r26, r24
    8d80:	cb 01       	movw	r24, r22
    8d82:	8e 01       	movw	r16, r28
    8d84:	07 5a       	subi	r16, 0xA7	; 167
    8d86:	1f 4f       	sbci	r17, 0xFF	; 255
    8d88:	bc 01       	movw	r22, r24
    8d8a:	cd 01       	movw	r24, r26
    8d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8d90:	dc 01       	movw	r26, r24
    8d92:	cb 01       	movw	r24, r22
    8d94:	f8 01       	movw	r30, r16
    8d96:	91 83       	std	Z+1, r25	; 0x01
    8d98:	80 83       	st	Z, r24
    8d9a:	1f c0       	rjmp	.+62     	; 0x8dda <main+0x3da>
    8d9c:	fe 01       	movw	r30, r28
    8d9e:	e9 5a       	subi	r30, 0xA9	; 169
    8da0:	ff 4f       	sbci	r31, 0xFF	; 255
    8da2:	88 ec       	ldi	r24, 0xC8	; 200
    8da4:	90 e0       	ldi	r25, 0x00	; 0
    8da6:	91 83       	std	Z+1, r25	; 0x01
    8da8:	80 83       	st	Z, r24
    8daa:	fe 01       	movw	r30, r28
    8dac:	e9 5a       	subi	r30, 0xA9	; 169
    8dae:	ff 4f       	sbci	r31, 0xFF	; 255
    8db0:	80 81       	ld	r24, Z
    8db2:	91 81       	ldd	r25, Z+1	; 0x01
    8db4:	01 97       	sbiw	r24, 0x01	; 1
    8db6:	f1 f7       	brne	.-4      	; 0x8db4 <main+0x3b4>
    8db8:	fe 01       	movw	r30, r28
    8dba:	e9 5a       	subi	r30, 0xA9	; 169
    8dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    8dbe:	91 83       	std	Z+1, r25	; 0x01
    8dc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8dc2:	de 01       	movw	r26, r28
    8dc4:	a7 5a       	subi	r26, 0xA7	; 167
    8dc6:	bf 4f       	sbci	r27, 0xFF	; 255
    8dc8:	fe 01       	movw	r30, r28
    8dca:	e7 5a       	subi	r30, 0xA7	; 167
    8dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    8dce:	80 81       	ld	r24, Z
    8dd0:	91 81       	ldd	r25, Z+1	; 0x01
    8dd2:	01 97       	sbiw	r24, 0x01	; 1
    8dd4:	11 96       	adiw	r26, 0x01	; 1
    8dd6:	9c 93       	st	X, r25
    8dd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8dda:	fe 01       	movw	r30, r28
    8ddc:	e7 5a       	subi	r30, 0xA7	; 167
    8dde:	ff 4f       	sbci	r31, 0xFF	; 255
    8de0:	80 81       	ld	r24, Z
    8de2:	91 81       	ldd	r25, Z+1	; 0x01
    8de4:	00 97       	sbiw	r24, 0x00	; 0
    8de6:	d1 f6       	brne	.-76     	; 0x8d9c <main+0x39c>
    8de8:	27 c0       	rjmp	.+78     	; 0x8e38 <main+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8dea:	8e 01       	movw	r16, r28
    8dec:	07 5a       	subi	r16, 0xA7	; 167
    8dee:	1f 4f       	sbci	r17, 0xFF	; 255
    8df0:	fe 01       	movw	r30, r28
    8df2:	e5 5a       	subi	r30, 0xA5	; 165
    8df4:	ff 4f       	sbci	r31, 0xFF	; 255
    8df6:	60 81       	ld	r22, Z
    8df8:	71 81       	ldd	r23, Z+1	; 0x01
    8dfa:	82 81       	ldd	r24, Z+2	; 0x02
    8dfc:	93 81       	ldd	r25, Z+3	; 0x03
    8dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8e02:	dc 01       	movw	r26, r24
    8e04:	cb 01       	movw	r24, r22
    8e06:	f8 01       	movw	r30, r16
    8e08:	91 83       	std	Z+1, r25	; 0x01
    8e0a:	80 83       	st	Z, r24
    8e0c:	de 01       	movw	r26, r28
    8e0e:	ab 5a       	subi	r26, 0xAB	; 171
    8e10:	bf 4f       	sbci	r27, 0xFF	; 255
    8e12:	fe 01       	movw	r30, r28
    8e14:	e7 5a       	subi	r30, 0xA7	; 167
    8e16:	ff 4f       	sbci	r31, 0xFF	; 255
    8e18:	80 81       	ld	r24, Z
    8e1a:	91 81       	ldd	r25, Z+1	; 0x01
    8e1c:	8d 93       	st	X+, r24
    8e1e:	9c 93       	st	X, r25
    8e20:	fe 01       	movw	r30, r28
    8e22:	eb 5a       	subi	r30, 0xAB	; 171
    8e24:	ff 4f       	sbci	r31, 0xFF	; 255
    8e26:	80 81       	ld	r24, Z
    8e28:	91 81       	ldd	r25, Z+1	; 0x01
    8e2a:	01 97       	sbiw	r24, 0x01	; 1
    8e2c:	f1 f7       	brne	.-4      	; 0x8e2a <main+0x42a>
    8e2e:	fe 01       	movw	r30, r28
    8e30:	eb 5a       	subi	r30, 0xAB	; 171
    8e32:	ff 4f       	sbci	r31, 0xFF	; 255
    8e34:	91 83       	std	Z+1, r25	; 0x01
    8e36:	80 83       	st	Z, r24
			_delay_ms(2000);
			CLCD_voidClearLCD();
    8e38:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <CLCD_voidClearLCD>


			/*To Register the Pass */
			CLCD_voidSendStringPosition("Login Member ID",0,0);
    8e3c:	80 eb       	ldi	r24, 0xB0	; 176
    8e3e:	90 e0       	ldi	r25, 0x00	; 0
    8e40:	60 e0       	ldi	r22, 0x00	; 0
    8e42:	40 e0       	ldi	r20, 0x00	; 0
    8e44:	0e 94 02 1a 	call	0x3404	; 0x3404 <CLCD_voidSendStringPosition>
    8e48:	f1 c0       	rjmp	.+482    	; 0x902c <main+0x62c>
			/*Save the ID member*/
			while((Local_u8Start_closedSystem != 2))
			{
				/*wait for pressed key*/
				do{
					Local_u8KeypadValue = KPD_u8GetPressedKey();
    8e4a:	0e 94 0d 2a 	call	0x541a	; 0x541a <KPD_u8GetPressedKey>
    8e4e:	fe 01       	movw	r30, r28
    8e50:	ed 59       	subi	r30, 0x9D	; 157
    8e52:	ff 4f       	sbci	r31, 0xFF	; 255
    8e54:	80 83       	st	Z, r24
				}while( Local_u8KeypadValue == KPD_NO_PRESSES_KEY);
    8e56:	fe 01       	movw	r30, r28
    8e58:	ed 59       	subi	r30, 0x9D	; 157
    8e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    8e5c:	80 81       	ld	r24, Z
    8e5e:	8f 3f       	cpi	r24, 0xFF	; 255
    8e60:	a1 f3       	breq	.-24     	; 0x8e4a <main+0x44a>

				/*enter is save the password*/
				if (Local_u8KeypadValue == '%'){ break; }
    8e62:	fe 01       	movw	r30, r28
    8e64:	ed 59       	subi	r30, 0x9D	; 157
    8e66:	ff 4f       	sbci	r31, 0xFF	; 255
    8e68:	80 81       	ld	r24, Z
    8e6a:	85 32       	cpi	r24, 0x25	; 37
    8e6c:	09 f4       	brne	.+2      	; 0x8e70 <main+0x470>
    8e6e:	e3 c0       	rjmp	.+454    	; 0x9036 <main+0x636>

				/*print the valued in LCD*/
				CLCD_voidSendINTNumberPosition(Local_u8KeypadValue,1,Local_u8CounterLoginID);
    8e70:	fe 01       	movw	r30, r28
    8e72:	ed 59       	subi	r30, 0x9D	; 157
    8e74:	ff 4f       	sbci	r31, 0xFF	; 255
    8e76:	80 81       	ld	r24, Z
    8e78:	88 2f       	mov	r24, r24
    8e7a:	90 e0       	ldi	r25, 0x00	; 0
    8e7c:	a0 e0       	ldi	r26, 0x00	; 0
    8e7e:	b0 e0       	ldi	r27, 0x00	; 0
    8e80:	fe 01       	movw	r30, r28
    8e82:	e9 59       	subi	r30, 0x99	; 153
    8e84:	ff 4f       	sbci	r31, 0xFF	; 255
    8e86:	bc 01       	movw	r22, r24
    8e88:	cd 01       	movw	r24, r26
    8e8a:	41 e0       	ldi	r20, 0x01	; 1
    8e8c:	20 81       	ld	r18, Z
    8e8e:	0e 94 97 1b 	call	0x372e	; 0x372e <CLCD_voidSendINTNumberPosition>
    8e92:	fe 01       	movw	r30, r28
    8e94:	ef 5a       	subi	r30, 0xAF	; 175
    8e96:	ff 4f       	sbci	r31, 0xFF	; 255
    8e98:	80 e0       	ldi	r24, 0x00	; 0
    8e9a:	90 e0       	ldi	r25, 0x00	; 0
    8e9c:	a8 e4       	ldi	r26, 0x48	; 72
    8e9e:	b3 e4       	ldi	r27, 0x43	; 67
    8ea0:	80 83       	st	Z, r24
    8ea2:	91 83       	std	Z+1, r25	; 0x01
    8ea4:	a2 83       	std	Z+2, r26	; 0x02
    8ea6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8ea8:	8e 01       	movw	r16, r28
    8eaa:	03 5b       	subi	r16, 0xB3	; 179
    8eac:	1f 4f       	sbci	r17, 0xFF	; 255
    8eae:	fe 01       	movw	r30, r28
    8eb0:	ef 5a       	subi	r30, 0xAF	; 175
    8eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    8eb4:	60 81       	ld	r22, Z
    8eb6:	71 81       	ldd	r23, Z+1	; 0x01
    8eb8:	82 81       	ldd	r24, Z+2	; 0x02
    8eba:	93 81       	ldd	r25, Z+3	; 0x03
    8ebc:	20 e0       	ldi	r18, 0x00	; 0
    8ebe:	30 e0       	ldi	r19, 0x00	; 0
    8ec0:	4a ef       	ldi	r20, 0xFA	; 250
    8ec2:	54 e4       	ldi	r21, 0x44	; 68
    8ec4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    8ec8:	dc 01       	movw	r26, r24
    8eca:	cb 01       	movw	r24, r22
    8ecc:	f8 01       	movw	r30, r16
    8ece:	80 83       	st	Z, r24
    8ed0:	91 83       	std	Z+1, r25	; 0x01
    8ed2:	a2 83       	std	Z+2, r26	; 0x02
    8ed4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8ed6:	fe 01       	movw	r30, r28
    8ed8:	e3 5b       	subi	r30, 0xB3	; 179
    8eda:	ff 4f       	sbci	r31, 0xFF	; 255
    8edc:	60 81       	ld	r22, Z
    8ede:	71 81       	ldd	r23, Z+1	; 0x01
    8ee0:	82 81       	ldd	r24, Z+2	; 0x02
    8ee2:	93 81       	ldd	r25, Z+3	; 0x03
    8ee4:	20 e0       	ldi	r18, 0x00	; 0
    8ee6:	30 e0       	ldi	r19, 0x00	; 0
    8ee8:	40 e8       	ldi	r20, 0x80	; 128
    8eea:	5f e3       	ldi	r21, 0x3F	; 63
    8eec:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    8ef0:	88 23       	and	r24, r24
    8ef2:	44 f4       	brge	.+16     	; 0x8f04 <main+0x504>
		__ticks = 1;
    8ef4:	fe 01       	movw	r30, r28
    8ef6:	e5 5b       	subi	r30, 0xB5	; 181
    8ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    8efa:	81 e0       	ldi	r24, 0x01	; 1
    8efc:	90 e0       	ldi	r25, 0x00	; 0
    8efe:	91 83       	std	Z+1, r25	; 0x01
    8f00:	80 83       	st	Z, r24
    8f02:	64 c0       	rjmp	.+200    	; 0x8fcc <main+0x5cc>
	else if (__tmp > 65535)
    8f04:	fe 01       	movw	r30, r28
    8f06:	e3 5b       	subi	r30, 0xB3	; 179
    8f08:	ff 4f       	sbci	r31, 0xFF	; 255
    8f0a:	60 81       	ld	r22, Z
    8f0c:	71 81       	ldd	r23, Z+1	; 0x01
    8f0e:	82 81       	ldd	r24, Z+2	; 0x02
    8f10:	93 81       	ldd	r25, Z+3	; 0x03
    8f12:	20 e0       	ldi	r18, 0x00	; 0
    8f14:	3f ef       	ldi	r19, 0xFF	; 255
    8f16:	4f e7       	ldi	r20, 0x7F	; 127
    8f18:	57 e4       	ldi	r21, 0x47	; 71
    8f1a:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    8f1e:	18 16       	cp	r1, r24
    8f20:	0c f0       	brlt	.+2      	; 0x8f24 <main+0x524>
    8f22:	43 c0       	rjmp	.+134    	; 0x8faa <main+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8f24:	fe 01       	movw	r30, r28
    8f26:	ef 5a       	subi	r30, 0xAF	; 175
    8f28:	ff 4f       	sbci	r31, 0xFF	; 255
    8f2a:	60 81       	ld	r22, Z
    8f2c:	71 81       	ldd	r23, Z+1	; 0x01
    8f2e:	82 81       	ldd	r24, Z+2	; 0x02
    8f30:	93 81       	ldd	r25, Z+3	; 0x03
    8f32:	20 e0       	ldi	r18, 0x00	; 0
    8f34:	30 e0       	ldi	r19, 0x00	; 0
    8f36:	40 e2       	ldi	r20, 0x20	; 32
    8f38:	51 e4       	ldi	r21, 0x41	; 65
    8f3a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    8f3e:	dc 01       	movw	r26, r24
    8f40:	cb 01       	movw	r24, r22
    8f42:	8e 01       	movw	r16, r28
    8f44:	05 5b       	subi	r16, 0xB5	; 181
    8f46:	1f 4f       	sbci	r17, 0xFF	; 255
    8f48:	bc 01       	movw	r22, r24
    8f4a:	cd 01       	movw	r24, r26
    8f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8f50:	dc 01       	movw	r26, r24
    8f52:	cb 01       	movw	r24, r22
    8f54:	f8 01       	movw	r30, r16
    8f56:	91 83       	std	Z+1, r25	; 0x01
    8f58:	80 83       	st	Z, r24
    8f5a:	1f c0       	rjmp	.+62     	; 0x8f9a <main+0x59a>
    8f5c:	fe 01       	movw	r30, r28
    8f5e:	e7 5b       	subi	r30, 0xB7	; 183
    8f60:	ff 4f       	sbci	r31, 0xFF	; 255
    8f62:	88 ec       	ldi	r24, 0xC8	; 200
    8f64:	90 e0       	ldi	r25, 0x00	; 0
    8f66:	91 83       	std	Z+1, r25	; 0x01
    8f68:	80 83       	st	Z, r24
    8f6a:	fe 01       	movw	r30, r28
    8f6c:	e7 5b       	subi	r30, 0xB7	; 183
    8f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    8f70:	80 81       	ld	r24, Z
    8f72:	91 81       	ldd	r25, Z+1	; 0x01
    8f74:	01 97       	sbiw	r24, 0x01	; 1
    8f76:	f1 f7       	brne	.-4      	; 0x8f74 <main+0x574>
    8f78:	fe 01       	movw	r30, r28
    8f7a:	e7 5b       	subi	r30, 0xB7	; 183
    8f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    8f7e:	91 83       	std	Z+1, r25	; 0x01
    8f80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8f82:	de 01       	movw	r26, r28
    8f84:	a5 5b       	subi	r26, 0xB5	; 181
    8f86:	bf 4f       	sbci	r27, 0xFF	; 255
    8f88:	fe 01       	movw	r30, r28
    8f8a:	e5 5b       	subi	r30, 0xB5	; 181
    8f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    8f8e:	80 81       	ld	r24, Z
    8f90:	91 81       	ldd	r25, Z+1	; 0x01
    8f92:	01 97       	sbiw	r24, 0x01	; 1
    8f94:	11 96       	adiw	r26, 0x01	; 1
    8f96:	9c 93       	st	X, r25
    8f98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8f9a:	fe 01       	movw	r30, r28
    8f9c:	e5 5b       	subi	r30, 0xB5	; 181
    8f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    8fa0:	80 81       	ld	r24, Z
    8fa2:	91 81       	ldd	r25, Z+1	; 0x01
    8fa4:	00 97       	sbiw	r24, 0x00	; 0
    8fa6:	d1 f6       	brne	.-76     	; 0x8f5c <main+0x55c>
    8fa8:	27 c0       	rjmp	.+78     	; 0x8ff8 <main+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8faa:	8e 01       	movw	r16, r28
    8fac:	05 5b       	subi	r16, 0xB5	; 181
    8fae:	1f 4f       	sbci	r17, 0xFF	; 255
    8fb0:	fe 01       	movw	r30, r28
    8fb2:	e3 5b       	subi	r30, 0xB3	; 179
    8fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    8fb6:	60 81       	ld	r22, Z
    8fb8:	71 81       	ldd	r23, Z+1	; 0x01
    8fba:	82 81       	ldd	r24, Z+2	; 0x02
    8fbc:	93 81       	ldd	r25, Z+3	; 0x03
    8fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8fc2:	dc 01       	movw	r26, r24
    8fc4:	cb 01       	movw	r24, r22
    8fc6:	f8 01       	movw	r30, r16
    8fc8:	91 83       	std	Z+1, r25	; 0x01
    8fca:	80 83       	st	Z, r24
    8fcc:	de 01       	movw	r26, r28
    8fce:	a9 5b       	subi	r26, 0xB9	; 185
    8fd0:	bf 4f       	sbci	r27, 0xFF	; 255
    8fd2:	fe 01       	movw	r30, r28
    8fd4:	e5 5b       	subi	r30, 0xB5	; 181
    8fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    8fd8:	80 81       	ld	r24, Z
    8fda:	91 81       	ldd	r25, Z+1	; 0x01
    8fdc:	8d 93       	st	X+, r24
    8fde:	9c 93       	st	X, r25
    8fe0:	fe 01       	movw	r30, r28
    8fe2:	e9 5b       	subi	r30, 0xB9	; 185
    8fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    8fe6:	80 81       	ld	r24, Z
    8fe8:	91 81       	ldd	r25, Z+1	; 0x01
    8fea:	01 97       	sbiw	r24, 0x01	; 1
    8fec:	f1 f7       	brne	.-4      	; 0x8fea <main+0x5ea>
    8fee:	fe 01       	movw	r30, r28
    8ff0:	e9 5b       	subi	r30, 0xB9	; 185
    8ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    8ff4:	91 83       	std	Z+1, r25	; 0x01
    8ff6:	80 83       	st	Z, r24
				_delay_ms(200);

				/*stored the valued in */
				Local_u8ArrLoginID[Local_u8CounterLoginID]=Local_u8KeypadValue;
    8ff8:	fe 01       	movw	r30, r28
    8ffa:	e9 59       	subi	r30, 0x99	; 153
    8ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    8ffe:	80 81       	ld	r24, Z
    9000:	28 2f       	mov	r18, r24
    9002:	30 e0       	ldi	r19, 0x00	; 0
    9004:	ce 01       	movw	r24, r28
    9006:	88 59       	subi	r24, 0x98	; 152
    9008:	9f 4f       	sbci	r25, 0xFF	; 255
    900a:	dc 01       	movw	r26, r24
    900c:	a2 0f       	add	r26, r18
    900e:	b3 1f       	adc	r27, r19
    9010:	fe 01       	movw	r30, r28
    9012:	ed 59       	subi	r30, 0x9D	; 157
    9014:	ff 4f       	sbci	r31, 0xFF	; 255
    9016:	80 81       	ld	r24, Z
    9018:	8c 93       	st	X, r24
				Local_u8CounterLoginID++;
    901a:	de 01       	movw	r26, r28
    901c:	a9 59       	subi	r26, 0x99	; 153
    901e:	bf 4f       	sbci	r27, 0xFF	; 255
    9020:	fe 01       	movw	r30, r28
    9022:	e9 59       	subi	r30, 0x99	; 153
    9024:	ff 4f       	sbci	r31, 0xFF	; 255
    9026:	80 81       	ld	r24, Z
    9028:	8f 5f       	subi	r24, 0xFF	; 255
    902a:	8c 93       	st	X, r24


			/*To Register the Pass */
			CLCD_voidSendStringPosition("Login Member ID",0,0);
			/*Save the ID member*/
			while((Local_u8Start_closedSystem != 2))
    902c:	80 91 55 02 	lds	r24, 0x0255
    9030:	82 30       	cpi	r24, 0x02	; 2
    9032:	09 f0       	breq	.+2      	; 0x9036 <main+0x636>
    9034:	0a cf       	rjmp	.-492    	; 0x8e4a <main+0x44a>
				Local_u8CounterLoginID++;
			}


			/*Clear LCD and wait check password*/
			CLCD_voidClearLCD();
    9036:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <CLCD_voidClearLCD>
			CLCD_voidSendStringPosition("Enter Password", 0 , 0);
    903a:	80 ec       	ldi	r24, 0xC0	; 192
    903c:	90 e0       	ldi	r25, 0x00	; 0
    903e:	60 e0       	ldi	r22, 0x00	; 0
    9040:	40 e0       	ldi	r20, 0x00	; 0
    9042:	0e 94 02 1a 	call	0x3404	; 0x3404 <CLCD_voidSendStringPosition>
			Local_u8KeypadValue = KPD_NO_PRESSES_KEY;
    9046:	fe 01       	movw	r30, r28
    9048:	ed 59       	subi	r30, 0x9D	; 157
    904a:	ff 4f       	sbci	r31, 0xFF	; 255
    904c:	8f ef       	ldi	r24, 0xFF	; 255
    904e:	80 83       	st	Z, r24
    9050:	bd c0       	rjmp	.+378    	; 0x91cc <main+0x7cc>

			while(Local_u8KeypadValue != '%'  && (Local_u8Start_closedSystem != 2))
			{
				do{
					Local_u8KeypadValue=KPD_u8GetPressedKey();
    9052:	0e 94 0d 2a 	call	0x541a	; 0x541a <KPD_u8GetPressedKey>
    9056:	fe 01       	movw	r30, r28
    9058:	ed 59       	subi	r30, 0x9D	; 157
    905a:	ff 4f       	sbci	r31, 0xFF	; 255
    905c:	80 83       	st	Z, r24
				}while(Local_u8KeypadValue == KPD_NO_PRESSES_KEY);
    905e:	fe 01       	movw	r30, r28
    9060:	ed 59       	subi	r30, 0x9D	; 157
    9062:	ff 4f       	sbci	r31, 0xFF	; 255
    9064:	80 81       	ld	r24, Z
    9066:	8f 3f       	cpi	r24, 0xFF	; 255
    9068:	a1 f3       	breq	.-24     	; 0x9052 <main+0x652>

				if (Local_u8KeypadValue == '%'){ break; }
    906a:	fe 01       	movw	r30, r28
    906c:	ed 59       	subi	r30, 0x9D	; 157
    906e:	ff 4f       	sbci	r31, 0xFF	; 255
    9070:	80 81       	ld	r24, Z
    9072:	85 32       	cpi	r24, 0x25	; 37
    9074:	09 f4       	brne	.+2      	; 0x9078 <main+0x678>
    9076:	b5 c0       	rjmp	.+362    	; 0x91e2 <main+0x7e2>
    9078:	fe 01       	movw	r30, r28
    907a:	ed 5b       	subi	r30, 0xBD	; 189
    907c:	ff 4f       	sbci	r31, 0xFF	; 255
    907e:	80 e0       	ldi	r24, 0x00	; 0
    9080:	90 e0       	ldi	r25, 0x00	; 0
    9082:	a8 ec       	ldi	r26, 0xC8	; 200
    9084:	b2 e4       	ldi	r27, 0x42	; 66
    9086:	80 83       	st	Z, r24
    9088:	91 83       	std	Z+1, r25	; 0x01
    908a:	a2 83       	std	Z+2, r26	; 0x02
    908c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    908e:	8e 01       	movw	r16, r28
    9090:	01 5c       	subi	r16, 0xC1	; 193
    9092:	1f 4f       	sbci	r17, 0xFF	; 255
    9094:	fe 01       	movw	r30, r28
    9096:	ed 5b       	subi	r30, 0xBD	; 189
    9098:	ff 4f       	sbci	r31, 0xFF	; 255
    909a:	60 81       	ld	r22, Z
    909c:	71 81       	ldd	r23, Z+1	; 0x01
    909e:	82 81       	ldd	r24, Z+2	; 0x02
    90a0:	93 81       	ldd	r25, Z+3	; 0x03
    90a2:	20 e0       	ldi	r18, 0x00	; 0
    90a4:	30 e0       	ldi	r19, 0x00	; 0
    90a6:	4a ef       	ldi	r20, 0xFA	; 250
    90a8:	54 e4       	ldi	r21, 0x44	; 68
    90aa:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    90ae:	dc 01       	movw	r26, r24
    90b0:	cb 01       	movw	r24, r22
    90b2:	f8 01       	movw	r30, r16
    90b4:	80 83       	st	Z, r24
    90b6:	91 83       	std	Z+1, r25	; 0x01
    90b8:	a2 83       	std	Z+2, r26	; 0x02
    90ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    90bc:	fe 01       	movw	r30, r28
    90be:	ff 96       	adiw	r30, 0x3f	; 63
    90c0:	60 81       	ld	r22, Z
    90c2:	71 81       	ldd	r23, Z+1	; 0x01
    90c4:	82 81       	ldd	r24, Z+2	; 0x02
    90c6:	93 81       	ldd	r25, Z+3	; 0x03
    90c8:	20 e0       	ldi	r18, 0x00	; 0
    90ca:	30 e0       	ldi	r19, 0x00	; 0
    90cc:	40 e8       	ldi	r20, 0x80	; 128
    90ce:	5f e3       	ldi	r21, 0x3F	; 63
    90d0:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    90d4:	88 23       	and	r24, r24
    90d6:	2c f4       	brge	.+10     	; 0x90e2 <main+0x6e2>
		__ticks = 1;
    90d8:	81 e0       	ldi	r24, 0x01	; 1
    90da:	90 e0       	ldi	r25, 0x00	; 0
    90dc:	9e af       	std	Y+62, r25	; 0x3e
    90de:	8d af       	std	Y+61, r24	; 0x3d
    90e0:	46 c0       	rjmp	.+140    	; 0x916e <main+0x76e>
	else if (__tmp > 65535)
    90e2:	fe 01       	movw	r30, r28
    90e4:	ff 96       	adiw	r30, 0x3f	; 63
    90e6:	60 81       	ld	r22, Z
    90e8:	71 81       	ldd	r23, Z+1	; 0x01
    90ea:	82 81       	ldd	r24, Z+2	; 0x02
    90ec:	93 81       	ldd	r25, Z+3	; 0x03
    90ee:	20 e0       	ldi	r18, 0x00	; 0
    90f0:	3f ef       	ldi	r19, 0xFF	; 255
    90f2:	4f e7       	ldi	r20, 0x7F	; 127
    90f4:	57 e4       	ldi	r21, 0x47	; 71
    90f6:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    90fa:	18 16       	cp	r1, r24
    90fc:	64 f5       	brge	.+88     	; 0x9156 <main+0x756>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    90fe:	fe 01       	movw	r30, r28
    9100:	ed 5b       	subi	r30, 0xBD	; 189
    9102:	ff 4f       	sbci	r31, 0xFF	; 255
    9104:	60 81       	ld	r22, Z
    9106:	71 81       	ldd	r23, Z+1	; 0x01
    9108:	82 81       	ldd	r24, Z+2	; 0x02
    910a:	93 81       	ldd	r25, Z+3	; 0x03
    910c:	20 e0       	ldi	r18, 0x00	; 0
    910e:	30 e0       	ldi	r19, 0x00	; 0
    9110:	40 e2       	ldi	r20, 0x20	; 32
    9112:	51 e4       	ldi	r21, 0x41	; 65
    9114:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    9118:	dc 01       	movw	r26, r24
    911a:	cb 01       	movw	r24, r22
    911c:	bc 01       	movw	r22, r24
    911e:	cd 01       	movw	r24, r26
    9120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9124:	dc 01       	movw	r26, r24
    9126:	cb 01       	movw	r24, r22
    9128:	9e af       	std	Y+62, r25	; 0x3e
    912a:	8d af       	std	Y+61, r24	; 0x3d
    912c:	0f c0       	rjmp	.+30     	; 0x914c <main+0x74c>
    912e:	88 ec       	ldi	r24, 0xC8	; 200
    9130:	90 e0       	ldi	r25, 0x00	; 0
    9132:	9c af       	std	Y+60, r25	; 0x3c
    9134:	8b af       	std	Y+59, r24	; 0x3b
    9136:	8b ad       	ldd	r24, Y+59	; 0x3b
    9138:	9c ad       	ldd	r25, Y+60	; 0x3c
    913a:	01 97       	sbiw	r24, 0x01	; 1
    913c:	f1 f7       	brne	.-4      	; 0x913a <main+0x73a>
    913e:	9c af       	std	Y+60, r25	; 0x3c
    9140:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9142:	8d ad       	ldd	r24, Y+61	; 0x3d
    9144:	9e ad       	ldd	r25, Y+62	; 0x3e
    9146:	01 97       	sbiw	r24, 0x01	; 1
    9148:	9e af       	std	Y+62, r25	; 0x3e
    914a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    914c:	8d ad       	ldd	r24, Y+61	; 0x3d
    914e:	9e ad       	ldd	r25, Y+62	; 0x3e
    9150:	00 97       	sbiw	r24, 0x00	; 0
    9152:	69 f7       	brne	.-38     	; 0x912e <main+0x72e>
    9154:	16 c0       	rjmp	.+44     	; 0x9182 <main+0x782>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9156:	fe 01       	movw	r30, r28
    9158:	ff 96       	adiw	r30, 0x3f	; 63
    915a:	60 81       	ld	r22, Z
    915c:	71 81       	ldd	r23, Z+1	; 0x01
    915e:	82 81       	ldd	r24, Z+2	; 0x02
    9160:	93 81       	ldd	r25, Z+3	; 0x03
    9162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9166:	dc 01       	movw	r26, r24
    9168:	cb 01       	movw	r24, r22
    916a:	9e af       	std	Y+62, r25	; 0x3e
    916c:	8d af       	std	Y+61, r24	; 0x3d
    916e:	8d ad       	ldd	r24, Y+61	; 0x3d
    9170:	9e ad       	ldd	r25, Y+62	; 0x3e
    9172:	9a af       	std	Y+58, r25	; 0x3a
    9174:	89 af       	std	Y+57, r24	; 0x39
    9176:	89 ad       	ldd	r24, Y+57	; 0x39
    9178:	9a ad       	ldd	r25, Y+58	; 0x3a
    917a:	01 97       	sbiw	r24, 0x01	; 1
    917c:	f1 f7       	brne	.-4      	; 0x917a <main+0x77a>
    917e:	9a af       	std	Y+58, r25	; 0x3a
    9180:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(100);
				CLCD_voidSendCharPosition(Local_u8KeypadValue,1,Local_u8CounterLoginPass);
    9182:	fe 01       	movw	r30, r28
    9184:	ed 59       	subi	r30, 0x9D	; 157
    9186:	ff 4f       	sbci	r31, 0xFF	; 255
    9188:	de 01       	movw	r26, r28
    918a:	aa 59       	subi	r26, 0x9A	; 154
    918c:	bf 4f       	sbci	r27, 0xFF	; 255
    918e:	80 81       	ld	r24, Z
    9190:	61 e0       	ldi	r22, 0x01	; 1
    9192:	4c 91       	ld	r20, X
    9194:	0e 94 e7 17 	call	0x2fce	; 0x2fce <CLCD_voidSendCharPosition>
				Local_u8ArrLoginPass[Local_u8CounterLoginPass]=Local_u8KeypadValue;
    9198:	fe 01       	movw	r30, r28
    919a:	ea 59       	subi	r30, 0x9A	; 154
    919c:	ff 4f       	sbci	r31, 0xFF	; 255
    919e:	80 81       	ld	r24, Z
    91a0:	28 2f       	mov	r18, r24
    91a2:	30 e0       	ldi	r19, 0x00	; 0
    91a4:	ce 01       	movw	r24, r28
    91a6:	80 59       	subi	r24, 0x90	; 144
    91a8:	9f 4f       	sbci	r25, 0xFF	; 255
    91aa:	dc 01       	movw	r26, r24
    91ac:	a2 0f       	add	r26, r18
    91ae:	b3 1f       	adc	r27, r19
    91b0:	fe 01       	movw	r30, r28
    91b2:	ed 59       	subi	r30, 0x9D	; 157
    91b4:	ff 4f       	sbci	r31, 0xFF	; 255
    91b6:	80 81       	ld	r24, Z
    91b8:	8c 93       	st	X, r24
				Local_u8CounterLoginPass++;
    91ba:	de 01       	movw	r26, r28
    91bc:	aa 59       	subi	r26, 0x9A	; 154
    91be:	bf 4f       	sbci	r27, 0xFF	; 255
    91c0:	fe 01       	movw	r30, r28
    91c2:	ea 59       	subi	r30, 0x9A	; 154
    91c4:	ff 4f       	sbci	r31, 0xFF	; 255
    91c6:	80 81       	ld	r24, Z
    91c8:	8f 5f       	subi	r24, 0xFF	; 255
    91ca:	8c 93       	st	X, r24
			/*Clear LCD and wait check password*/
			CLCD_voidClearLCD();
			CLCD_voidSendStringPosition("Enter Password", 0 , 0);
			Local_u8KeypadValue = KPD_NO_PRESSES_KEY;

			while(Local_u8KeypadValue != '%'  && (Local_u8Start_closedSystem != 2))
    91cc:	fe 01       	movw	r30, r28
    91ce:	ed 59       	subi	r30, 0x9D	; 157
    91d0:	ff 4f       	sbci	r31, 0xFF	; 255
    91d2:	80 81       	ld	r24, Z
    91d4:	85 32       	cpi	r24, 0x25	; 37
    91d6:	29 f0       	breq	.+10     	; 0x91e2 <main+0x7e2>
    91d8:	80 91 55 02 	lds	r24, 0x0255
    91dc:	82 30       	cpi	r24, 0x02	; 2
    91de:	09 f0       	breq	.+2      	; 0x91e2 <main+0x7e2>
    91e0:	38 cf       	rjmp	.-400    	; 0x9052 <main+0x652>
				Local_u8CounterLoginPass++;

			}


			CLCD_voidClearLCD();
    91e2:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <CLCD_voidClearLCD>
			CLCD_voidSendStringPosition("Pleased Waiting..",0,0);
    91e6:	8f ec       	ldi	r24, 0xCF	; 207
    91e8:	90 e0       	ldi	r25, 0x00	; 0
    91ea:	60 e0       	ldi	r22, 0x00	; 0
    91ec:	40 e0       	ldi	r20, 0x00	; 0
    91ee:	0e 94 02 1a 	call	0x3404	; 0x3404 <CLCD_voidSendStringPosition>
			CLCD_voidSendStringPosition("System Save Data", 1,0);
    91f2:	81 ee       	ldi	r24, 0xE1	; 225
    91f4:	90 e0       	ldi	r25, 0x00	; 0
    91f6:	61 e0       	ldi	r22, 0x01	; 1
    91f8:	40 e0       	ldi	r20, 0x00	; 0
    91fa:	0e 94 02 1a 	call	0x3404	; 0x3404 <CLCD_voidSendStringPosition>
    91fe:	80 e0       	ldi	r24, 0x00	; 0
    9200:	90 e0       	ldi	r25, 0x00	; 0
    9202:	aa ef       	ldi	r26, 0xFA	; 250
    9204:	b4 e4       	ldi	r27, 0x44	; 68
    9206:	8d ab       	std	Y+53, r24	; 0x35
    9208:	9e ab       	std	Y+54, r25	; 0x36
    920a:	af ab       	std	Y+55, r26	; 0x37
    920c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    920e:	6d a9       	ldd	r22, Y+53	; 0x35
    9210:	7e a9       	ldd	r23, Y+54	; 0x36
    9212:	8f a9       	ldd	r24, Y+55	; 0x37
    9214:	98 ad       	ldd	r25, Y+56	; 0x38
    9216:	20 e0       	ldi	r18, 0x00	; 0
    9218:	30 e0       	ldi	r19, 0x00	; 0
    921a:	4a ef       	ldi	r20, 0xFA	; 250
    921c:	54 e4       	ldi	r21, 0x44	; 68
    921e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    9222:	dc 01       	movw	r26, r24
    9224:	cb 01       	movw	r24, r22
    9226:	89 ab       	std	Y+49, r24	; 0x31
    9228:	9a ab       	std	Y+50, r25	; 0x32
    922a:	ab ab       	std	Y+51, r26	; 0x33
    922c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    922e:	69 a9       	ldd	r22, Y+49	; 0x31
    9230:	7a a9       	ldd	r23, Y+50	; 0x32
    9232:	8b a9       	ldd	r24, Y+51	; 0x33
    9234:	9c a9       	ldd	r25, Y+52	; 0x34
    9236:	20 e0       	ldi	r18, 0x00	; 0
    9238:	30 e0       	ldi	r19, 0x00	; 0
    923a:	40 e8       	ldi	r20, 0x80	; 128
    923c:	5f e3       	ldi	r21, 0x3F	; 63
    923e:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    9242:	88 23       	and	r24, r24
    9244:	2c f4       	brge	.+10     	; 0x9250 <main+0x850>
		__ticks = 1;
    9246:	81 e0       	ldi	r24, 0x01	; 1
    9248:	90 e0       	ldi	r25, 0x00	; 0
    924a:	98 ab       	std	Y+48, r25	; 0x30
    924c:	8f a7       	std	Y+47, r24	; 0x2f
    924e:	3f c0       	rjmp	.+126    	; 0x92ce <main+0x8ce>
	else if (__tmp > 65535)
    9250:	69 a9       	ldd	r22, Y+49	; 0x31
    9252:	7a a9       	ldd	r23, Y+50	; 0x32
    9254:	8b a9       	ldd	r24, Y+51	; 0x33
    9256:	9c a9       	ldd	r25, Y+52	; 0x34
    9258:	20 e0       	ldi	r18, 0x00	; 0
    925a:	3f ef       	ldi	r19, 0xFF	; 255
    925c:	4f e7       	ldi	r20, 0x7F	; 127
    925e:	57 e4       	ldi	r21, 0x47	; 71
    9260:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    9264:	18 16       	cp	r1, r24
    9266:	4c f5       	brge	.+82     	; 0x92ba <main+0x8ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9268:	6d a9       	ldd	r22, Y+53	; 0x35
    926a:	7e a9       	ldd	r23, Y+54	; 0x36
    926c:	8f a9       	ldd	r24, Y+55	; 0x37
    926e:	98 ad       	ldd	r25, Y+56	; 0x38
    9270:	20 e0       	ldi	r18, 0x00	; 0
    9272:	30 e0       	ldi	r19, 0x00	; 0
    9274:	40 e2       	ldi	r20, 0x20	; 32
    9276:	51 e4       	ldi	r21, 0x41	; 65
    9278:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    927c:	dc 01       	movw	r26, r24
    927e:	cb 01       	movw	r24, r22
    9280:	bc 01       	movw	r22, r24
    9282:	cd 01       	movw	r24, r26
    9284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9288:	dc 01       	movw	r26, r24
    928a:	cb 01       	movw	r24, r22
    928c:	98 ab       	std	Y+48, r25	; 0x30
    928e:	8f a7       	std	Y+47, r24	; 0x2f
    9290:	0f c0       	rjmp	.+30     	; 0x92b0 <main+0x8b0>
    9292:	88 ec       	ldi	r24, 0xC8	; 200
    9294:	90 e0       	ldi	r25, 0x00	; 0
    9296:	9e a7       	std	Y+46, r25	; 0x2e
    9298:	8d a7       	std	Y+45, r24	; 0x2d
    929a:	8d a5       	ldd	r24, Y+45	; 0x2d
    929c:	9e a5       	ldd	r25, Y+46	; 0x2e
    929e:	01 97       	sbiw	r24, 0x01	; 1
    92a0:	f1 f7       	brne	.-4      	; 0x929e <main+0x89e>
    92a2:	9e a7       	std	Y+46, r25	; 0x2e
    92a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    92a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    92a8:	98 a9       	ldd	r25, Y+48	; 0x30
    92aa:	01 97       	sbiw	r24, 0x01	; 1
    92ac:	98 ab       	std	Y+48, r25	; 0x30
    92ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    92b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    92b2:	98 a9       	ldd	r25, Y+48	; 0x30
    92b4:	00 97       	sbiw	r24, 0x00	; 0
    92b6:	69 f7       	brne	.-38     	; 0x9292 <main+0x892>
    92b8:	14 c0       	rjmp	.+40     	; 0x92e2 <main+0x8e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    92ba:	69 a9       	ldd	r22, Y+49	; 0x31
    92bc:	7a a9       	ldd	r23, Y+50	; 0x32
    92be:	8b a9       	ldd	r24, Y+51	; 0x33
    92c0:	9c a9       	ldd	r25, Y+52	; 0x34
    92c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    92c6:	dc 01       	movw	r26, r24
    92c8:	cb 01       	movw	r24, r22
    92ca:	98 ab       	std	Y+48, r25	; 0x30
    92cc:	8f a7       	std	Y+47, r24	; 0x2f
    92ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    92d0:	98 a9       	ldd	r25, Y+48	; 0x30
    92d2:	9c a7       	std	Y+44, r25	; 0x2c
    92d4:	8b a7       	std	Y+43, r24	; 0x2b
    92d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    92d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    92da:	01 97       	sbiw	r24, 0x01	; 1
    92dc:	f1 f7       	brne	.-4      	; 0x92da <main+0x8da>
    92de:	9c a7       	std	Y+44, r25	; 0x2c
    92e0:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2000);
			CLCD_voidClearLCD();
    92e2:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <CLCD_voidClearLCD>



			/*To Register the Pass */
			CLCD_voidSendStringPosition("Member ID ",0,0);
    92e6:	82 ef       	ldi	r24, 0xF2	; 242
    92e8:	90 e0       	ldi	r25, 0x00	; 0
    92ea:	60 e0       	ldi	r22, 0x00	; 0
    92ec:	40 e0       	ldi	r20, 0x00	; 0
    92ee:	0e 94 02 1a 	call	0x3404	; 0x3404 <CLCD_voidSendStringPosition>
    92f2:	b0 c0       	rjmp	.+352    	; 0x9454 <main+0xa54>
			/*Save the ID member*/
			while((Local_u8Start_closedSystem != 2))
			{
				/*wait for pressed key*/
				do{
					Local_u8KeypadValue = KPD_u8GetPressedKey();
    92f4:	0e 94 0d 2a 	call	0x541a	; 0x541a <KPD_u8GetPressedKey>
    92f8:	fe 01       	movw	r30, r28
    92fa:	ed 59       	subi	r30, 0x9D	; 157
    92fc:	ff 4f       	sbci	r31, 0xFF	; 255
    92fe:	80 83       	st	Z, r24
				}while( Local_u8KeypadValue == KPD_NO_PRESSES_KEY);
    9300:	fe 01       	movw	r30, r28
    9302:	ed 59       	subi	r30, 0x9D	; 157
    9304:	ff 4f       	sbci	r31, 0xFF	; 255
    9306:	80 81       	ld	r24, Z
    9308:	8f 3f       	cpi	r24, 0xFF	; 255
    930a:	a1 f3       	breq	.-24     	; 0x92f4 <main+0x8f4>

				/*enter is save the password*/
				if (Local_u8KeypadValue == '%'){ break; }
    930c:	fe 01       	movw	r30, r28
    930e:	ed 59       	subi	r30, 0x9D	; 157
    9310:	ff 4f       	sbci	r31, 0xFF	; 255
    9312:	80 81       	ld	r24, Z
    9314:	85 32       	cpi	r24, 0x25	; 37
    9316:	09 f4       	brne	.+2      	; 0x931a <main+0x91a>
    9318:	a2 c0       	rjmp	.+324    	; 0x945e <main+0xa5e>

				/*print the valued in LCD*/
				CLCD_voidSendINTNumberPosition(Local_u8KeypadValue,1,Local_u8CounterCheckLoginID);
    931a:	fe 01       	movw	r30, r28
    931c:	ed 59       	subi	r30, 0x9D	; 157
    931e:	ff 4f       	sbci	r31, 0xFF	; 255
    9320:	80 81       	ld	r24, Z
    9322:	88 2f       	mov	r24, r24
    9324:	90 e0       	ldi	r25, 0x00	; 0
    9326:	a0 e0       	ldi	r26, 0x00	; 0
    9328:	b0 e0       	ldi	r27, 0x00	; 0
    932a:	fe 01       	movw	r30, r28
    932c:	eb 59       	subi	r30, 0x9B	; 155
    932e:	ff 4f       	sbci	r31, 0xFF	; 255
    9330:	bc 01       	movw	r22, r24
    9332:	cd 01       	movw	r24, r26
    9334:	41 e0       	ldi	r20, 0x01	; 1
    9336:	20 81       	ld	r18, Z
    9338:	0e 94 97 1b 	call	0x372e	; 0x372e <CLCD_voidSendINTNumberPosition>
    933c:	80 e0       	ldi	r24, 0x00	; 0
    933e:	90 e0       	ldi	r25, 0x00	; 0
    9340:	a8 e4       	ldi	r26, 0x48	; 72
    9342:	b3 e4       	ldi	r27, 0x43	; 67
    9344:	8f a3       	std	Y+39, r24	; 0x27
    9346:	98 a7       	std	Y+40, r25	; 0x28
    9348:	a9 a7       	std	Y+41, r26	; 0x29
    934a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    934c:	6f a1       	ldd	r22, Y+39	; 0x27
    934e:	78 a5       	ldd	r23, Y+40	; 0x28
    9350:	89 a5       	ldd	r24, Y+41	; 0x29
    9352:	9a a5       	ldd	r25, Y+42	; 0x2a
    9354:	20 e0       	ldi	r18, 0x00	; 0
    9356:	30 e0       	ldi	r19, 0x00	; 0
    9358:	4a ef       	ldi	r20, 0xFA	; 250
    935a:	54 e4       	ldi	r21, 0x44	; 68
    935c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    9360:	dc 01       	movw	r26, r24
    9362:	cb 01       	movw	r24, r22
    9364:	8b a3       	std	Y+35, r24	; 0x23
    9366:	9c a3       	std	Y+36, r25	; 0x24
    9368:	ad a3       	std	Y+37, r26	; 0x25
    936a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    936c:	6b a1       	ldd	r22, Y+35	; 0x23
    936e:	7c a1       	ldd	r23, Y+36	; 0x24
    9370:	8d a1       	ldd	r24, Y+37	; 0x25
    9372:	9e a1       	ldd	r25, Y+38	; 0x26
    9374:	20 e0       	ldi	r18, 0x00	; 0
    9376:	30 e0       	ldi	r19, 0x00	; 0
    9378:	40 e8       	ldi	r20, 0x80	; 128
    937a:	5f e3       	ldi	r21, 0x3F	; 63
    937c:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    9380:	88 23       	and	r24, r24
    9382:	2c f4       	brge	.+10     	; 0x938e <main+0x98e>
		__ticks = 1;
    9384:	81 e0       	ldi	r24, 0x01	; 1
    9386:	90 e0       	ldi	r25, 0x00	; 0
    9388:	9a a3       	std	Y+34, r25	; 0x22
    938a:	89 a3       	std	Y+33, r24	; 0x21
    938c:	3f c0       	rjmp	.+126    	; 0x940c <main+0xa0c>
	else if (__tmp > 65535)
    938e:	6b a1       	ldd	r22, Y+35	; 0x23
    9390:	7c a1       	ldd	r23, Y+36	; 0x24
    9392:	8d a1       	ldd	r24, Y+37	; 0x25
    9394:	9e a1       	ldd	r25, Y+38	; 0x26
    9396:	20 e0       	ldi	r18, 0x00	; 0
    9398:	3f ef       	ldi	r19, 0xFF	; 255
    939a:	4f e7       	ldi	r20, 0x7F	; 127
    939c:	57 e4       	ldi	r21, 0x47	; 71
    939e:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    93a2:	18 16       	cp	r1, r24
    93a4:	4c f5       	brge	.+82     	; 0x93f8 <main+0x9f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    93a6:	6f a1       	ldd	r22, Y+39	; 0x27
    93a8:	78 a5       	ldd	r23, Y+40	; 0x28
    93aa:	89 a5       	ldd	r24, Y+41	; 0x29
    93ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    93ae:	20 e0       	ldi	r18, 0x00	; 0
    93b0:	30 e0       	ldi	r19, 0x00	; 0
    93b2:	40 e2       	ldi	r20, 0x20	; 32
    93b4:	51 e4       	ldi	r21, 0x41	; 65
    93b6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    93ba:	dc 01       	movw	r26, r24
    93bc:	cb 01       	movw	r24, r22
    93be:	bc 01       	movw	r22, r24
    93c0:	cd 01       	movw	r24, r26
    93c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    93c6:	dc 01       	movw	r26, r24
    93c8:	cb 01       	movw	r24, r22
    93ca:	9a a3       	std	Y+34, r25	; 0x22
    93cc:	89 a3       	std	Y+33, r24	; 0x21
    93ce:	0f c0       	rjmp	.+30     	; 0x93ee <main+0x9ee>
    93d0:	88 ec       	ldi	r24, 0xC8	; 200
    93d2:	90 e0       	ldi	r25, 0x00	; 0
    93d4:	98 a3       	std	Y+32, r25	; 0x20
    93d6:	8f 8f       	std	Y+31, r24	; 0x1f
    93d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    93da:	98 a1       	ldd	r25, Y+32	; 0x20
    93dc:	01 97       	sbiw	r24, 0x01	; 1
    93de:	f1 f7       	brne	.-4      	; 0x93dc <main+0x9dc>
    93e0:	98 a3       	std	Y+32, r25	; 0x20
    93e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    93e4:	89 a1       	ldd	r24, Y+33	; 0x21
    93e6:	9a a1       	ldd	r25, Y+34	; 0x22
    93e8:	01 97       	sbiw	r24, 0x01	; 1
    93ea:	9a a3       	std	Y+34, r25	; 0x22
    93ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    93ee:	89 a1       	ldd	r24, Y+33	; 0x21
    93f0:	9a a1       	ldd	r25, Y+34	; 0x22
    93f2:	00 97       	sbiw	r24, 0x00	; 0
    93f4:	69 f7       	brne	.-38     	; 0x93d0 <main+0x9d0>
    93f6:	14 c0       	rjmp	.+40     	; 0x9420 <main+0xa20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    93f8:	6b a1       	ldd	r22, Y+35	; 0x23
    93fa:	7c a1       	ldd	r23, Y+36	; 0x24
    93fc:	8d a1       	ldd	r24, Y+37	; 0x25
    93fe:	9e a1       	ldd	r25, Y+38	; 0x26
    9400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9404:	dc 01       	movw	r26, r24
    9406:	cb 01       	movw	r24, r22
    9408:	9a a3       	std	Y+34, r25	; 0x22
    940a:	89 a3       	std	Y+33, r24	; 0x21
    940c:	89 a1       	ldd	r24, Y+33	; 0x21
    940e:	9a a1       	ldd	r25, Y+34	; 0x22
    9410:	9e 8f       	std	Y+30, r25	; 0x1e
    9412:	8d 8f       	std	Y+29, r24	; 0x1d
    9414:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9416:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9418:	01 97       	sbiw	r24, 0x01	; 1
    941a:	f1 f7       	brne	.-4      	; 0x9418 <main+0xa18>
    941c:	9e 8f       	std	Y+30, r25	; 0x1e
    941e:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(200);

				/*stored the valued in */
				Local_u8ArrCheckLoginID[Local_u8CounterCheckLoginID]=Local_u8KeypadValue;
    9420:	fe 01       	movw	r30, r28
    9422:	eb 59       	subi	r30, 0x9B	; 155
    9424:	ff 4f       	sbci	r31, 0xFF	; 255
    9426:	80 81       	ld	r24, Z
    9428:	28 2f       	mov	r18, r24
    942a:	30 e0       	ldi	r19, 0x00	; 0
    942c:	ce 01       	movw	r24, r28
    942e:	88 58       	subi	r24, 0x88	; 136
    9430:	9f 4f       	sbci	r25, 0xFF	; 255
    9432:	dc 01       	movw	r26, r24
    9434:	a2 0f       	add	r26, r18
    9436:	b3 1f       	adc	r27, r19
    9438:	fe 01       	movw	r30, r28
    943a:	ed 59       	subi	r30, 0x9D	; 157
    943c:	ff 4f       	sbci	r31, 0xFF	; 255
    943e:	80 81       	ld	r24, Z
    9440:	8c 93       	st	X, r24
				Local_u8CounterCheckLoginID++;
    9442:	de 01       	movw	r26, r28
    9444:	ab 59       	subi	r26, 0x9B	; 155
    9446:	bf 4f       	sbci	r27, 0xFF	; 255
    9448:	fe 01       	movw	r30, r28
    944a:	eb 59       	subi	r30, 0x9B	; 155
    944c:	ff 4f       	sbci	r31, 0xFF	; 255
    944e:	80 81       	ld	r24, Z
    9450:	8f 5f       	subi	r24, 0xFF	; 255
    9452:	8c 93       	st	X, r24


			/*To Register the Pass */
			CLCD_voidSendStringPosition("Member ID ",0,0);
			/*Save the ID member*/
			while((Local_u8Start_closedSystem != 2))
    9454:	80 91 55 02 	lds	r24, 0x0255
    9458:	82 30       	cpi	r24, 0x02	; 2
    945a:	09 f0       	breq	.+2      	; 0x945e <main+0xa5e>
    945c:	4b cf       	rjmp	.-362    	; 0x92f4 <main+0x8f4>
				Local_u8CounterCheckLoginID++;
			}


			/*Clear LCD and enter the pass*/
			CLCD_voidClearLCD();
    945e:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <CLCD_voidClearLCD>
			CLCD_voidSendStringPosition("Enter Password", 0 , 0);
    9462:	80 ec       	ldi	r24, 0xC0	; 192
    9464:	90 e0       	ldi	r25, 0x00	; 0
    9466:	60 e0       	ldi	r22, 0x00	; 0
    9468:	40 e0       	ldi	r20, 0x00	; 0
    946a:	0e 94 02 1a 	call	0x3404	; 0x3404 <CLCD_voidSendStringPosition>
			Local_u8KeypadValue = KPD_NO_PRESSES_KEY;
    946e:	fe 01       	movw	r30, r28
    9470:	ed 59       	subi	r30, 0x9D	; 157
    9472:	ff 4f       	sbci	r31, 0xFF	; 255
    9474:	8f ef       	ldi	r24, 0xFF	; 255
    9476:	80 83       	st	Z, r24
    9478:	a7 c0       	rjmp	.+334    	; 0x95c8 <main+0xbc8>

			while(Local_u8KeypadValue != '%'  && (Local_u8Start_closedSystem != 2))
			{
				do{
					Local_u8KeypadValue=KPD_u8GetPressedKey();
    947a:	0e 94 0d 2a 	call	0x541a	; 0x541a <KPD_u8GetPressedKey>
    947e:	fe 01       	movw	r30, r28
    9480:	ed 59       	subi	r30, 0x9D	; 157
    9482:	ff 4f       	sbci	r31, 0xFF	; 255
    9484:	80 83       	st	Z, r24
				}while(Local_u8KeypadValue == KPD_NO_PRESSES_KEY);
    9486:	fe 01       	movw	r30, r28
    9488:	ed 59       	subi	r30, 0x9D	; 157
    948a:	ff 4f       	sbci	r31, 0xFF	; 255
    948c:	80 81       	ld	r24, Z
    948e:	8f 3f       	cpi	r24, 0xFF	; 255
    9490:	a1 f3       	breq	.-24     	; 0x947a <main+0xa7a>

				if (Local_u8KeypadValue == '%'){ break; }
    9492:	fe 01       	movw	r30, r28
    9494:	ed 59       	subi	r30, 0x9D	; 157
    9496:	ff 4f       	sbci	r31, 0xFF	; 255
    9498:	80 81       	ld	r24, Z
    949a:	85 32       	cpi	r24, 0x25	; 37
    949c:	09 f4       	brne	.+2      	; 0x94a0 <main+0xaa0>
    949e:	9f c0       	rjmp	.+318    	; 0x95de <main+0xbde>
    94a0:	80 e0       	ldi	r24, 0x00	; 0
    94a2:	90 e0       	ldi	r25, 0x00	; 0
    94a4:	a8 ec       	ldi	r26, 0xC8	; 200
    94a6:	b2 e4       	ldi	r27, 0x42	; 66
    94a8:	89 8f       	std	Y+25, r24	; 0x19
    94aa:	9a 8f       	std	Y+26, r25	; 0x1a
    94ac:	ab 8f       	std	Y+27, r26	; 0x1b
    94ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    94b0:	69 8d       	ldd	r22, Y+25	; 0x19
    94b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    94b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    94b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    94b8:	20 e0       	ldi	r18, 0x00	; 0
    94ba:	30 e0       	ldi	r19, 0x00	; 0
    94bc:	4a ef       	ldi	r20, 0xFA	; 250
    94be:	54 e4       	ldi	r21, 0x44	; 68
    94c0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    94c4:	dc 01       	movw	r26, r24
    94c6:	cb 01       	movw	r24, r22
    94c8:	8d 8b       	std	Y+21, r24	; 0x15
    94ca:	9e 8b       	std	Y+22, r25	; 0x16
    94cc:	af 8b       	std	Y+23, r26	; 0x17
    94ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    94d0:	6d 89       	ldd	r22, Y+21	; 0x15
    94d2:	7e 89       	ldd	r23, Y+22	; 0x16
    94d4:	8f 89       	ldd	r24, Y+23	; 0x17
    94d6:	98 8d       	ldd	r25, Y+24	; 0x18
    94d8:	20 e0       	ldi	r18, 0x00	; 0
    94da:	30 e0       	ldi	r19, 0x00	; 0
    94dc:	40 e8       	ldi	r20, 0x80	; 128
    94de:	5f e3       	ldi	r21, 0x3F	; 63
    94e0:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    94e4:	88 23       	and	r24, r24
    94e6:	2c f4       	brge	.+10     	; 0x94f2 <main+0xaf2>
		__ticks = 1;
    94e8:	81 e0       	ldi	r24, 0x01	; 1
    94ea:	90 e0       	ldi	r25, 0x00	; 0
    94ec:	9c 8b       	std	Y+20, r25	; 0x14
    94ee:	8b 8b       	std	Y+19, r24	; 0x13
    94f0:	3f c0       	rjmp	.+126    	; 0x9570 <main+0xb70>
	else if (__tmp > 65535)
    94f2:	6d 89       	ldd	r22, Y+21	; 0x15
    94f4:	7e 89       	ldd	r23, Y+22	; 0x16
    94f6:	8f 89       	ldd	r24, Y+23	; 0x17
    94f8:	98 8d       	ldd	r25, Y+24	; 0x18
    94fa:	20 e0       	ldi	r18, 0x00	; 0
    94fc:	3f ef       	ldi	r19, 0xFF	; 255
    94fe:	4f e7       	ldi	r20, 0x7F	; 127
    9500:	57 e4       	ldi	r21, 0x47	; 71
    9502:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    9506:	18 16       	cp	r1, r24
    9508:	4c f5       	brge	.+82     	; 0x955c <main+0xb5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    950a:	69 8d       	ldd	r22, Y+25	; 0x19
    950c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    950e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9510:	9c 8d       	ldd	r25, Y+28	; 0x1c
    9512:	20 e0       	ldi	r18, 0x00	; 0
    9514:	30 e0       	ldi	r19, 0x00	; 0
    9516:	40 e2       	ldi	r20, 0x20	; 32
    9518:	51 e4       	ldi	r21, 0x41	; 65
    951a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    951e:	dc 01       	movw	r26, r24
    9520:	cb 01       	movw	r24, r22
    9522:	bc 01       	movw	r22, r24
    9524:	cd 01       	movw	r24, r26
    9526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    952a:	dc 01       	movw	r26, r24
    952c:	cb 01       	movw	r24, r22
    952e:	9c 8b       	std	Y+20, r25	; 0x14
    9530:	8b 8b       	std	Y+19, r24	; 0x13
    9532:	0f c0       	rjmp	.+30     	; 0x9552 <main+0xb52>
    9534:	88 ec       	ldi	r24, 0xC8	; 200
    9536:	90 e0       	ldi	r25, 0x00	; 0
    9538:	9a 8b       	std	Y+18, r25	; 0x12
    953a:	89 8b       	std	Y+17, r24	; 0x11
    953c:	89 89       	ldd	r24, Y+17	; 0x11
    953e:	9a 89       	ldd	r25, Y+18	; 0x12
    9540:	01 97       	sbiw	r24, 0x01	; 1
    9542:	f1 f7       	brne	.-4      	; 0x9540 <main+0xb40>
    9544:	9a 8b       	std	Y+18, r25	; 0x12
    9546:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9548:	8b 89       	ldd	r24, Y+19	; 0x13
    954a:	9c 89       	ldd	r25, Y+20	; 0x14
    954c:	01 97       	sbiw	r24, 0x01	; 1
    954e:	9c 8b       	std	Y+20, r25	; 0x14
    9550:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9552:	8b 89       	ldd	r24, Y+19	; 0x13
    9554:	9c 89       	ldd	r25, Y+20	; 0x14
    9556:	00 97       	sbiw	r24, 0x00	; 0
    9558:	69 f7       	brne	.-38     	; 0x9534 <main+0xb34>
    955a:	14 c0       	rjmp	.+40     	; 0x9584 <main+0xb84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    955c:	6d 89       	ldd	r22, Y+21	; 0x15
    955e:	7e 89       	ldd	r23, Y+22	; 0x16
    9560:	8f 89       	ldd	r24, Y+23	; 0x17
    9562:	98 8d       	ldd	r25, Y+24	; 0x18
    9564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9568:	dc 01       	movw	r26, r24
    956a:	cb 01       	movw	r24, r22
    956c:	9c 8b       	std	Y+20, r25	; 0x14
    956e:	8b 8b       	std	Y+19, r24	; 0x13
    9570:	8b 89       	ldd	r24, Y+19	; 0x13
    9572:	9c 89       	ldd	r25, Y+20	; 0x14
    9574:	98 8b       	std	Y+16, r25	; 0x10
    9576:	8f 87       	std	Y+15, r24	; 0x0f
    9578:	8f 85       	ldd	r24, Y+15	; 0x0f
    957a:	98 89       	ldd	r25, Y+16	; 0x10
    957c:	01 97       	sbiw	r24, 0x01	; 1
    957e:	f1 f7       	brne	.-4      	; 0x957c <main+0xb7c>
    9580:	98 8b       	std	Y+16, r25	; 0x10
    9582:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(100);
				CLCD_voidSendCharPosition('*',1,Local_u8CounterCheckLoginPass);
    9584:	fe 01       	movw	r30, r28
    9586:	ec 59       	subi	r30, 0x9C	; 156
    9588:	ff 4f       	sbci	r31, 0xFF	; 255
    958a:	8a e2       	ldi	r24, 0x2A	; 42
    958c:	61 e0       	ldi	r22, 0x01	; 1
    958e:	40 81       	ld	r20, Z
    9590:	0e 94 e7 17 	call	0x2fce	; 0x2fce <CLCD_voidSendCharPosition>
				Local_u8ArrCheckLoginPass[Local_u8CounterCheckLoginPass]=Local_u8KeypadValue;
    9594:	fe 01       	movw	r30, r28
    9596:	ec 59       	subi	r30, 0x9C	; 156
    9598:	ff 4f       	sbci	r31, 0xFF	; 255
    959a:	80 81       	ld	r24, Z
    959c:	28 2f       	mov	r18, r24
    959e:	30 e0       	ldi	r19, 0x00	; 0
    95a0:	ce 01       	movw	r24, r28
    95a2:	80 58       	subi	r24, 0x80	; 128
    95a4:	9f 4f       	sbci	r25, 0xFF	; 255
    95a6:	dc 01       	movw	r26, r24
    95a8:	a2 0f       	add	r26, r18
    95aa:	b3 1f       	adc	r27, r19
    95ac:	fe 01       	movw	r30, r28
    95ae:	ed 59       	subi	r30, 0x9D	; 157
    95b0:	ff 4f       	sbci	r31, 0xFF	; 255
    95b2:	80 81       	ld	r24, Z
    95b4:	8c 93       	st	X, r24
				Local_u8CounterCheckLoginPass++;
    95b6:	de 01       	movw	r26, r28
    95b8:	ac 59       	subi	r26, 0x9C	; 156
    95ba:	bf 4f       	sbci	r27, 0xFF	; 255
    95bc:	fe 01       	movw	r30, r28
    95be:	ec 59       	subi	r30, 0x9C	; 156
    95c0:	ff 4f       	sbci	r31, 0xFF	; 255
    95c2:	80 81       	ld	r24, Z
    95c4:	8f 5f       	subi	r24, 0xFF	; 255
    95c6:	8c 93       	st	X, r24
			/*Clear LCD and enter the pass*/
			CLCD_voidClearLCD();
			CLCD_voidSendStringPosition("Enter Password", 0 , 0);
			Local_u8KeypadValue = KPD_NO_PRESSES_KEY;

			while(Local_u8KeypadValue != '%'  && (Local_u8Start_closedSystem != 2))
    95c8:	fe 01       	movw	r30, r28
    95ca:	ed 59       	subi	r30, 0x9D	; 157
    95cc:	ff 4f       	sbci	r31, 0xFF	; 255
    95ce:	80 81       	ld	r24, Z
    95d0:	85 32       	cpi	r24, 0x25	; 37
    95d2:	29 f0       	breq	.+10     	; 0x95de <main+0xbde>
    95d4:	80 91 55 02 	lds	r24, 0x0255
    95d8:	82 30       	cpi	r24, 0x02	; 2
    95da:	09 f0       	breq	.+2      	; 0x95de <main+0xbde>
    95dc:	4e cf       	rjmp	.-356    	; 0x947a <main+0xa7a>





			CLCD_voidClearLCD();
    95de:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <CLCD_voidClearLCD>
			CLCD_voidSendStringPosition("Correct",0,0);
    95e2:	8d ef       	ldi	r24, 0xFD	; 253
    95e4:	90 e0       	ldi	r25, 0x00	; 0
    95e6:	60 e0       	ldi	r22, 0x00	; 0
    95e8:	40 e0       	ldi	r20, 0x00	; 0
    95ea:	0e 94 02 1a 	call	0x3404	; 0x3404 <CLCD_voidSendStringPosition>
    95ee:	80 e0       	ldi	r24, 0x00	; 0
    95f0:	90 e0       	ldi	r25, 0x00	; 0
    95f2:	aa e7       	ldi	r26, 0x7A	; 122
    95f4:	b4 e4       	ldi	r27, 0x44	; 68
    95f6:	8b 87       	std	Y+11, r24	; 0x0b
    95f8:	9c 87       	std	Y+12, r25	; 0x0c
    95fa:	ad 87       	std	Y+13, r26	; 0x0d
    95fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    95fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    9600:	7c 85       	ldd	r23, Y+12	; 0x0c
    9602:	8d 85       	ldd	r24, Y+13	; 0x0d
    9604:	9e 85       	ldd	r25, Y+14	; 0x0e
    9606:	20 e0       	ldi	r18, 0x00	; 0
    9608:	30 e0       	ldi	r19, 0x00	; 0
    960a:	4a ef       	ldi	r20, 0xFA	; 250
    960c:	54 e4       	ldi	r21, 0x44	; 68
    960e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    9612:	dc 01       	movw	r26, r24
    9614:	cb 01       	movw	r24, r22
    9616:	8f 83       	std	Y+7, r24	; 0x07
    9618:	98 87       	std	Y+8, r25	; 0x08
    961a:	a9 87       	std	Y+9, r26	; 0x09
    961c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    961e:	6f 81       	ldd	r22, Y+7	; 0x07
    9620:	78 85       	ldd	r23, Y+8	; 0x08
    9622:	89 85       	ldd	r24, Y+9	; 0x09
    9624:	9a 85       	ldd	r25, Y+10	; 0x0a
    9626:	20 e0       	ldi	r18, 0x00	; 0
    9628:	30 e0       	ldi	r19, 0x00	; 0
    962a:	40 e8       	ldi	r20, 0x80	; 128
    962c:	5f e3       	ldi	r21, 0x3F	; 63
    962e:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    9632:	88 23       	and	r24, r24
    9634:	2c f4       	brge	.+10     	; 0x9640 <main+0xc40>
		__ticks = 1;
    9636:	81 e0       	ldi	r24, 0x01	; 1
    9638:	90 e0       	ldi	r25, 0x00	; 0
    963a:	9e 83       	std	Y+6, r25	; 0x06
    963c:	8d 83       	std	Y+5, r24	; 0x05
    963e:	3f c0       	rjmp	.+126    	; 0x96be <main+0xcbe>
	else if (__tmp > 65535)
    9640:	6f 81       	ldd	r22, Y+7	; 0x07
    9642:	78 85       	ldd	r23, Y+8	; 0x08
    9644:	89 85       	ldd	r24, Y+9	; 0x09
    9646:	9a 85       	ldd	r25, Y+10	; 0x0a
    9648:	20 e0       	ldi	r18, 0x00	; 0
    964a:	3f ef       	ldi	r19, 0xFF	; 255
    964c:	4f e7       	ldi	r20, 0x7F	; 127
    964e:	57 e4       	ldi	r21, 0x47	; 71
    9650:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    9654:	18 16       	cp	r1, r24
    9656:	4c f5       	brge	.+82     	; 0x96aa <main+0xcaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9658:	6b 85       	ldd	r22, Y+11	; 0x0b
    965a:	7c 85       	ldd	r23, Y+12	; 0x0c
    965c:	8d 85       	ldd	r24, Y+13	; 0x0d
    965e:	9e 85       	ldd	r25, Y+14	; 0x0e
    9660:	20 e0       	ldi	r18, 0x00	; 0
    9662:	30 e0       	ldi	r19, 0x00	; 0
    9664:	40 e2       	ldi	r20, 0x20	; 32
    9666:	51 e4       	ldi	r21, 0x41	; 65
    9668:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    966c:	dc 01       	movw	r26, r24
    966e:	cb 01       	movw	r24, r22
    9670:	bc 01       	movw	r22, r24
    9672:	cd 01       	movw	r24, r26
    9674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9678:	dc 01       	movw	r26, r24
    967a:	cb 01       	movw	r24, r22
    967c:	9e 83       	std	Y+6, r25	; 0x06
    967e:	8d 83       	std	Y+5, r24	; 0x05
    9680:	0f c0       	rjmp	.+30     	; 0x96a0 <main+0xca0>
    9682:	88 ec       	ldi	r24, 0xC8	; 200
    9684:	90 e0       	ldi	r25, 0x00	; 0
    9686:	9c 83       	std	Y+4, r25	; 0x04
    9688:	8b 83       	std	Y+3, r24	; 0x03
    968a:	8b 81       	ldd	r24, Y+3	; 0x03
    968c:	9c 81       	ldd	r25, Y+4	; 0x04
    968e:	01 97       	sbiw	r24, 0x01	; 1
    9690:	f1 f7       	brne	.-4      	; 0x968e <main+0xc8e>
    9692:	9c 83       	std	Y+4, r25	; 0x04
    9694:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9696:	8d 81       	ldd	r24, Y+5	; 0x05
    9698:	9e 81       	ldd	r25, Y+6	; 0x06
    969a:	01 97       	sbiw	r24, 0x01	; 1
    969c:	9e 83       	std	Y+6, r25	; 0x06
    969e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    96a0:	8d 81       	ldd	r24, Y+5	; 0x05
    96a2:	9e 81       	ldd	r25, Y+6	; 0x06
    96a4:	00 97       	sbiw	r24, 0x00	; 0
    96a6:	69 f7       	brne	.-38     	; 0x9682 <main+0xc82>
    96a8:	14 c0       	rjmp	.+40     	; 0x96d2 <main+0xcd2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    96aa:	6f 81       	ldd	r22, Y+7	; 0x07
    96ac:	78 85       	ldd	r23, Y+8	; 0x08
    96ae:	89 85       	ldd	r24, Y+9	; 0x09
    96b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    96b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    96b6:	dc 01       	movw	r26, r24
    96b8:	cb 01       	movw	r24, r22
    96ba:	9e 83       	std	Y+6, r25	; 0x06
    96bc:	8d 83       	std	Y+5, r24	; 0x05
    96be:	8d 81       	ldd	r24, Y+5	; 0x05
    96c0:	9e 81       	ldd	r25, Y+6	; 0x06
    96c2:	9a 83       	std	Y+2, r25	; 0x02
    96c4:	89 83       	std	Y+1, r24	; 0x01
    96c6:	89 81       	ldd	r24, Y+1	; 0x01
    96c8:	9a 81       	ldd	r25, Y+2	; 0x02
    96ca:	01 97       	sbiw	r24, 0x01	; 1
    96cc:	f1 f7       	brne	.-4      	; 0x96ca <main+0xcca>
    96ce:	9a 83       	std	Y+2, r25	; 0x02
    96d0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			CLCD_voidClearLCD();
    96d2:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <CLCD_voidClearLCD>
    96d6:	d4 ca       	rjmp	.-2648   	; 0x8c80 <main+0x280>




		/*Closed System*/
		else if (Local_u8Start_closedSystem == 2)
    96d8:	80 91 55 02 	lds	r24, 0x0255
    96dc:	82 30       	cpi	r24, 0x02	; 2
    96de:	09 f0       	breq	.+2      	; 0x96e2 <main+0xce2>
    96e0:	cf ca       	rjmp	.-2658   	; 0x8c80 <main+0x280>
		{
			/*Turn_off the motors and led green and turn_on led red*/
			LED_voidPinTurnOn(&LED_RedClosedSys);
    96e2:	ce 01       	movw	r24, r28
    96e4:	88 57       	subi	r24, 0x78	; 120
    96e6:	9f 4f       	sbci	r25, 0xFF	; 255
    96e8:	0e 94 04 2b 	call	0x5608	; 0x5608 <LED_voidPinTurnOn>
			LED_voidPinTurnOff(&LED_GreenStartSys);
    96ec:	ce 01       	movw	r24, r28
    96ee:	85 57       	subi	r24, 0x75	; 117
    96f0:	9f 4f       	sbci	r25, 0xFF	; 255
    96f2:	0e 94 2f 2b 	call	0x565e	; 0x565e <LED_voidPinTurnOff>
			DCMOTOR_uint8ControlDirection(&DC_MOTOR, DCMOTOR_STOP);
    96f6:	ce 01       	movw	r24, r28
    96f8:	82 57       	subi	r24, 0x72	; 114
    96fa:	9f 4f       	sbci	r25, 0xFF	; 255
    96fc:	62 e0       	ldi	r22, 0x02	; 2
    96fe:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <DCMOTOR_uint8ControlDirection>
			STEPPER_voidTurnOff();
    9702:	0e 94 36 43 	call	0x866c	; 0x866c <STEPPER_voidTurnOff>
			SERVO_voidSetDegreeRotate(SERVO_OC1B_PIN4, 0);
    9706:	84 e0       	ldi	r24, 0x04	; 4
    9708:	60 e0       	ldi	r22, 0x00	; 0
    970a:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <SERVO_voidSetDegreeRotate>

			CLCD_voidClearLCD();
    970e:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <CLCD_voidClearLCD>
			CLCD_voidSendString("Bye Bye.....");
    9712:	85 e0       	ldi	r24, 0x05	; 5
    9714:	91 e0       	ldi	r25, 0x01	; 1
    9716:	0e 94 9e 19 	call	0x333c	; 0x333c <CLCD_voidSendString>
    971a:	b2 ca       	rjmp	.-2716   	; 0x8c80 <main+0x280>

0000971c <INT0ISR>:



/*Start ISR*/
void INT0ISR(void)
{
    971c:	df 93       	push	r29
    971e:	cf 93       	push	r28
    9720:	cd b7       	in	r28, 0x3d	; 61
    9722:	de b7       	in	r29, 0x3e	; 62
	Local_u8Start_closedSystem = 1;
    9724:	81 e0       	ldi	r24, 0x01	; 1
    9726:	80 93 55 02 	sts	0x0255, r24
}
    972a:	cf 91       	pop	r28
    972c:	df 91       	pop	r29
    972e:	08 95       	ret

00009730 <INT1ISR>:
/*Closed ISR*/
void INT1ISR(void)
{
    9730:	df 93       	push	r29
    9732:	cf 93       	push	r28
    9734:	cd b7       	in	r28, 0x3d	; 61
    9736:	de b7       	in	r29, 0x3e	; 62
	Local_u8Start_closedSystem = 2;
    9738:	82 e0       	ldi	r24, 0x02	; 2
    973a:	80 93 55 02 	sts	0x0255, r24
}
    973e:	cf 91       	pop	r28
    9740:	df 91       	pop	r29
    9742:	08 95       	ret

00009744 <ConvertArrayToValue>:


/*Function convert the array number to the value number and return the angle stepper motor */
u16 ConvertArrayToValue(u8 Copy_u8Number[], u8 Local_u8SizeNumber)
{
    9744:	df 93       	push	r29
    9746:	cf 93       	push	r28
    9748:	00 d0       	rcall	.+0      	; 0x974a <ConvertArrayToValue+0x6>
    974a:	00 d0       	rcall	.+0      	; 0x974c <ConvertArrayToValue+0x8>
    974c:	00 d0       	rcall	.+0      	; 0x974e <ConvertArrayToValue+0xa>
    974e:	cd b7       	in	r28, 0x3d	; 61
    9750:	de b7       	in	r29, 0x3e	; 62
    9752:	9d 83       	std	Y+5, r25	; 0x05
    9754:	8c 83       	std	Y+4, r24	; 0x04
    9756:	6e 83       	std	Y+6, r22	; 0x06
	u16 Number = Copy_u8Number[0];
    9758:	ec 81       	ldd	r30, Y+4	; 0x04
    975a:	fd 81       	ldd	r31, Y+5	; 0x05
    975c:	80 81       	ld	r24, Z
    975e:	88 2f       	mov	r24, r24
    9760:	90 e0       	ldi	r25, 0x00	; 0
    9762:	9b 83       	std	Y+3, r25	; 0x03
    9764:	8a 83       	std	Y+2, r24	; 0x02

	for (u8 counter=1 ; counter < Local_u8SizeNumber ; counter++)
    9766:	81 e0       	ldi	r24, 0x01	; 1
    9768:	89 83       	std	Y+1, r24	; 0x01
    976a:	1f c0       	rjmp	.+62     	; 0x97aa <ConvertArrayToValue+0x66>
	{
		Number = (Number*10) +Copy_u8Number[counter];
    976c:	8a 81       	ldd	r24, Y+2	; 0x02
    976e:	9b 81       	ldd	r25, Y+3	; 0x03
    9770:	9c 01       	movw	r18, r24
    9772:	22 0f       	add	r18, r18
    9774:	33 1f       	adc	r19, r19
    9776:	c9 01       	movw	r24, r18
    9778:	88 0f       	add	r24, r24
    977a:	99 1f       	adc	r25, r25
    977c:	88 0f       	add	r24, r24
    977e:	99 1f       	adc	r25, r25
    9780:	a9 01       	movw	r20, r18
    9782:	48 0f       	add	r20, r24
    9784:	59 1f       	adc	r21, r25
    9786:	89 81       	ldd	r24, Y+1	; 0x01
    9788:	28 2f       	mov	r18, r24
    978a:	30 e0       	ldi	r19, 0x00	; 0
    978c:	8c 81       	ldd	r24, Y+4	; 0x04
    978e:	9d 81       	ldd	r25, Y+5	; 0x05
    9790:	fc 01       	movw	r30, r24
    9792:	e2 0f       	add	r30, r18
    9794:	f3 1f       	adc	r31, r19
    9796:	80 81       	ld	r24, Z
    9798:	88 2f       	mov	r24, r24
    979a:	90 e0       	ldi	r25, 0x00	; 0
    979c:	84 0f       	add	r24, r20
    979e:	95 1f       	adc	r25, r21
    97a0:	9b 83       	std	Y+3, r25	; 0x03
    97a2:	8a 83       	std	Y+2, r24	; 0x02
/*Function convert the array number to the value number and return the angle stepper motor */
u16 ConvertArrayToValue(u8 Copy_u8Number[], u8 Local_u8SizeNumber)
{
	u16 Number = Copy_u8Number[0];

	for (u8 counter=1 ; counter < Local_u8SizeNumber ; counter++)
    97a4:	89 81       	ldd	r24, Y+1	; 0x01
    97a6:	8f 5f       	subi	r24, 0xFF	; 255
    97a8:	89 83       	std	Y+1, r24	; 0x01
    97aa:	99 81       	ldd	r25, Y+1	; 0x01
    97ac:	8e 81       	ldd	r24, Y+6	; 0x06
    97ae:	98 17       	cp	r25, r24
    97b0:	e8 f2       	brcs	.-70     	; 0x976c <ConvertArrayToValue+0x28>
	{
		Number = (Number*10) +Copy_u8Number[counter];
	}

	return Number;
    97b2:	8a 81       	ldd	r24, Y+2	; 0x02
    97b4:	9b 81       	ldd	r25, Y+3	; 0x03
}
    97b6:	26 96       	adiw	r28, 0x06	; 6
    97b8:	0f b6       	in	r0, 0x3f	; 63
    97ba:	f8 94       	cli
    97bc:	de bf       	out	0x3e, r29	; 62
    97be:	0f be       	out	0x3f, r0	; 63
    97c0:	cd bf       	out	0x3d, r28	; 61
    97c2:	cf 91       	pop	r28
    97c4:	df 91       	pop	r29
    97c6:	08 95       	ret

000097c8 <__mulsi3>:
    97c8:	62 9f       	mul	r22, r18
    97ca:	d0 01       	movw	r26, r0
    97cc:	73 9f       	mul	r23, r19
    97ce:	f0 01       	movw	r30, r0
    97d0:	82 9f       	mul	r24, r18
    97d2:	e0 0d       	add	r30, r0
    97d4:	f1 1d       	adc	r31, r1
    97d6:	64 9f       	mul	r22, r20
    97d8:	e0 0d       	add	r30, r0
    97da:	f1 1d       	adc	r31, r1
    97dc:	92 9f       	mul	r25, r18
    97de:	f0 0d       	add	r31, r0
    97e0:	83 9f       	mul	r24, r19
    97e2:	f0 0d       	add	r31, r0
    97e4:	74 9f       	mul	r23, r20
    97e6:	f0 0d       	add	r31, r0
    97e8:	65 9f       	mul	r22, r21
    97ea:	f0 0d       	add	r31, r0
    97ec:	99 27       	eor	r25, r25
    97ee:	72 9f       	mul	r23, r18
    97f0:	b0 0d       	add	r27, r0
    97f2:	e1 1d       	adc	r30, r1
    97f4:	f9 1f       	adc	r31, r25
    97f6:	63 9f       	mul	r22, r19
    97f8:	b0 0d       	add	r27, r0
    97fa:	e1 1d       	adc	r30, r1
    97fc:	f9 1f       	adc	r31, r25
    97fe:	bd 01       	movw	r22, r26
    9800:	cf 01       	movw	r24, r30
    9802:	11 24       	eor	r1, r1
    9804:	08 95       	ret

00009806 <__udivmodhi4>:
    9806:	aa 1b       	sub	r26, r26
    9808:	bb 1b       	sub	r27, r27
    980a:	51 e1       	ldi	r21, 0x11	; 17
    980c:	07 c0       	rjmp	.+14     	; 0x981c <__udivmodhi4_ep>

0000980e <__udivmodhi4_loop>:
    980e:	aa 1f       	adc	r26, r26
    9810:	bb 1f       	adc	r27, r27
    9812:	a6 17       	cp	r26, r22
    9814:	b7 07       	cpc	r27, r23
    9816:	10 f0       	brcs	.+4      	; 0x981c <__udivmodhi4_ep>
    9818:	a6 1b       	sub	r26, r22
    981a:	b7 0b       	sbc	r27, r23

0000981c <__udivmodhi4_ep>:
    981c:	88 1f       	adc	r24, r24
    981e:	99 1f       	adc	r25, r25
    9820:	5a 95       	dec	r21
    9822:	a9 f7       	brne	.-22     	; 0x980e <__udivmodhi4_loop>
    9824:	80 95       	com	r24
    9826:	90 95       	com	r25
    9828:	bc 01       	movw	r22, r24
    982a:	cd 01       	movw	r24, r26
    982c:	08 95       	ret

0000982e <__udivmodsi4>:
    982e:	a1 e2       	ldi	r26, 0x21	; 33
    9830:	1a 2e       	mov	r1, r26
    9832:	aa 1b       	sub	r26, r26
    9834:	bb 1b       	sub	r27, r27
    9836:	fd 01       	movw	r30, r26
    9838:	0d c0       	rjmp	.+26     	; 0x9854 <__udivmodsi4_ep>

0000983a <__udivmodsi4_loop>:
    983a:	aa 1f       	adc	r26, r26
    983c:	bb 1f       	adc	r27, r27
    983e:	ee 1f       	adc	r30, r30
    9840:	ff 1f       	adc	r31, r31
    9842:	a2 17       	cp	r26, r18
    9844:	b3 07       	cpc	r27, r19
    9846:	e4 07       	cpc	r30, r20
    9848:	f5 07       	cpc	r31, r21
    984a:	20 f0       	brcs	.+8      	; 0x9854 <__udivmodsi4_ep>
    984c:	a2 1b       	sub	r26, r18
    984e:	b3 0b       	sbc	r27, r19
    9850:	e4 0b       	sbc	r30, r20
    9852:	f5 0b       	sbc	r31, r21

00009854 <__udivmodsi4_ep>:
    9854:	66 1f       	adc	r22, r22
    9856:	77 1f       	adc	r23, r23
    9858:	88 1f       	adc	r24, r24
    985a:	99 1f       	adc	r25, r25
    985c:	1a 94       	dec	r1
    985e:	69 f7       	brne	.-38     	; 0x983a <__udivmodsi4_loop>
    9860:	60 95       	com	r22
    9862:	70 95       	com	r23
    9864:	80 95       	com	r24
    9866:	90 95       	com	r25
    9868:	9b 01       	movw	r18, r22
    986a:	ac 01       	movw	r20, r24
    986c:	bd 01       	movw	r22, r26
    986e:	cf 01       	movw	r24, r30
    9870:	08 95       	ret

00009872 <__prologue_saves__>:
    9872:	2f 92       	push	r2
    9874:	3f 92       	push	r3
    9876:	4f 92       	push	r4
    9878:	5f 92       	push	r5
    987a:	6f 92       	push	r6
    987c:	7f 92       	push	r7
    987e:	8f 92       	push	r8
    9880:	9f 92       	push	r9
    9882:	af 92       	push	r10
    9884:	bf 92       	push	r11
    9886:	cf 92       	push	r12
    9888:	df 92       	push	r13
    988a:	ef 92       	push	r14
    988c:	ff 92       	push	r15
    988e:	0f 93       	push	r16
    9890:	1f 93       	push	r17
    9892:	cf 93       	push	r28
    9894:	df 93       	push	r29
    9896:	cd b7       	in	r28, 0x3d	; 61
    9898:	de b7       	in	r29, 0x3e	; 62
    989a:	ca 1b       	sub	r28, r26
    989c:	db 0b       	sbc	r29, r27
    989e:	0f b6       	in	r0, 0x3f	; 63
    98a0:	f8 94       	cli
    98a2:	de bf       	out	0x3e, r29	; 62
    98a4:	0f be       	out	0x3f, r0	; 63
    98a6:	cd bf       	out	0x3d, r28	; 61
    98a8:	09 94       	ijmp

000098aa <__epilogue_restores__>:
    98aa:	2a 88       	ldd	r2, Y+18	; 0x12
    98ac:	39 88       	ldd	r3, Y+17	; 0x11
    98ae:	48 88       	ldd	r4, Y+16	; 0x10
    98b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    98b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    98b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    98b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    98b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    98ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    98bc:	b9 84       	ldd	r11, Y+9	; 0x09
    98be:	c8 84       	ldd	r12, Y+8	; 0x08
    98c0:	df 80       	ldd	r13, Y+7	; 0x07
    98c2:	ee 80       	ldd	r14, Y+6	; 0x06
    98c4:	fd 80       	ldd	r15, Y+5	; 0x05
    98c6:	0c 81       	ldd	r16, Y+4	; 0x04
    98c8:	1b 81       	ldd	r17, Y+3	; 0x03
    98ca:	aa 81       	ldd	r26, Y+2	; 0x02
    98cc:	b9 81       	ldd	r27, Y+1	; 0x01
    98ce:	ce 0f       	add	r28, r30
    98d0:	d1 1d       	adc	r29, r1
    98d2:	0f b6       	in	r0, 0x3f	; 63
    98d4:	f8 94       	cli
    98d6:	de bf       	out	0x3e, r29	; 62
    98d8:	0f be       	out	0x3f, r0	; 63
    98da:	cd bf       	out	0x3d, r28	; 61
    98dc:	ed 01       	movw	r28, r26
    98de:	08 95       	ret

000098e0 <_exit>:
    98e0:	f8 94       	cli

000098e2 <__stop_program>:
    98e2:	ff cf       	rjmp	.-2      	; 0x98e2 <__stop_program>
